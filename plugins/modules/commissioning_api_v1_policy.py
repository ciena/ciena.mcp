#!/usr/bin/env python
# Info module template

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by
#   https://github.com/jgroom33/vmware_rest_code_generator
#
# Do not edit this file manually.
#
# Changes should be made in the swagger used to
#   generate this file or in the generator
#
#############################################

from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = """
module: commissioning_api_v1_policy
short_description: Handle resource of type commissioning_api_v1_policy
description: Handle resource of type commissioning_api_v1_policy
options:
  customerName:
    description:
    - Customer notes
    - Used by I(state=['post', 'put'])
    type: str
  description:
    description:
    - Description of policy
    - Used by I(state=['post', 'put'])
    type: str
  id:
    description:
    - Id of the policy
    - Required with I(state=['delete', 'get', 'put'])
    - Used by I(state=['delete', 'get', 'put'])
    type: str
  policyId:
    description:
    - Id of policy
    - Used by I(state=['post', 'put'])
    type: str
  policyName:
    description:
    - Name of policy
    - Required with I(state=['post', 'put'])
    - Used by I(state=['post', 'put'])
    type: str
  policyType:
    description:
    - Type of policy
    - Required with I(state=['post', 'put'])
    - Used by I(state=['post', 'put'])
    type: str
  state:
    choices:
    - delete
    - get
    - post
    - put
    description: []
    type: str
author: []
version_added: 1.0.0
requirements:
- python >= 3.6
"""
IN_QUERY_PARAMETER = ["id"]
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.mcp.plugins.module_utils.mcp import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "mcp_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_HOST"])
        ),
        "mcp_username": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_USER"])
        ),
        "mcp_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["MCP_PASSWORD"]),
        ),
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["delete", "get", "post", "put"],
    }
    argument_spec["policyType"] = {"type": "str", "operationIds": ["post", "put"]}
    argument_spec["policyName"] = {"type": "str", "operationIds": ["post", "put"]}
    argument_spec["policyId"] = {"type": "str", "operationIds": ["post", "put"]}
    argument_spec["id"] = {"type": "str", "operationIds": ["delete", "get", "put"]}
    argument_spec["description"] = {"type": "str", "operationIds": ["post", "put"]}
    argument_spec["customerName"] = {"type": "str", "operationIds": ["post", "put"]}
    return argument_spec


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        mcp_hostname=module.params["mcp_hostname"],
        mcp_username=module.params["mcp_username"],
        mcp_password=module.params["mcp_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return "https://{mcp_hostname}/commissioning/api/v1/policy/".format(**params)


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _delete(params, session):
    _url = "https://{mcp_hostname}/commissioning/api/v1/policy/".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.delete(_url) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "delete")


async def _get(params, session):
    _url = "https://{mcp_hostname}/commissioning/api/v1/policy/".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.get(_url) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "get")


async def _post(params, session):
    accepted_fields = [
        "customerName",
        "description",
        "policyId",
        "policyName",
        "policyType",
    ]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/commissioning/api/v1/policy/".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.post(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "post")


async def _put(params, session):
    accepted_fields = [
        "customerName",
        "description",
        "id",
        "policyId",
        "policyName",
        "policyType",
    ]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/commissioning/api/v1/policy/".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.put(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "put")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
