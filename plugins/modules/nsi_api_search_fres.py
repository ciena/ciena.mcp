#!/usr/bin/env python
# Info module template

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by
#   https://github.com/jgroom33/vmware_rest_code_generator
#
# Do not edit this file manually.
#
# Changes should be made in the swagger used to
#   generate this file or in the generator
#
#############################################

from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = """
module: nsi_api_search_fres
short_description: Handle resource of type nsi_api_search_fres
description: Handle resource of type nsi_api_search_fres
options:
  active:
    choices:
    - 'false'
    - 'true'
    description:
    - (Optional) The active state of the resource
    - Used by I(state=['get', 'post'])
    type: str
  adminState:
    description:
    - '(Optional) Allow filtering on FRE adminState. This parameter accepts a list
      of comma separated values: enabled, disabled, not applicable, In Service, Out
      of Service'
    - Used by I(state=['get', 'post'])
    type: str
  bookingData.lockout:
    choices:
    - 'false'
    - 'true'
    description:
    - (Optional)  Flag that enables/disables a link from having additional tunnel
      BW being consumed
    - Used by I(state=['get', 'post'])
    type: str
  childFreId:
    description:
    - (Optional) The child FRE identifier to return its parents
    - Used by I(state=['get', 'post'])
    type: str
  concrete:
    description:
    - (Optional) List of concrete FRE identifiers
    - Used by I(state=['get', 'post'])
    type: str
  coroutedFreId:
    description:
    - (Optional) Retrieves all correlated FREs that are co-routed and co-terminated
      with the specified FRE Id
    - Used by I(state=['get', 'post'])
    type: str
  customerName:
    description:
    - (Optional) Search for an exact match on customerName
    - Used by I(state=['get', 'post'])
    type: str
  decomposedFreIds:
    description:
    - (Optional) Retrieves all parent FREs that have the specified FRE as a decomposed
      relation
    - Used by I(state=['get', 'post'])
    type: str
  deploymentState:
    description:
    - (Optional) deploymentState parameter used to filter results
    - Used by I(state=['get', 'post'])
    type: str
  directionality:
    choices:
    - bidirectional
    - unidirectional
    description:
    - (Optional) Indicates if unidirectional or bidirectional FREs should be returned
    - Used by I(state=['get', 'post'])
    type: str
  displayAdminState:
    description:
    - (Optional) Allow filtering on FRE adminState display string
    - Used by I(state=['get', 'post'])
    type: str
  displayDeploymentState:
    description:
    - (Optional) Allow filtering on FRE deploymentState display string
    - Used by I(state=['get', 'post'])
    type: str
  displayOperationState:
    description:
    - (Optional) Allow filtering on FRE operationState display string
    - Used by I(state=['get', 'post'])
    type: str
  displayRecoveryCharacteristicsOnHome:
    description:
    - (Optional) Allow filtering on FRE resiliency controller recovery characteristics
      onHome display string
    - Used by I(state=['get', 'post'])
    type: str
  displayTopologySource:
    description:
    - (Optional) Allow filtering on FRE topologySource display string
    - Used by I(state=['get', 'post'])
    type: str
  domainTypes:
    description:
    - (Optional) Allow filtering on FRE domainTypes. This parameter accepts a list
      of comma separated values
    - Used by I(state=['get', 'post'])
    type: str
  endDateMax:
    description:
    - '(Optional) Maximum value of endDate, format is: yyyy-MM-dd''T''HH:mm:ss.SSSZ'
    - Used by I(state=['get', 'post'])
    type: str
  endDateMin:
    description:
    - '(Optional) Minimum value of endDate, format is: yyyy-MM-dd''T''HH:mm:ss.SSSZ'
    - Used by I(state=['get', 'post'])
    type: str
  endpoint.tpe.concrete:
    description:
    - Concrete TPE identifier for endpoints
    - Used by I(state=['get', 'post'])
    type: str
  facilityBypass:
    choices:
    - exclude
    description:
    - (Optional) Allow filtering of FRE's with facilityBypass tunnels.
    - Used by I(state=['get', 'post'])
    type: str
  fields:
    description:
    - (Optional) List of comma separated fields to be included in the response. Fields
      require full path (i.e. data.attributes.field)
    - Used by I(state=['get', 'post'])
    type: str
  freExpectations.equipmentIntent.id:
    description:
    - (Optional) The equipment intent Id
    - Used by I(state=['get', 'post'])
    type: str
  freExpectations.intent.id:
    description:
    - (Optional) The intent id
    - Used by I(state=['get', 'post'])
    type: str
  freExpectations.intent.type:
    description:
    - (Optional) The intent type
    - Used by I(state=['get', 'post'])
    type: str
  freExpectations.serviceIntent.id:
    description:
    - (Optional) The service intent Id
    - Used by I(state=['get', 'post'])
    type: str
  freType:
    description:
    - 'FRE types in comma separated list The allowed values are: explicitRoute, explicitRouteGroup,
      snc, sncGroup, explicitRouteInstance'
    - Used by I(state=['get', 'post'])
    type: str
  gneSubnetName:
    description:
    - (Optional) GNE Subnet name of the FRE
    - Used by I(state=['get', 'post'])
    type: str
  group:
    choices:
    - dwa
    - infrastructure
    - packet
    - packet_infrastructure
    - tdm
    description:
    - (Optional, Deprecated) FRE group :<ul><li>dwa for all FREs in OTU4 and all top
      level FREs in ETHERNET, DSR, DSR_ETHERNET, OTSi(OCH), ODU2, ODU4, ODUCn, OTUCn<li>infrastructure
      for all FRE-APs representing forwarding constructs between ROADM OTS'<li>packet
      for all L2 nodal and top level FREs in ETHERNET including infrastructure</ul>
    - Used by I(state=['get', 'post'])
    type: str
  id:
    description:
    - (Optional) Comma separated list of FRE identifiers to retrieve
    - Used by I(state=['get', 'post'])
    type: str
  identifierKey:
    description:
    - List of comma separated keys for an identifer object
    - Used by I(state=['get', 'post'])
    type: list
  identifierValue:
    description:
    - List of comma separated values for an identifier object
    - Used by I(state=['get', 'post'])
    type: list
  include:
    description:
    - '(Optional) List of comma separated resources to be side-loaded. The allowed
      values are: tpes, expectations, networkConstructs, planned, freDiscovered, frePlanned,
      supportedByFreResiliencyClientTpes'
    - Used by I(state=['get', 'post'])
    type: str
  internalStructure:
    description:
    - '(Optional) Allow filtering on the FRE Internal Structure. This parameter accepts
      a list of comma separated values. The allowed values are: SIMPLE,SIMPLE_SWITCHED,PROTECTED_ONE_END,
      MULTI_SIMPLE, MULTIPLE,PROTECTED_BOTH_ENDSMULTIPOINT, HUB_AND_SPOKE,EXPLICIT,INTERCONNECT_ONE_END,UNKNOWN,FULL_MESH,PARTIAL_MESH'
    - Used by I(state=['get', 'post'])
    type: str
  isOtdrCapable:
    description:
    - (Optional) List all fres that have OTDR capable links.Allowed value is true
    - Used by I(state=['get'])
    type: str
  isUsedByService:
    description:
    - (Optional) Allow filtering of DTLSet fres on the basis of whether they are used
      by snc/sncg or not.Allowed values are true/false
    - Used by I(state=['get'])
    type: str
  layerRate:
    description:
    - 'FRE layer rates in comma separated list. The allowed values are: ETHERNET,
      OTU1, OTU2, OTU2e, OTU3, OTU4, OTUCn, OTSi, OMS, OS, PHY, OTS, FICON, FC, ODU,
      ODU0, ODU1, ODU2, ODU2e, ODU3, ODU4, ODUCn, DSR, DSR_10GE, DSR_100GE, DSR_ETHERNET,
      ENCAPSULATION, MPLS, MPLS_PROTECTION, MEDIA, LAG, RS, E1, E3, E1_2M, EC1, DSR_2M,
      LINE_OC3_STS3_AND_MS_STM1, SECTION_OC3_STS3_AND_RS_STM1, DSR_OC3_STM1, DSR_OC12_STM4,
      DSR_OC48_STM16, DSR_OC192_STM64, CES_IWF, T1, DSR_1_5M, STS1, STS3C, STS12C,
      STS24C, STS48C, DS0, DS1, DS3, VT15, VT2, NOT_APPLICABLE, ODUFLEX, OTUg, ODUg,
      BGP, IP'
    - Used by I(state=['get', 'post'])
    type: str
  layerRateQualifier:
    description:
    - (Optional) Indicates additional qualification information for a LayerRate. For
      example, for beyond 100G rates (e.g. OTUCn, ODUCn), defines the n multiplier,
      or the n-M subrate value.
    - Used by I(state=['get', 'post'])
    type: str
  limit:
    description:
    - The size of a returned page
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.fiber.method:
    choices:
    - osc
    - totalPower
    description:
    - (Optional) Allow filtering on the LQS fiber method. This parameter accepts a
      list of comma separated values
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.fiber.reconciled:
    choices:
    - 'false'
    - 'true'
    description:
    - (Optional) The LQS fiber reconciled state
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.margin.valid:
    choices:
    - 'false'
    - 'true'
    description:
    - (Optional) The LQS margin validity state
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.margin.viableAtEol:
    description:
    - (Optional) A list of LQS margin viable at EOL states
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.ppg.snrStatus:
    description:
    - (Optional) A list of LQS PPG snr states
    - Used by I(state=['get', 'post'])
    type: str
  lqsData.status:
    choices:
    - good
    - high
    - low
    - upgrade
    description:
    - (Optional) Allow filtering on the LQS status. This parameter accepts a list
      of comma separated values
    - Used by I(state=['get', 'post'])
    type: str
  managementName:
    description:
    - Management Name
    - Used by I(state=['get', 'post'])
    type: str
  metaDataFields:
    description:
    - 'MetaData to be included. The allowed values are: layerRate, layerRateQualifier,
      signalContentType, intentLifeCyclePhaseString, intentDeploymentStateString,
      serviceClass, sncgUserlabel, adminState, operationState, lqsData.status, lqsData.margin.valid,
      lqsData.fiber.reconciled, lqsData.fiber.method, lqsData.margin.viableAtEol,
      displayAdminState, displayOperationState, displayTopologySource, customerName,
      domainTypes, resilienceLevel, directionality, displayDeploymentState, ringType,
      ringCompleteness, displayRecoveryCharacteristicsOnHome'
    - Used by I(state=['get', 'post'])
    type: str
  metaDataQualifiers:
    description:
    - '(Optional) List of meta data options. The allowed values are: absoluteTotals'
    - Used by I(state=['get', 'post'])
    type: str
  modelType:
    description:
    - (Optional) modelType parameter used to filter results
    - Used by I(state=['get', 'post'])
    type: str
  namedQuery:
    description:
    - '(Optional) Comma-separated named query id list; The allowed values are: resiliency,
      tdmServices, topologicalLinks, roadmLineSpan, reusableSNCG, tunnelReplacement,
      layer1OtuLinks, photonicSncpWorkLegs, relatedFresFull, relatedFresLight, ringsWithoutConstraints,
      groupedSNCDTLSET, relatedRoadmlineSeedsForIntent<br><br>tunnelReplacement cannot
      be used in combination with other named queries<br><br>photonicSncpWorkLegs
      can not be used alone, networkConstruct.Id must be provided with this named
      query<br><br>relatedFresFull can not be used alone, namedQueryParam1  must be
      provided with this named query.<br><br>relatedFresLight can not be used alone,
      namedQueryParam1 must be provided with this named query.<br><br>relatedRoadmlineSeedsForIntent
      can not be used alone, namedQueryParam1 must be provided with this named query<br><br>groupedSNCDTLSET
      cannot be used in combination with other named queries and can not be used alone,
      namedQueryParam1  must be provided with this named query.'
    - Used by I(state=['get', 'post'])
    type: str
  namedQueryParam1:
    description:
    - Mandatory when namedQuery relatedFresFull/relatedFresLight is used. This parameter
      accepts a list of comma separated freIds
    - Used by I(state=['get', 'post'])
    type: str
  ncTags:
    description:
    - (Optional) List of comma-separated network construct tags that is an endpoint
      for an FRE
    - Used by I(state=['get', 'post'])
    type: str
  networkConstruct.id:
    description:
    - (Optional) Comma separated Network Construct identifier
    - Used by I(state=['get', 'post'])
    type: str
  networkConstruct.id.operator:
    choices:
    - and
    - or
    description:
    - (Optional) The logical operator to use when searching Network Construct identifiers
    - Used by I(state=['get', 'post'])
    type: str
  networkRole:
    choices:
    - FREAP
    - FREhAP
    - IFRE
    - IFRECP
    - ROADMLINE
    description:
    - (Optional) Determines if the FRE participates in an internal or external forwarding
      view or involves access points or connection points
    - Used by I(state=['get', 'post'])
    type: str
  offset:
    description:
    - Offset for the second page
    - Used by I(state=['get', 'post'])
    type: str
  operationState:
    description:
    - '(Optional) Allow filtering on FRE operationState. This parameter accepts a
      list of comma separated values: fully operating, not operating, degraded operation,
      Not Applicable, Undetermined, In Service, Degraded, Out of Service External,
      Out of Service'
    - Used by I(state=['get', 'post'])
    type: str
  ovpnIds:
    description:
    - List of comma separated values for ovpn Id
    - Used by I(state=['get', 'post'])
    type: str
  partitionFreIds:
    description:
    - (Optional) Retrieves all parent FREs that have the specified FRE as a partition
      relation
    - Used by I(state=['get', 'post'])
    type: str
  partitioningFreIds:
    description:
    - (Optional) Retrieves all child FREs that have the specified FRE as a partitioning
      relation
    - Used by I(state=['get', 'post'])
    type: str
  remoteOSRPNodeName:
    description:
    - (Optional) Allow filtering of DTLSet fres on the basis of destination osrp node
      name
    - Used by I(state=['get', 'post'])
    type: str
  resilienceLevel:
    description:
    - '(Optional) Allow filtering on FRE domainTypes. This parameter accepts a list
      of comma separated values: unprotected, partial, protected'
    - Used by I(state=['get', 'post'])
    type: str
  resourceState:
    description:
    - 'List of fre planning states. By default, if no value for this parameter is
      specified, root and unknown states are filtered out. The allowed values are:
      root, planned, discovered, plannedAndDiscovered, unknown'
    - 'Default value: planned,discovered,plannedAndDiscovered2'
    - Used by I(state=['get', 'post'])
    type: str
  ringCompleteness:
    description:
    - '(Optional) Allow filtering on type of G8032 ring completeness. This parameter
      accepts a list of comma separated values: partial, complete'
    - Used by I(state=['get', 'post'])
    type: str
  ringType:
    description:
    - '(Optional) Allow filtering on type of G8032 ring. This parameter accepts a
      list of comma separated values: majorRing, subRing'
    - Used by I(state=['get', 'post'])
    type: str
  roadmLineId:
    description:
    - (Optional) Find services configured over a roadmline based on the roadmline
      FRE identifier.
    - Used by I(state=['get', 'post'])
    type: str
  routingConstraints.inclusionConstraints.id:
    description:
    - (Optional) Retrieves all FREs that have an inclusion constraint relationship
      to the specified identifier
    - Used by I(state=['get', 'post'])
    type: str
  searchFields:
    description:
    - (Optional) List of comma separated fields to search with, combined with searchText.
      Fields require full path (i.e. data.attributes.field)
    - Used by I(state=['get', 'post'])
    type: str
  searchText:
    description:
    - (Optional) The searchable text, (default search Fields are name, layerRate,
      tpeLocations if searchFields is not specified.)
    - Used by I(state=['get', 'post'])
    type: str
  serviceClass:
    description:
    - '(Optional) Allow filtering on the FRE service class. This parameter accepts
      a list of comma separated values. The allowed values are: EVC, ETransit, EAccess,
      VLAN, TDM, Transport Client, Photonic, Tunnel, IP, LLDP, LAG, OTU, ROADM Line,
      Fiber, SNC , OSRP Link, OSRP Line, SNCP, ICL, Ring, L3VPN'
    - Used by I(state=['get', 'post'])
    type: str
  serviceClassMismatch:
    description:
    - 'Allow filtering on the FRE  where the discovered service class and derived
      service class matches or not : true or false'
    - Used by I(state=['post'])
    type: str
  signalContentType:
    description:
    - (Optional) The identifier indicating type of parent to be returned. If specified,
      parent matching the criteria will be returned
    - Used by I(state=['get', 'post'])
    type: str
  sncgUserlabel:
    description:
    - '(Optional) For Control Plane SNCs only: Retrieves all SNCs provided the parent
      SNCG userLabel'
    - Used by I(state=['get', 'post'])
    type: str
  sortBy:
    description:
    - (Optional) List of comma separated fields by which to sort the result. Fields
      require full path (i.e. data.attributes.field). A dash or negative sign before
      a field indicates descending order; by default ascending order is used
    - Used by I(state=['get', 'post'])
    type: str
  srlg:
    description:
    - (Optional) Find roadmlines by srlg values separated by comma. A roadmline is
      a FRE between two SAM cards.
    - Used by I(state=['get', 'post'])
    type: str
  startDateMax:
    description:
    - '(Optional) Maximum value of startDate, format is: yyyy-MM-dd''T''HH:mm:ss.SSSZ'
    - Used by I(state=['get', 'post'])
    type: str
  startDateMin:
    description:
    - '(Optional) Minimum value of startDate, format is: yyyy-MM-dd''T''HH:mm:ss.SSSZ'
    - Used by I(state=['get', 'post'])
    type: str
  state:
    choices:
    - get
    - post
    description: []
    type: str
  supportedByFreId:
    description:
    - (Optional) Retrieves all supported parent FREs (default is one serviceClass/layer
      level up) that have a serviceClass designation for the specified FRE Id
    - Used by I(state=['get', 'post'])
    type: str
  supportedByQualifier:
    choices:
    - all
    - one
    description:
    - (Optional) Used in conjunction with supportedByFreId and controls if only one-level
      (default) or all parent FREs with a serviceClass are returned
    - Used by I(state=['get', 'post'])
    type: str
  supportingFreId:
    description:
    - (Optional) Retrieves all supporting child FREs (one serviceClass/layer level
      down) that have a serviceClass designation for the specified FRE Id
    - Used by I(state=['get', 'post'])
    type: str
  tags:
    description:
    - (Optional) Allow filtering on FRE tags. This parameter accepts a list of comma
      separated strings
    - Used by I(state=['get', 'post'])
    type: str
  tpe.id:
    description:
    - (Optional) Comma separated TPE identifier for endpoints
    - Used by I(state=['get', 'post'])
    type: str
  tpe.id.operator:
    choices:
    - and
    - or
    description:
    - (Optional) The logical operator to use when searching tpeIds
    - Used by I(state=['get', 'post'])
    type: str
  tunnelType:
    description:
    - '(Optional) Allow filtering on FRE Tunnel class service. This parameter accepts
      a list of comma separated values: dynamic, static'
    - Used by I(state=['get', 'post'])
    type: str
  type:
    description:
    - 'FRE types in comma separated list. The allowed values are: service, link, roadmline-ap,
      roadmline'
    - Used by I(state=['get', 'post'])
    type: str
  userLabel:
    description:
    - User label
    - Used by I(state=['get', 'post'])
    type: str
author: []
version_added: 1.0.0
requirements:
- python >= 3.6
"""
IN_QUERY_PARAMETER = ["isOtdrCapable", "isUsedByService"]
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.mcp.plugins.module_utils.mcp import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "mcp_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_HOST"])
        ),
        "mcp_username": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_USER"])
        ),
        "mcp_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["MCP_PASSWORD"]),
        ),
    }
    argument_spec["userLabel"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["type"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["tunnelType"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["tpe_id_operator"] = {
        "type": "str",
        "choices": ["and", "or"],
        "operationIds": ["get", "post"],
    }
    argument_spec["tpe_id"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["tags"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["supportingFreId"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["supportedByQualifier"] = {
        "type": "str",
        "choices": ["all", "one"],
        "operationIds": ["get", "post"],
    }
    argument_spec["supportedByFreId"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["state"] = {"type": "str", "choices": ["get", "post"]}
    argument_spec["startDateMin"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["startDateMax"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["srlg"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["sortBy"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["sncgUserlabel"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["signalContentType"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["serviceClassMismatch"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["serviceClass"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["searchText"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["searchFields"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["routingConstraints_inclusionConstraints_id"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["roadmLineId"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["ringType"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["ringCompleteness"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["resourceState"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["resilienceLevel"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["remoteOSRPNodeName"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["partitioningFreIds"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["partitionFreIds"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["ovpnIds"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["operationState"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["offset"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["networkRole"] = {
        "type": "str",
        "choices": ["FREAP", "FREhAP", "IFRE", "IFRECP", "ROADMLINE"],
        "operationIds": ["get", "post"],
    }
    argument_spec["networkConstruct_id_operator"] = {
        "type": "str",
        "choices": ["and", "or"],
        "operationIds": ["get", "post"],
    }
    argument_spec["networkConstruct_id"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["ncTags"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["namedQueryParam1"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["namedQuery"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["modelType"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["metaDataQualifiers"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["metaDataFields"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["managementName"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["lqsData_status"] = {
        "type": "str",
        "choices": ["good", "high", "low", "upgrade"],
        "operationIds": ["get", "post"],
    }
    argument_spec["lqsData_ppg_snrStatus"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["lqsData_margin_viableAtEol"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["lqsData_margin_valid"] = {
        "type": "str",
        "choices": ["false", "true"],
        "operationIds": ["get", "post"],
    }
    argument_spec["lqsData_fiber_reconciled"] = {
        "type": "str",
        "choices": ["false", "true"],
        "operationIds": ["get", "post"],
    }
    argument_spec["lqsData_fiber_method"] = {
        "type": "str",
        "choices": ["osc", "totalPower"],
        "operationIds": ["get", "post"],
    }
    argument_spec["limit"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["layerRateQualifier"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["layerRate"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["isUsedByService"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["isOtdrCapable"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["internalStructure"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["include"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["identifierValue"] = {"type": "list", "operationIds": ["get", "post"]}
    argument_spec["identifierKey"] = {"type": "list", "operationIds": ["get", "post"]}
    argument_spec["id"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["group"] = {
        "type": "str",
        "choices": ["dwa", "infrastructure", "packet", "packet_infrastructure", "tdm"],
        "operationIds": ["get", "post"],
    }
    argument_spec["gneSubnetName"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["freType"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["freExpectations_serviceIntent_id"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["freExpectations_intent_type"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["freExpectations_intent_id"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["freExpectations_equipmentIntent_id"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["fields"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["facilityBypass"] = {
        "type": "str",
        "choices": ["exclude"],
        "operationIds": ["get", "post"],
    }
    argument_spec["endpoint_tpe_concrete"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["endDateMin"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["endDateMax"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["domainTypes"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["displayTopologySource"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["displayRecoveryCharacteristicsOnHome"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["displayOperationState"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["displayDeploymentState"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["displayAdminState"] = {
        "type": "str",
        "operationIds": ["get", "post"],
    }
    argument_spec["directionality"] = {
        "type": "str",
        "choices": ["bidirectional", "unidirectional"],
        "operationIds": ["get", "post"],
    }
    argument_spec["deploymentState"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["decomposedFreIds"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["customerName"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["coroutedFreId"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["concrete"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["childFreId"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["bookingData_lockout"] = {
        "type": "str",
        "choices": ["false", "true"],
        "operationIds": ["get", "post"],
    }
    argument_spec["adminState"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["active"] = {
        "type": "str",
        "choices": ["false", "true"],
        "operationIds": ["get", "post"],
    }
    return argument_spec


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        mcp_hostname=module.params["mcp_hostname"],
        mcp_username=module.params["mcp_username"],
        mcp_password=module.params["mcp_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return "https://{mcp_hostname}/nsi/api/search/fres".format(**params)


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _get(params, session):
    accepted_fields = [
        "active",
        "adminState",
        "bookingData.lockout",
        "childFreId",
        "concrete",
        "coroutedFreId",
        "customerName",
        "decomposedFreIds",
        "deploymentState",
        "directionality",
        "displayAdminState",
        "displayDeploymentState",
        "displayOperationState",
        "displayRecoveryCharacteristicsOnHome",
        "displayTopologySource",
        "domainTypes",
        "endDateMax",
        "endDateMin",
        "endpoint.tpe.concrete",
        "facilityBypass",
        "fields",
        "freExpectations.equipmentIntent.id",
        "freExpectations.intent.id",
        "freExpectations.intent.type",
        "freExpectations.serviceIntent.id",
        "freType",
        "gneSubnetName",
        "group",
        "id",
        "identifierKey",
        "identifierValue",
        "include",
        "internalStructure",
        "layerRate",
        "layerRateQualifier",
        "limit",
        "lqsData.fiber.method",
        "lqsData.fiber.reconciled",
        "lqsData.margin.valid",
        "lqsData.margin.viableAtEol",
        "lqsData.ppg.snrStatus",
        "lqsData.status",
        "managementName",
        "metaDataFields",
        "metaDataQualifiers",
        "modelType",
        "namedQuery",
        "namedQueryParam1",
        "ncTags",
        "networkConstruct.id",
        "networkConstruct.id.operator",
        "networkRole",
        "offset",
        "operationState",
        "ovpnIds",
        "partitionFreIds",
        "partitioningFreIds",
        "remoteOSRPNodeName",
        "resilienceLevel",
        "resourceState",
        "ringCompleteness",
        "ringType",
        "roadmLineId",
        "routingConstraints.inclusionConstraints.id",
        "searchFields",
        "searchText",
        "serviceClass",
        "signalContentType",
        "sncgUserlabel",
        "sortBy",
        "srlg",
        "startDateMax",
        "startDateMin",
        "supportedByFreId",
        "supportedByQualifier",
        "supportingFreId",
        "tags",
        "tpe.id",
        "tpe.id.operator",
        "tunnelType",
        "type",
        "userLabel",
    ]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/nsi/api/search/fres".format(**params) + gen_args(
        params, IN_QUERY_PARAMETER
    )
    async with session.get(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "get")


async def _post(params, session):
    accepted_fields = [
        "active",
        "adminState",
        "bookingData.lockout",
        "childFreId",
        "concrete",
        "coroutedFreId",
        "customerName",
        "decomposedFreIds",
        "deploymentState",
        "directionality",
        "displayAdminState",
        "displayDeploymentState",
        "displayOperationState",
        "displayRecoveryCharacteristicsOnHome",
        "displayTopologySource",
        "domainTypes",
        "endDateMax",
        "endDateMin",
        "endpoint.tpe.concrete",
        "facilityBypass",
        "fields",
        "freExpectations.equipmentIntent.id",
        "freExpectations.intent.id",
        "freExpectations.intent.type",
        "freExpectations.serviceIntent.id",
        "freType",
        "gneSubnetName",
        "group",
        "id",
        "identifierKey",
        "identifierValue",
        "include",
        "internalStructure",
        "layerRate",
        "layerRateQualifier",
        "limit",
        "lqsData.fiber.method",
        "lqsData.fiber.reconciled",
        "lqsData.margin.valid",
        "lqsData.margin.viableAtEol",
        "lqsData.ppg.snrStatus",
        "lqsData.status",
        "managementName",
        "metaDataFields",
        "metaDataQualifiers",
        "modelType",
        "namedQuery",
        "namedQueryParam1",
        "ncTags",
        "networkConstruct.id",
        "networkConstruct.id.operator",
        "networkRole",
        "offset",
        "operationState",
        "ovpnIds",
        "partitionFreIds",
        "partitioningFreIds",
        "remoteOSRPNodeName",
        "resilienceLevel",
        "resourceState",
        "ringCompleteness",
        "ringType",
        "roadmLineId",
        "routingConstraints.inclusionConstraints.id",
        "searchFields",
        "searchText",
        "serviceClass",
        "serviceClassMismatch",
        "signalContentType",
        "sncgUserlabel",
        "sortBy",
        "srlg",
        "startDateMax",
        "startDateMin",
        "supportedByFreId",
        "supportedByQualifier",
        "supportingFreId",
        "tags",
        "tpe.id",
        "tpe.id.operator",
        "tunnelType",
        "type",
        "userLabel",
    ]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/nsi/api/search/fres".format(**params) + gen_args(
        params, IN_QUERY_PARAMETER
    )
    async with session.post(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "post")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
