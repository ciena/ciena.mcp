#!/usr/bin/env python
# Info module template

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by
#   https://github.com/jgroom33/vmware_rest_code_generator
#
# Do not edit this file manually.
#
# Changes should be made in the swagger used to
#   generate this file or in the generator
#
#############################################

from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = """
module: nsi_api_v3_networkconstructs_by_id_expectations
short_description: Handle resource of type nsi_api_v3_networkconstructs_by_id_expectations
description: Handle resource of type nsi_api_v3_networkconstructs_by_id_expectations
options:
  attributes:
    description:
    - Expectation attributes to be kept by NSI.
    - 'Validate attributes are:'
    - ' - C(accessIdentifier) (str): AID of the device, i.e. for 6500 shelf : SHELF-n.'
    - ' - C(additionalAttributes) (dict): Various miscellaneous attributes that do
      not necessarily belong in the parent resource. Attributes are populated dynamically
      and therefore cannot be documented here.'
    - ' - C(associationState) (str): Association state of the network construct.'
    - ' - C(associationStateLastUpdatedTime) (str): Date at which we last changed
      association state.'
    - ' - C(associationStateQualifier) (str): How the associationState has been set.'
    - ' - C(associationStateQualifierReason) (str): Reason for going into maintenance
      mode.'
    - ' - C(capabilitySpecRef) (str): Name of the file which contains the constraint
      rules of the network device.'
    - ' - C(deviceType) (str): Device Type.'
    - ' - C(deviceVersion) (str): Device version (e.g. 6500 32-SLOT OPTICAL)'
    - ' - C(endDate) (str): The scheduled end date and time of the expectation, with
      RFC 3339 date-time format'
    - ' - C(geoLocation) (dict): The geography location of the device'
    - ' - C(ipAddress) (str): IP address of the network construct.'
    - ' - C(ipCommunicationDetails) (dict): IP communications data for the network
      construct'
    - ' - C(l2Data) (list): It represents the L2 Configuration Data on the NE.'
    - ' - C(longName) (str): Extended name of the Network Construct'
    - ' - C(macAddress) (str): MAC address of the device.'
    - ' - C(memberFunction) (str): Member function of the network construct.'
    - ' - C(modelType) (str): The model type of network construct, TPE, FRE.'
    - ' - C(name) (str): Name (e.g. TID) of the Network Construct'
    - ' - C(networkConstructType) (str): The type of network construct. It is used
      to represent the physical hierarchy of a network element.'
    - ' - C(numberOfShelves) (int): Number of shelves (primary + member shelves in
      case of TIDc)'
    - ' - C(policies) (list): Policies to be applied to the entity.'
    - ' - C(resourcePartitionInfo) (list): It represents which partition the NE belongs
      to.'
    - ' - C(resourceType) (str): Resource Type.'
    - ' - C(serialNumber) (str): Serial number (e.g. NNTMHQDP0001)'
    - ' - C(shelfType) (str): Shelf type of the network construct.'
    - ' - C(softwareImage) (str): Software image'
    - ' - C(softwareType) (str): Software type (e.g. OCP)'
    - ' - C(softwareVersion) (str): Software version running in the device.'
    - ' - C(srlg) (list): Shared risk link group is used by the path computation engine
      to ensure that the alternate links involved in a service do not share the same
      shared risk link group.'
    - ' - C(startDate) (str): The scheduled start date and time of the expectation,
      with RFC 3339 date-time format'
    - ' - C(subnetName) (str): Subnet name (e.g. ROADM1---ROADM2---SUBNET)'
    - ' - C(typeGroup) (str): Resource adapter type group.'
    - Used by I(state=['post'])
    type: dict
  id:
    description:
    - Identifier of the Network Construct under which to create the expectation
    - Required with I(state=['post'])
    - Used by I(state=['post'])
    type: str
  relationships:
    description:
    - 'Validate attributes are:'
    - ' - C(childrenNetworkConstruct) (dict): The one-to-many relationship'
    - ' - C(concrete) (dict): The one-to-many relationship'
    - ' - C(concreteAssociations) (dict): The one-to-many relationship'
    - ' - C(equipmentIntent) (dict): The one-to-one relationship'
    - ' - C(groups) (dict): The one-to-many relationship'
    - ' - C(intent) (dict): The one-to-one relationship'
    - ' - C(parentNetworkConstruct) (dict): The one-to-one relationship'
    - ' - C(physicalLocation) (dict): The one-to-one relationship'
    - ' - C(serviceIntent) (dict): The one-to-one relationship'
    - ' - C(srlg) (dict): The SRLGone-to-many relationship'
    - Used by I(state=['post'])
    type: dict
  state:
    choices:
    - post
    description: []
    type: str
  type:
    description:
    - The network construct expectation type
    - Used by I(state=['post'])
    type: str
author: []
version_added: 1.0.0
requirements:
- python >= 3.6
"""
IN_QUERY_PARAMETER = []
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.mcp.plugins.module_utils.mcp import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "mcp_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_HOST"])
        ),
        "mcp_username": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_USER"])
        ),
        "mcp_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["MCP_PASSWORD"]),
        ),
    }
    argument_spec["type"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["state"] = {"type": "str", "choices": ["post"]}
    argument_spec["relationships"] = {"type": "dict", "operationIds": ["post"]}
    argument_spec["id"] = {"type": "str", "operationIds": ["post", "post"]}
    argument_spec["attributes"] = {"type": "dict", "operationIds": ["post"]}
    return argument_spec


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        mcp_hostname=module.params["mcp_hostname"],
        mcp_username=module.params["mcp_username"],
        mcp_password=module.params["mcp_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return (
        "https://{mcp_hostname}/nsi/api/v3/networkConstructs/{id}/expectations".format(
            **params
        )
    )


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _post(params, session):
    accepted_fields = ["attributes", "id", "relationships", "type"]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = (
        "https://{mcp_hostname}/nsi/api/v3/networkConstructs/{id}/expectations".format(
            **params
        )
        + gen_args(params, IN_QUERY_PARAMETER)
    )
    async with session.post(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "post")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
