#!/usr/bin/env python
# Info module template

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by
#   https://github.com/jgroom33/vmware_rest_code_generator
#
# Do not edit this file manually.
#
# Changes should be made in the swagger used to
#   generate this file or in the generator
#
#############################################

from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = """
module: nsi_api_v4_networkconstructs
short_description: Handle resource of type nsi_api_v4_networkconstructs
description: Handle resource of type nsi_api_v4_networkconstructs
options:
  associationState:
    description:
    - '(Optional) List of networkConstruct associationStates. The allowed values are:
      GOA, LOA'
    - Used by I(state=['get'])
    type: str
  concrete:
    description:
    - (Optional) Id of the concrete networkConstruct
    - Used by I(state=['get'])
    type: str
  displayName:
    description:
    - (Optional) List of device displayName values
    - Used by I(state=['get'])
    type: str
  displaySyncState:
    description:
    - '(Optional) List of networkConstruct syncStates. The allowed values are: planned,
      notSynchronized, synchronizing, synchronized, failed, pending, deleting'
    - Used by I(state=['get'])
    type: str
  fields:
    description:
    - (Optional) List of comma separated fields to be included in the response. Fields
      require full path (i.e. data.attributes.field)
    - Used by I(state=['get'])
    type: str
  id:
    description:
    - (Optional) List of networkConstruct Ids
    - Used by I(state=['get'])
    type: str
  identifierKey:
    description:
    - The identifier key list
    - Used by I(state=['get'])
    type: list
  identifierValue:
    description:
    - The identifier value list
    - Used by I(state=['get'])
    type: list
  include:
    description:
    - '(Optional) List of comma separated resources to be side-loaded. The allowed
      values are: expectations, physicalLocation, parentNetworkConstruct, networkConstructDiscovered,
      networkConstructPlanned'
    - Used by I(state=['get'])
    type: str
  ipAddress:
    description:
    - (Optional) Ip Address of Network Construct
    - Used by I(state=['get'])
    type: str
  limit:
    description:
    - The size of a returned page
    - Used by I(state=['get'])
    type: str
  macAddress:
    description:
    - (Optional) macAddress parameter used to filter results
    - Used by I(state=['get'])
    type: str
  metaDataFields:
    description:
    - '(Optional) List of meta data to be included. The allowed values are: resourceType,
      associationState, syncState, networkConstructType, resourceState, softwareVersion,
      displaySyncState, tags'
    - Used by I(state=['get'])
    type: str
  modelType:
    description:
    - (Optional) modelType parameter used to filter results
    - Used by I(state=['get'])
    type: str
  name:
    description:
    - (Optional) List of device name values
    - Used by I(state=['get'])
    type: str
  networkConstructExpectations.equipmentIntent.id:
    description:
    - (Optional) The equipment intent Id
    - Used by I(state=['get'])
    type: str
  networkConstructExpectations.serviceIntent.id:
    description:
    - (Optional) The service intent Id
    - Used by I(state=['get'])
    type: str
  networkConstructType:
    description:
    - '(Optional) List of Network Construct types. The allowed values are: networkElement,
      shelf, osrpNode'
    - Used by I(state=['get'])
    type: str
  offset:
    description:
    - (Optional) Offset for current index of data to return
    - Used by I(state=['get'])
    type: str
  physicalLocationId:
    description:
    - (Optional) Physical location id
    - Used by I(state=['get'])
    type: str
  resourcePartitionInfo:
    description:
    - (Optional) List of resourcePartitionInfo
    - Used by I(state=['get'])
    type: str
  resourceState:
    description:
    - '(Optional) List of networkConstruct planning states. By default, if no value
      for this parameter is specified, root and unknown states are filtered out. The
      allowed values are: root, planned, discovered, plannedAndDiscovered, unknown'
    - Used by I(state=['get'])
    type: str
  resourceType:
    description:
    - (Optional) List of networkConstruct resourceTypes
    - Used by I(state=['get'])
    type: str
  searchFields:
    description:
    - (Optional) List of comma separated fields to search on. If none are specified,
      all supported fields are implied. Fields require full path (e.g. data.attributes.name)
    - Used by I(state=['get'])
    type: str
  searchText:
    description:
    - (Optional) The searchable text
    - Used by I(state=['get'])
    type: str
  sessionId:
    description:
    - (Optional) List of Management Session Ids
    - Used by I(state=['get'])
    type: str
  slteType:
    description:
    - '(Optional)  slteType parameter used to filter results. The allowed values are:
      SLTE'
    - Used by I(state=['get'])
    type: str
  softwareVersion:
    description:
    - (Optional) List of networkConstruct software versions
    - Used by I(state=['get'])
    type: str
  sortBy:
    description:
    - (Optional) List of comma separated fields by which to sort the result. Fields
      require full path (i.e. data.attributes.field). A dash or negative sign before
      a field indicates descending order; by default ascending order is used
    - Used by I(state=['get'])
    type: str
  state:
    choices:
    - get
    description: []
    type: str
  subnetName:
    description:
    - (Optional) The subnet name list
    - Used by I(state=['get'])
    type: str
  syncState:
    description:
    - '(Optional) List of networkConstruct syncStates. The allowed values are: notSynchronized,
      synchronizing, synchronized, failed, aborted, deleting, deleteFailed'
    - Used by I(state=['get'])
    type: str
  tags:
    description:
    - (Optional) Allow filtering on NC tags. This parameter accepts a list of comma
      separated strings
    - Used by I(state=['get'])
    type: str
  typeGroup:
    description:
    - (Optional) List of networkConstruct typeGroups
    - Used by I(state=['get'])
    type: str
author: []
version_added: 1.0.0
requirements:
- python >= 3.6
"""
IN_QUERY_PARAMETER = [
    "associationState",
    "concrete",
    "displayName",
    "displaySyncState",
    "fields",
    "id",
    "identifierKey",
    "identifierValue",
    "include",
    "ipAddress",
    "limit",
    "macAddress",
    "metaDataFields",
    "modelType",
    "name",
    "networkConstructExpectations.equipmentIntent.id",
    "networkConstructExpectations.serviceIntent.id",
    "networkConstructType",
    "offset",
    "physicalLocationId",
    "resourcePartitionInfo",
    "resourceState",
    "resourceType",
    "searchFields",
    "searchText",
    "sessionId",
    "slteType",
    "softwareVersion",
    "sortBy",
    "subnetName",
    "syncState",
    "tags",
    "typeGroup",
]
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.mcp.plugins.module_utils.mcp import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "mcp_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_HOST"])
        ),
        "mcp_username": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_USER"])
        ),
        "mcp_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["MCP_PASSWORD"]),
        ),
    }
    argument_spec["typeGroup"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["tags"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["syncState"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["subnetName"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["state"] = {"type": "str", "choices": ["get"]}
    argument_spec["sortBy"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["softwareVersion"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["slteType"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["sessionId"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["searchText"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["searchFields"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["resourceType"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["resourceState"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["resourcePartitionInfo"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["physicalLocationId"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["offset"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["networkConstructType"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["networkConstructExpectations_serviceIntent_id"] = {
        "type": "str",
        "operationIds": ["get"],
    }
    argument_spec["networkConstructExpectations_equipmentIntent_id"] = {
        "type": "str",
        "operationIds": ["get"],
    }
    argument_spec["name"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["modelType"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["metaDataFields"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["macAddress"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["limit"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["ipAddress"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["include"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["identifierValue"] = {"type": "list", "operationIds": ["get"]}
    argument_spec["identifierKey"] = {"type": "list", "operationIds": ["get"]}
    argument_spec["id"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["fields"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["displaySyncState"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["displayName"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["concrete"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["associationState"] = {"type": "str", "operationIds": ["get"]}
    return argument_spec


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        mcp_hostname=module.params["mcp_hostname"],
        mcp_username=module.params["mcp_username"],
        mcp_password=module.params["mcp_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return "https://{mcp_hostname}/nsi/api/v4/networkConstructs".format(**params)


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _get(params, session):
    _url = "https://{mcp_hostname}/nsi/api/v4/networkConstructs".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.get(_url) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "get")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
