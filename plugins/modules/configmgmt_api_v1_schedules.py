#!/usr/bin/env python
# Info module template

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by
#   https://github.com/jgroom33/vmware_rest_code_generator
#
# Do not edit this file manually.
#
# Changes should be made in the swagger used to
#   generate this file or in the generator
#
#############################################

from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = """
module: configmgmt_api_v1_schedules
short_description: Handle resource of type configmgmt_api_v1_schedules
description: Handle resource of type configmgmt_api_v1_schedules
options:
  additionalAttributes:
    description:
    - Used by I(state=['post'])
    type: dict
  configMgmtJobId:
    description:
    - Used by I(state=['post'])
    type: str
  frequency:
    description:
    - List of schedule frequencies, Allowed values ONCE, DAILY, WEEKLY, MONTHLY
    - Used by I(state=['get'])
    type: str
  friday:
    description:
    - Friday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  fromNextOperationTime:
    description:
    - (Optional) Time of next operation on Network Construct
    - Used by I(state=['get'])
    type: str
  fromRecentOperationTime:
    description:
    - (Optional) Time of recent operation on Network Construct
    - Used by I(state=['get'])
    type: str
  id:
    description:
    - Used by I(state=['post'])
    type: str
  lastExecutionTime:
    description:
    - Used by I(state=['post'])
    type: str
  limit:
    description:
    - The size of a returned page
    - Used by I(state=['get'])
    type: str
  metaDataFields:
    description:
    - '(Optional) List of meta data to be included. The allowed values are: type,
      frequency, state, weekDays'
    - Used by I(state=['get'])
    type: str
  monday:
    description:
    - Monday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  name:
    description:
    - List of schedule names
    - Used by I(state=['get', 'post'])
    type: str
  nextExecutionTime:
    description:
    - Used by I(state=['post'])
    type: str
  numberOfNEs:
    description:
    - Used by I(state=['post'])
    type: int
  offset:
    description:
    - (Optional) Offset for current index of data to return
    - Used by I(state=['get'])
    type: str
  profileName:
    description:
    - List of profile names
    - Used by I(state=['get'])
    type: str
  releaseNumber:
    description:
    - List of releaseNumbers
    - Used by I(state=['get'])
    type: str
  resourcePartitionInfo:
    description:
    - (Optional) Resource partition info
    - Used by I(state=['get'])
    type: str
  saturday:
    description:
    - Saturdy, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  scheduleDetails:
    description:
    - 'Validate attributes are:'
    - ' - C(scheduleFrequency) (str): '
    - ' - C(scheduleTime) (str): '
    - ' - C(scheduleWeeklyDays) (dict): '
    - Used by I(state=['post'])
    type: dict
  scheduleId:
    description:
    - List of schedule Ids
    - Used by I(state=['get'])
    type: str
  searchFields:
    description:
    - (Optional) List of comma separated fields to search on. If none are specified,
      all supported fields are implied.
    - Used by I(state=['get'])
    type: str
  searchText:
    description:
    - (Optional) The searchable text
    - Used by I(state=['get'])
    type: str
  sortBy:
    description:
    - (Optional) List of comma separated fields by which to sort the result. A dash
      or negative sign before a field indicates descending order; by default ascending
      order is used
    - Used by I(state=['get'])
    type: str
  state:
    choices:
    - get
    - post
    description: []
    type: str
  sunday:
    description:
    - Sunday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  thursday:
    description:
    - Thursday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  toNextOperationTime:
    description:
    - (Optional) Time of next operation on Network Construct
    - Used by I(state=['get'])
    type: str
  toRecentOperationTime:
    description:
    - (Optional) Time of recent operation on Network Construct
    - Used by I(state=['get'])
    type: str
  tuesday:
    description:
    - Tuesday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  type:
    description:
    - List of schedule types
    - Used by I(state=['get', 'post'])
    type: str
  typeGroup:
    description:
    - List of typeGroups
    - Used by I(state=['get'])
    type: str
  wednesday:
    description:
    - Wednesday, Allowed values ON or OFF
    - Used by I(state=['get'])
    type: str
  weekDays:
    description:
    - List of Schedule weekdays
    - Used by I(state=['get'])
    type: str
author: []
version_added: 1.0.0
requirements:
- python >= 3.6
"""
IN_QUERY_PARAMETER = [
    "frequency",
    "friday",
    "fromNextOperationTime",
    "fromRecentOperationTime",
    "limit",
    "metaDataFields",
    "monday",
    "offset",
    "profileName",
    "releaseNumber",
    "resourcePartitionInfo",
    "saturday",
    "scheduleId",
    "searchFields",
    "searchText",
    "sortBy",
    "sunday",
    "thursday",
    "toNextOperationTime",
    "toRecentOperationTime",
    "tuesday",
    "typeGroup",
    "wednesday",
    "weekDays",
]
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.mcp.plugins.module_utils.mcp import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "mcp_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_HOST"])
        ),
        "mcp_username": dict(
            type="str", required=False, fallback=(env_fallback, ["MCP_USER"])
        ),
        "mcp_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["MCP_PASSWORD"]),
        ),
    }
    argument_spec["weekDays"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["wednesday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["typeGroup"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["type"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["tuesday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["toRecentOperationTime"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["toNextOperationTime"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["thursday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["sunday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["state"] = {"type": "str", "choices": ["get", "post"]}
    argument_spec["sortBy"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["searchText"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["searchFields"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["scheduleId"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["scheduleDetails"] = {"type": "dict", "operationIds": ["post"]}
    argument_spec["saturday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["resourcePartitionInfo"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["releaseNumber"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["profileName"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["offset"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["numberOfNEs"] = {"type": "int", "operationIds": ["post"]}
    argument_spec["nextExecutionTime"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["name"] = {"type": "str", "operationIds": ["get", "post"]}
    argument_spec["monday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["metaDataFields"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["limit"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["lastExecutionTime"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["id"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["fromRecentOperationTime"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["fromNextOperationTime"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["friday"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["frequency"] = {"type": "str", "operationIds": ["get"]}
    argument_spec["configMgmtJobId"] = {"type": "str", "operationIds": ["post"]}
    argument_spec["additionalAttributes"] = {"type": "dict", "operationIds": ["post"]}
    return argument_spec


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        mcp_hostname=module.params["mcp_hostname"],
        mcp_username=module.params["mcp_username"],
        mcp_password=module.params["mcp_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return "https://{mcp_hostname}/configmgmt/api/v1/schedules".format(**params)


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _get(params, session):
    accepted_fields = ["name", "type"]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/configmgmt/api/v1/schedules".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.get(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "get")


async def _post(params, session):
    accepted_fields = [
        "additionalAttributes",
        "configMgmtJobId",
        "id",
        "lastExecutionTime",
        "name",
        "nextExecutionTime",
        "numberOfNEs",
        "scheduleDetails",
        "type",
    ]
    spec = {}
    for i in accepted_fields:
        if params[i] is not None:
            spec[i] = params[i]
    _url = "https://{mcp_hostname}/configmgmt/api/v1/schedules".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.post(_url, json=spec) as resp:
        content_types = [
            "application/json-patch+json",
            "application/vnd.api+json",
            "application/json",
        ]
        try:
            if resp.headers["Content-Type"] in content_types:
                _json = await resp.json()
            else:
                print("response Content-Type not supported")
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "post")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
