{
  "swagger": "2.0",
  "info": {
    "description": "Retrieve, plan and modify ports (TPEs)",
    "version": "1.0",
    "title": "Port inventory (TPEs)"
  },
  "tags": [
    {
      "name": "000 - nsiapitpes",
      "description": "Retrieve, plan, and manage the tpe resources<p/>&nbsp;&nbsp;&nbsp;&nbsp;This non-versioned API is meant for use by an end-user as a pass-through to the latest version. WARNING - backwards compatibility is not guaranteed for non-versioned APIs."
    },
    {
      "name": "994 - nsiapiv6tpes",
      "description": "Retrieve, plan, and manage the tpe resources (version 6)"
    },
    {
      "name": "995 - nsiapiv5tpes",
      "description": "Retrieve, plan, and manage the tpe resources (version 5)"
    },
    {
      "name": "996 - nsiapiv4tpes",
      "description": "Retrieve, plan, and manage the tpe resources (version 4)"
    },
    {
      "name": "997 - nsiapiv3tpes",
      "description": "Retrieve, plan, and manage the tpe resources (version 3)"
    },
    {
      "name": "998 - nsiapiv2_0tpes",
      "description": "Retrieve, plan, and manage the tpe resources (version 2)."
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/nsi/api/tpes": {
      "get": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Retrieves the TPEs satisfying the query parameters",
        "description": "<p>LATEST VERSION: V6<p>Only one of the following parameters must be specified:<ul><li>networkConstruct.id<li>tpeExpectations.equipmentIntent.id<li>tpeExpectations.serviceIntent.id<li>equipmentId<li>id<li>concrete</ul>",
        "operationId": "getTpes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE identifiers to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkConstruct.id",
            "in": "query",
            "description": "(Optional) Network Construct identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "(Optional) TPE location - shelf-slot-port or slot-port or port. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationFormat",
            "in": "query",
            "description": "(Optional) Format for the given location; when not given, assume location is [[shelf-]slot-]port. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "structureType",
            "in": "query",
            "description": "(Optional) TPE structure type. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "equipmentId",
            "in": "query",
            "description": "(Optional) Equipment identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.equipmentIntent.id",
            "in": "query",
            "description": "(Optional) The equipment intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.serviceIntent.id",
            "in": "query",
            "description": "(Optional) The service intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "concrete",
            "in": "query",
            "description": "(Optional) Id of the concrete tpe",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.intent.id",
            "in": "query",
            "description": "(Optional) The intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "(Optional) The TPE content level",
            "required": false,
            "type": "string",
            "default": "detail",
            "enum": ["summary", "detail"]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the second page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page. Defaulted to return 30 TPEs at once.",
            "required": false,
            "type": "string",
            "default": "30"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded. The allowed values are: expectations, tpePlanned, tpeDiscovered, concrete",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/TpeListRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Trigger the creation of a TPE",
        "description": "<p>LATEST VERSION: V6<p>This REST API is intended to be used by service provisioning micro-service IFD only to create a TPE expectation.<p>The following attributes and relationships should be specified in the post request:<ul><li>structureType<li>location - management protocol used to retrieve the information and the location of the TPE such as its shelf, slot and port<li>network construct id relationship<li>equipment id relationship if available<li>a list of TPE expectation id relationship<li>the TPE expectation content - specified in the included section<ul><li>layerTerminations, stackDirection, etc.<li>validateParameters - Comma separated list of parameters (if any) to be validated against the expectation</ul></ul><p>The response only has id field populated.<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"tpeId\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"structureType\": \"PTP\",\n      \"locations\": [\n        {\n          \"managementType\": \"tl1\",\n          \"shelf\": \"12\",\n          \"slot\": \"11\",\n          \"port\": \"1\"\n        }\n      ],\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"networkConstruct\": {\n        \"data\": {\n          \"type\": \"networkConstructs\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\"\n        }\n      },\n      \"equipment\": {\n        \"data\": {\n          \"type\": \"equipment\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11\"\n        }\n      },\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"tpeExpId\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"tpeExpId\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\",\n        \"validateParameters\": {\n          \"include\": \"stackDirection\"\n        },\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postTpe",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPE to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created the TPEResource. The response only contains the identifiers of the created TPEResource",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{id}/identifiers": {
      "put": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Puts or updates a REST identifier on a TPE",
        "description": "<p>LATEST VERSION: V4<p>This REST API is used to update/create an identifier on a TPE<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n   \"key1\": \"value1\",\n   \"key2\": \"value2\"\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "updateTpeIdentifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The TPE id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identifierRO",
            "description": "The identifier JSON object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifierRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the TPE identifier for a given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created a new TPE identifier for the given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Deletes a REST identifier on a TPE",
        "description": "<p>LATEST VERSION: V4",
        "operationId": "deleteTpeIdentifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The TPE id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identifierRO",
            "description": "The TPE identifier JSON object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifierRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the TPE identifier for a given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created a new TPE identifier for the given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}": {
      "get": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Retrieves a specific TPE",
        "description": "<p>LATEST VERSION: V3",
        "operationId": "getTpe",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded.  The allowed values are: expectations, tpePlanned, tpeDiscovered",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPE.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "put": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Updates or creates a TPE with an id",
        "description": "<p>LATEST VERSION: V5<p>This REST end point is used to either create the TPE object if it doesn't exist already,<p>or updates the TPE object if it exists.<br><p>There are some attributes that cannot be changed, but can be given in a rest call<p>as long as they match the what is in the database. These attributes are:<ul><li>id<li>networkConstruct.id<li>equipment.id<li>location<li>structureType</ul><p>The response holds the new TPE with the new attributes<p>Here is an example TPE that can be in a request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ],\n      \"cardType\": \"cardType\",\n      \"state\": \"IS\",\n      \"userLabel\": \"my-tpe\",    },\n    \"relationships\": {\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "putTpeById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tpe",
            "description": "The new TPE data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TPE has been successfully updated.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "TPE has been successfully created.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Bad request. Input validation error.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to update TPE.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["000 - nsiapitpes"],
        "summary": "De-provision an actual TPEResource or delete a root TPEResource.",
        "description": "This operation is allowed for a root or actual TPEResource entity.<p>LATEST VERSION: V3",
        "operationId": "deleteTpeById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPEResource identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The de-provisioning request was sent or TPEResource is deleted successfully.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "204": {
            "description": "TPEResource does not exist."
          },
          "400": {
            "description": "The specified TPEResource has expectations.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPEResource",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to delete TPEResource.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/expectations": {
      "post": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Create an TPEResource expectation given the TPEResource id",
        "description": "<p>LATEST VERSION: V4<p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postExpectation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPEResource identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "TPEExpectation to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An existing TPE expectation have been updated on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "201": {
            "description": "TPE expectation has been created on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPEResource",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The specified TPE does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/expectations/{expectationId}/realize": {
      "post": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Perform a provision operation on a TPE",
        "description": "<p>LATEST VERSION: V3\nIf TPE is not realized, it will trigger a create provisioning operation, otherwise it will trigger a update provisioning operation to change the current discovered data.",
        "operationId": "provisionOperations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "expectationId",
            "in": "path",
            "description": "TpeExpectation to realize",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request to provision was sent successfully."
          },
          "400": {
            "description": "Bad request. Input validation error.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Provisioning request failed against TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/tpeExpectations": {
      "get": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Retrieves the expectations of the parent TPE",
        "description": "<p>LATEST VERSION: V2_0",
        "operationId": "getTpeExpectations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE expectation",
            "schema": {
              "$ref": "#/definitions/TpeExpectationListRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The requested TPE can't be found.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve TPE expectations.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/tpeExpectations/{tpeExpectationId}": {
      "get": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Retrieves a specific TPE expectation",
        "description": "<p>LATEST VERSION: V2_0",
        "operationId": "getTpeExpectation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "tpeExpectationId",
            "in": "path",
            "description": "TPE expectation identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Cannot find the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Delete TPE Expectation given tpeId and expectationId",
        "description": "<p>LATEST VERSION: V3",
        "operationId": "deleteTpeExpectation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "tpeExpectationId",
            "in": "path",
            "description": "TPE expectation identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete TPE Expectations with given id successfully."
          },
          "204": {
            "description": "TPE Expectation does not exist."
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "TPE does not exist."
          },
          "500": {
            "description": "Failed to delete TPE Expectation with id.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/tpePlanned": {
      "get": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Retrieves a specific TPE",
        "description": "<p>LATEST VERSION: V3",
        "operationId": "getTpePlanned",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE Planned.",
            "schema": {
              "$ref": "#/definitions/TpePlannedRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "put": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Creates or updates a planned TPE given the TPE id",
        "description": "<p>LATEST VERSION: V3",
        "operationId": "putTpePlanned",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Planned TPE to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpePlannedRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Planned TPE has been updated on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "201": {
            "description": "Planned TPE has been created on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The specified TPE does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/tpes/{tpeId}/userData/{userDataKey}": {
      "put": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Puts a new key value pair into the user data",
        "description": "<p>LATEST VERSION: V3<p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "putTpeUserData",
        "consumes": ["text/plain"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "Identifier of TPE under which to create or update the UserData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userDataKey",
            "in": "path",
            "description": "Key of the UserData to create or update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The desired userData value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TPE user data has been updated ",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "TPE user data has been created",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The TPE with that id doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["000 - nsiapitpes"],
        "summary": "Delete a TPEs userData key and value",
        "description": "<p>LATEST VERSION: V3",
        "operationId": "deleteTpeUserData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "Identifier to TPE under which to create or update the userData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userDataKey",
            "in": "path",
            "description": "The userData key that will be used to delete the potential value",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the userData with the given id"
          },
          "204": {
            "description": "The specified TPE userData does not exist"
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Could not find the TPE with the specified id, or could not find the userData key",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v2_0/tpes/{tpeId}/tpeExpectations": {
      "get": {
        "tags": ["998 - nsiapiv2_0tpes"],
        "summary": "Retrieves the expectations of the parent TPE",
        "description": "",
        "operationId": "getTpeExpectations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE expectation",
            "schema": {
              "$ref": "#/definitions/TpeExpectationListRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The requested TPE can't be found.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve TPE expectations.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v2_0/tpes/{tpeId}/tpeExpectations/{tpeExpectationId}": {
      "get": {
        "tags": ["998 - nsiapiv2_0tpes"],
        "summary": "Retrieves a specific TPE expectation",
        "description": "",
        "operationId": "getTpeExpectation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "tpeExpectationId",
            "in": "path",
            "description": "TPE expectation identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Cannot find the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve the TPE expectation.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["998 - nsiapiv2_0tpes"],
        "summary": "Delete TPE Expectation given tpeId and expectationId",
        "description": "",
        "operationId": "deleteTpeExpectation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "tpeExpectationId",
            "in": "path",
            "description": "TPE expectation identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete TPE Expectations with given id successfully."
          },
          "500": {
            "description": "Failed to delete TPE Expectation with id.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v3/tpes": {
      "get": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Retrieves the TPEs satisfying the query parameters",
        "description": "<p>At least one of the following parameters must be specified:<ul><li>networkConstruct.id<li>tpeExpectations.equipmentIntent.id<li>tpeExpectations.serviceIntent.id<li>equipmentId<li>id</ul>",
        "operationId": "getTpes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstruct.id",
            "in": "query",
            "description": "(Optional) Network Construct identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE identifiers to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "(Optional) TPE location - shelf-slot-port or slot-port or port",
            "required": false,
            "type": "string"
          },
          {
            "name": "structureType",
            "in": "query",
            "description": "(Optional) TPE structure type",
            "required": false,
            "type": "string"
          },
          {
            "name": "equipmentId",
            "in": "query",
            "description": "(Optional) Equipment identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.equipmentIntent.id",
            "in": "query",
            "description": "(Optional) The equipment intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.serviceIntent.id",
            "in": "query",
            "description": "(Optional) The service intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "concrete",
            "in": "query",
            "description": "(Optional) Id of the concrete tpe",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded. The allowed values are: expectations, tpePlanned, tpeDiscovered, concrete",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "(Optional) The TPE content level",
            "required": false,
            "type": "string",
            "default": "detail",
            "enum": ["summary", "detail"]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the second page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page. Defaulted ALL to return all TPEs at once.",
            "required": false,
            "type": "string",
            "default": "ALL"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/TpeListRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Trigger the creation of a TPE",
        "description": "This REST API is intended to be used by service provisioning micro-service IFD only to create a TPE expectation.<p>The following attributes and relationships should be specified in the post request:<ul><li>structureType<li>location - management protocol used to retrieve the information and the location of the TPE such as its shelf, slot and port<li>network construct id relationship<li>equipment id relationship if available<li>a list of TPE expectation id relationship<li>the TPE expectation content - specified in the included section<ul><li>layerTerminations, stackDirection, etc.<li>equipment or service intent id relationship</ul></ul><p>The response only has id field populated.<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"structureType\": \"PTP\",\n      \"locations\": [\n        {\n          \"managementType\": \"tl1\",\n          \"shelf\": \"12\",\n          \"slot\": \"11\",\n          \"port\": \"1\"\n        }\n      ],\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"networkConstruct\": {\n        \"data\": {\n          \"type\": \"networkConstructs\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\"\n        }\n      },\n      \"equipment\": {\n        \"data\": {\n          \"type\": \"equipment\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11\"\n        }\n      },\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre>",
        "operationId": "postTpe",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPE to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created the TPE. The response only contains the identifiers of the created TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v3/tpes/{tpeId}": {
      "get": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Retrieves a specific TPE",
        "description": "",
        "operationId": "getTpe",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded.  The allowed values are: expectations, tpePlanned, tpeDiscovered",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "De-provision an actual TPE or delete a root TPE.",
        "description": "This operation is allowed for a root or actual TPE entity.",
        "operationId": "deleteTpeById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The de-provisioning request was sent or TPE is deleted successfully.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "204": {
            "description": "TPE does not exist."
          },
          "400": {
            "description": "The specified TPE has expectations.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to delete TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v3/tpes/{tpeId}/expectations": {
      "post": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Create an TPE expectation given the TPE id",
        "description": "<p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postExpectation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "TPEExpectation to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An existing FRE expectation have been updated on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "201": {
            "description": "FRE expectation has been created on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The specified FRE does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v3/tpes/{tpeId}/expectations/{expectationId}/realize": {
      "post": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Perform a provision operation on a TPE",
        "description": "If TPE is not realized, it will trigger a create provisioning operation, otherwise it will trigger a update provisioning operation to change the current discovered data.",
        "operationId": "provisionOperations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "expectationId",
            "in": "path",
            "description": "TpeExpectation to realize",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request to provision was sent successfully."
          },
          "400": {
            "description": "Bad request. Input validation error.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Provisioning request failed against TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v3/tpes/{tpeId}/tpeExpectations/{tpeExpectationId}": {
      "delete": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Delete TPE Expectation given tpeId and expectationId",
        "description": "",
        "operationId": "deleteTpeExpectation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "tpeExpectationId",
            "in": "path",
            "description": "TPE expectation identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete TPE Expectations with given id successfully."
          },
          "204": {
            "description": "TPE Expectation does not exist."
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "TPE does not exist."
          },
          "500": {
            "description": "Failed to delete TPE Expectation with id.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v3/tpes/{tpeId}/tpePlanned": {
      "get": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Retrieves a specific TPE",
        "description": "",
        "operationId": "getTpePlanned",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE.",
            "schema": {
              "$ref": "#/definitions/TpePlannedRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPE.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "put": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Creates or updates a planned TPE given the TPE id",
        "description": "<p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "putTpePlanned",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Planned TPE to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpePlannedRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Planned TPE has been updated on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "201": {
            "description": "Planned TPE has been created on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The specified TPE does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v3/tpes/{tpeId}/userData/{userDataKey}": {
      "put": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Puts a new key value pair into the user data",
        "description": "",
        "operationId": "putTpeUserData",
        "consumes": ["text/plain"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "Identifier of TPE under which to create or update the UserData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userDataKey",
            "in": "path",
            "description": "Key of the UserData to create or update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The desired userData value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TPE user data has been updated ",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "TPE user data has been created",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The TPE with that id doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["997 - nsiapiv3tpes"],
        "summary": "Delete a TPEs userData key and value",
        "description": "",
        "operationId": "deleteTpeUserData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "Identifier to TPE under which to create or update the userData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userDataKey",
            "in": "path",
            "description": "The userData key that will be used to delete the potential value",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the userData with the given id"
          },
          "204": {
            "description": "The specified TPE userData does not exist"
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Could not find the TPE with the specified id, or could not find the userData key",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v4/tpes": {
      "get": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Retrieves the TPEs satisfying the query parameters",
        "description": "<p>The following search paths are not supported for the searchFields query parameter:<ul><li>data.attributes.tpeSpec<li>data.attributes.tpeGroupSpecs<li>data.attributes.locations.loc_oid<li>data.attributes.capacityReservations.*<li>data.attributes.syncScopes.*<li>data.relationships.networkConstructAssociation.data.id</ul><p>Specifying a path for the searchFields parameter of an attribute in the following objects will search the parent object for the value specified in searchText: adjacencyPackage, powerPackage, photonicSpectrumPackage, and signalIndex.<p>To specify an expectation path for the searchFields parameter use the prefix \"data.relationships.tpeExpectations.data.*\"",
        "operationId": "getTpes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE identifiers to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied. Fields require full path (e.g. data.attributes.name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceState",
            "in": "query",
            "description": "(Optional) List of networkConstruct planning states. By default, if no value for this parameter is specified, root and unknown states are filtered out. The allowed values are: root, planned, discovered, plannedAndDiscovered, unknown",
            "required": false,
            "type": "string",
            "default": "planned,discovered,plannedAndDiscovered"
          },
          {
            "name": "namedQuery",
            "in": "query",
            "description": "(Optional) Comma-separated named query id list; The allowed values are: portsL2AvailableAll, portsL2ApplicableEPLUni, portsL2ApplicableEVPLUni, portsL2ApplicableEnni, portsL2ApplicableEPLUniWithMcLag, portsL2ApplicableEVPLUniWithMcLag, portsL2ApplicableEnniWithMcLag, portsTunnelsL2ApplicableAll, portsTDMCEApplicableAll",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkConstruct.id",
            "in": "query",
            "description": "(Optional) Network Construct identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifierKey",
            "in": "query",
            "description": "(Optional) The comma separated identifier key set",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "identifierValue",
            "in": "query",
            "description": "(Optional) The comma separated identifier value set",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "concrete",
            "in": "query",
            "description": "(Optional) Id of the concrete tpe",
            "required": false,
            "type": "string"
          },
          {
            "name": "modelType",
            "in": "query",
            "description": "(Optional) modelType parameter used to filter results",
            "required": false,
            "type": "string"
          },
          {
            "name": "bookingData.lockout",
            "in": "query",
            "description": "(Optional)  Flag that enables/disables a link from having additional tunnel BW being consumed",
            "required": false,
            "type": "string",
            "enum": ["true", "false"]
          },
          {
            "name": "active",
            "in": "query",
            "description": "(Optional) The active state of the resource",
            "required": false,
            "type": "string",
            "enum": ["true", "false"]
          },
          {
            "name": "content",
            "in": "query",
            "description": "(Optional) The TPE content level",
            "required": false,
            "type": "string",
            "default": "detail",
            "enum": ["summary", "detail"]
          },
          {
            "name": "location",
            "in": "query",
            "description": "(Optional) TPE location delimited by dashes",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationFormat",
            "in": "query",
            "description": "(Optional) Format for the given location; when not given, assume location is [[shelf-]slot-]port",
            "required": false,
            "type": "string"
          },
          {
            "name": "structureType",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE structure types",
            "required": false,
            "type": "string"
          },
          {
            "name": "equipmentId",
            "in": "query",
            "description": "(Optional) Equipment identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.equipmentIntent.id",
            "in": "query",
            "description": "(Optional) The equipment intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.serviceIntent.id",
            "in": "query",
            "description": "(Optional) The service intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "gneSubnetName",
            "in": "query",
            "description": "(Optional) GNE Subnet name of the TPE",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. Fields require full path (i.e. data.attributes.field). A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the second page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: stackDirection, layerRate, state, cardType, structureType, structureSubType, resourceState",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded. The allowed values are: expectations, concrete, networkConstructs",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/TpeListRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Trigger the creation of a TPE",
        "description": "This REST API is intended to be used by service provisioning micro-service IFD only to create a TPE expectation.<p>The following attributes and relationships should be specified in the post request:<ul><li>structureType<li>location - management protocol used to retrieve the information and the location of the TPE such as its shelf, slot and port<li>network construct id relationship<li>equipment id relationship if available<li>a list of TPE expectation id relationship<li>the TPE expectation content - specified in the included section<ul><li>layerTerminations, stackDirection, etc.<li>validateParameters - Comma separated list of parameters (if any) to be validated against the expectation</ul></ul><p>The response only has id field populated.<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"tpeId\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"structureType\": \"PTP\",\n      \"locations\": [\n        {\n          \"managementType\": \"tl1\",\n          \"shelf\": \"12\",\n          \"slot\": \"11\",\n          \"port\": \"1\"\n        }\n      ],\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"networkConstruct\": {\n        \"data\": {\n          \"type\": \"networkConstructs\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\"\n        }\n      },\n      \"equipment\": {\n        \"data\": {\n          \"type\": \"equipment\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11\"\n        }\n      },\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"tpeExpId\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"tpeExpId\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\",\n        \"validateParameters\": {\n          \"include\": \"stackDirection\"\n        },\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postTpe",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPE to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created the TPE. The response only contains the identifiers of the created TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v4/tpes/{id}/identifiers": {
      "put": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Puts or updates a REST identifier on a TPE",
        "description": "This REST API is used to update/create an identifier on a TPE<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n   \"key1\": \"value1\",\n   \"key2\": \"value2\"\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "updateTpeIdentifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The TPE id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identifierRO",
            "description": "The identifier JSON object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifierRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the TPE identifier for a given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created a new TPE identifier for the given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      },
      "delete": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Deletes a REST identifier on a TPE",
        "description": "",
        "operationId": "deleteTpeIdentifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The TPE id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identifierRO",
            "description": "The TPE identifier JSON object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifierRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the TPE identifier for a given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created a new TPE identifier for the given TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v4/tpes/{tpeId}": {
      "get": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Retrieves a specific TPE",
        "description": "",
        "operationId": "getTpe",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded.  The allowed values are: expectations, tpePlanned, tpeDiscovered",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the TPE.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPE.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "put": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Updates or creates a TPE with an id",
        "description": "This REST end point is used to either create the TPE object if it doesn't exist already,<p>or updates the TPE object if it exists.<br><p>There are some attributes that cannot be changed, but can be given in a rest call<p>as long as they match the what is in the database. These attributes are:<ul><li>id<li>networkConstruct.id<li>equipment.id<li>location<li>structureType</ul><p>The response holds the new TPE with the new attributes<p>Here is an example TPE that can be in a request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\"\n          }\n        ]\n      }\n    },\n    \"tpePlanned\": {\n        \"data\": {\n          \"type\": \"tpePlanned\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n        }\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n      \"type\": \"tpePlanned\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        },\n        \"networkConstruct\": {\n          \"data\": {\n            \"type\": \"networkConstructs\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "putTpeById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "The TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tpeRO",
            "description": "The TpeRO object to be used to update the DB object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TPE has been successfully updated.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "TPE has been successfully created.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Bad request. Input validation error.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to update TPE.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v4/tpes/{tpeId}/expectations": {
      "post": {
        "tags": ["996 - nsiapiv4tpes"],
        "summary": "Create an TPE expectation given the TPE id",
        "description": "<p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postExpectation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "TPEExpectation to create or update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An existing TPE expectation have been updated on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "201": {
            "description": "TPE expectation has been created on the server",
            "schema": {
              "$ref": "#/definitions/TpeExpectationRO"
            }
          },
          "400": {
            "description": "Bad or invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The specified TPE does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    },
    "/nsi/api/v5/tpes": {
      "get": {
        "tags": ["995 - nsiapiv5tpes"],
        "summary": "Retrieves the TPEs satisfying the query parameters",
        "description": "<p>Only one of the following parameters must be specified:<ul><li>networkConstruct.id<li>tpeExpectations.equipmentIntent.id<li>tpeExpectations.serviceIntent.id<li>equipmentId<li>id<li>concrete</ul>",
        "operationId": "getTpesV5",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE identifiers to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkConstruct.id",
            "in": "query",
            "description": "(Optional) Network Construct identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "equipmentId",
            "in": "query",
            "description": "(Optional) Equipment identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.equipmentIntent.id",
            "in": "query",
            "description": "(Optional) The equipment intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.serviceIntent.id",
            "in": "query",
            "description": "(Optional) The service intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "concrete",
            "in": "query",
            "description": "(Optional) Id of the concrete tpe",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "(Optional) The TPE content level",
            "required": false,
            "type": "string",
            "default": "detail",
            "enum": ["summary", "detail"]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the second page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page. Defaulted ALL to return all TPEs at once.",
            "required": false,
            "type": "string",
            "default": "ALL"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded. The allowed values are: expectations, tpePlanned, tpeDiscovered, concrete",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/TpeListRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["995 - nsiapiv5tpes"],
        "summary": "Trigger the creation of a TPE",
        "description": "This REST API is intended to be used by service provisioning micro-service IFD only to create a TPE expectation.<p>The following attributes and relationships should be specified in the post request:<ul><li>structureType<li>location - management protocol used to retrieve the information and the location of the TPE such as its shelf, slot and port<li>network construct id relationship<li>equipment id relationship if available<li>a list of TPE expectation id relationship<li>the TPE expectation content - specified in the included section<ul><li>layerTerminations, stackDirection, etc.<li>validateParameters - Comma separated list of parameters (if any) to be validated against the expectation</ul></ul><p>The response only has id field populated.<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\"\n          }\n        ]\n      }\n    },\n    \"tpePlanned\": {\n        \"data\": {\n          \"type\": \"tpePlanned\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n        }\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n      \"type\": \"tpePlanned\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        },\n        \"networkConstruct\": {\n          \"data\": {\n            \"type\": \"networkConstructs\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postTpe",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPE to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created the TPE. The response only contains the identifiers of the created TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/nsi/api/v5/tpes/{tpeId}": {
      "put": {
        "tags": ["995 - nsiapiv5tpes"],
        "summary": "Updates or creates a TPE with an id",
        "description": "This REST end point is used to either create the TPE object if it doesn't exist already,<p>or updates the TPE object if it exists.<br><p>There are some attributes that cannot be changed, but can be given in a rest call<p>as long as they match the what is in the database. These attributes are:<ul><li>id<li>networkConstruct.id<li>equipment.id<li>location<li>structureType</ul><p>The response holds the new TPE with the new attributes<p>Here is an example TPE that can be in a request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\"\n          }\n        ]\n      }\n    },\n    \"tpePlanned\": {\n        \"data\": {\n          \"type\": \"tpePlanned\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n        }\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n      \"type\": \"tpePlanned\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        },\n        \"networkConstruct\": {\n          \"data\": {\n            \"type\": \"networkConstructs\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "putTpeById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tpeId",
            "in": "path",
            "description": "The TPE identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tpeRO",
            "description": "The TpeRO object to be used to update the DB object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TPE has been successfully updated.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "TPE has been successfully created.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Bad request. Input validation error.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "403": {
            "description": "Forbidden to access specified TPE",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to update TPE.",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        }
      }
    },
    "/nsi/api/v6/tpes": {
      "get": {
        "tags": ["994 - nsiapiv6tpes"],
        "summary": "Retrieves the TPEs satisfying the query parameters",
        "description": "<p>Only one of the following parameters must be specified:<ul><li>networkConstruct.id<li>tpeExpectations.equipmentIntent.id<li>tpeExpectations.serviceIntent.id<li>equipmentId<li>id<li>concrete</ul>",
        "operationId": "getTpesV6",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "(Optional) Comma separated list of TPE identifiers to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkConstruct.id",
            "in": "query",
            "description": "(Optional) Network Construct identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "(Optional) TPE location - shelf-slot-port or slot-port or port. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationFormat",
            "in": "query",
            "description": "(Optional) Format for the given location; when not given, assume location is [[shelf-]slot-]port. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "structureType",
            "in": "query",
            "description": "(Optional) TPE structure type. Only applied when Network Construct identifier is provided.",
            "required": false,
            "type": "string"
          },
          {
            "name": "equipmentId",
            "in": "query",
            "description": "(Optional) Equipment identifier. In case of usage with limit parameter, paging will be enabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.equipmentIntent.id",
            "in": "query",
            "description": "(Optional) The equipment intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.serviceIntent.id",
            "in": "query",
            "description": "(Optional) The service intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "concrete",
            "in": "query",
            "description": "(Optional) Id of the concrete tpe",
            "required": false,
            "type": "string"
          },
          {
            "name": "tpeExpectations.intent.id",
            "in": "query",
            "description": "(Optional) The intent Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "(Optional) The TPE content level",
            "required": false,
            "type": "string",
            "default": "detail",
            "enum": ["summary", "detail"]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to be included in the response. Fields require full path (i.e. data.attributes.field)",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the second page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page. Defaulted to return 30 TPEs at once.",
            "required": false,
            "type": "string",
            "default": "30"
          },
          {
            "name": "include",
            "in": "query",
            "description": "(Optional) List of comma separated resources to be side-loaded. The allowed values are: expectations, tpePlanned, tpeDiscovered, concrete",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/TpeListRO"
            }
          },
          "400": {
            "description": "Invalid value specified for a query parameter.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Failed to retrieve the requested TPEs.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["994 - nsiapiv6tpes"],
        "summary": "Trigger the creation of a TPE",
        "description": "This REST API is intended to be used by service provisioning micro-service IFD only to create a TPE expectation.<p>The following attributes and relationships should be specified in the post request:<ul><li>structureType<li>location - management protocol used to retrieve the information and the location of the TPE such as its shelf, slot and port<li>network construct id relationship<li>equipment id relationship if available<li>a list of TPE expectation id relationship<li>the TPE expectation content - specified in the included section<ul><li>layerTerminations, stackDirection, etc.<li>validateParameters - Comma separated list of parameters (if any) to be validated against the expectation</ul></ul><p>The response only has id field populated.<p>Here is an example request:</p><pre style='font-size: smaller'><code class='json'>{\n  \"data\": {\n    \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n    \"type\": \"tpes\",\n    \"attributes\": {\n      \"userData\": {\n        \"ossLabel\": \"ossLabel\"\n      },\n      \"identifiers\": [\n        {\n          \"ncId\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8\",\n          \"ossLabel\": \"ossLabel\"        }\n      ]\n    },\n    \"relationships\": {\n      \"tpeExpectations\": {\n        \"data\": [\n          {\n            \"type\": \"tpeExpectations\",\n            \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\"\n          }\n        ]\n      }\n    },\n    \"tpePlanned\": {\n        \"data\": {\n          \"type\": \"tpePlanned\",\n          \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n        }\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP::6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\",\n      \"type\": \"tpeExpectations\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"aca92325-0c37-45b4-815d-df8c2c4e7da8::TPE_aca92325-0c37-45b4-815d-df8c2c4e7da8::EQPT_12_11-1-PTP\",\n      \"type\": \"tpePlanned\",\n      \"attributes\": {\n        \"layerTerminations\": [\n          {\n            \"layerRate\": \"OTU4\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"DSR\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"additionalAttributes\": {\n              \"MODULATION\": \"QPSK100G\"\n            }\n          },\n          {\n            \"layerRate\": \"OTSi\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OMS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"OTS\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\"\n          },\n          {\n            \"layerRate\": \"PHY\",\n            \"structureType\": \"full layer fixed\",\n            \"terminationState\": \"layer termination permanently terminated\",\n            \"adjacencyPackage\": {\n              \"adjacencyType\": \"TXRX\",\n              \"localTag\": \"PV0428A-12-11-1\",\n              \"provisionedRemoteTag\": \"PV0428A-11-21-7\",\n              \"remoteTag\": \"PV0428A-11-21-7\",\n              \"topologySourceTag\": \"DISCOVERED\"\n            }\n          }\n        ],\n        \"stackDirection\": \"bidirectional\"\n      },\n      \"relationships\": {\n        \"equipmentIntent\": {\n          \"data\": {\n            \"type\": \"equipmentIntents\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        },\n        \"networkConstruct\": {\n          \"data\": {\n            \"type\": \"networkConstructs\",\n            \"id\": \"6825fda4-1e9f-4c5c-9e48-d5acb4d5b6b9\"\n          }\n        }\n      }\n    }\n  ]\n}</code></pre><p>The following characters are not supported in any id values, userData keys or identifier keys: { } : ? /",
        "operationId": "postTpe",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPE to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "201": {
            "description": "Successfully created the TPE. The response only contains the identifiers of the created TPE",
            "schema": {
              "$ref": "#/definitions/TpeRO"
            }
          },
          "400": {
            "description": "Invalid parameters were provided",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          },
          "500": {
            "description": "Internal system error (error message provided)",
            "schema": {
              "$ref": "#/definitions/ErrorsRO"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessPointRO": {
      "type": "object",
      "properties": {
        "adaptsToLayerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "adaptsToLayerRateQualifier": {
          "type": "string",
          "description": "Provides a means to provide additional qualification attributes for a Layer Rate. For example, for beyond 100G rates OTUCn and ODUCn, the value of n, where n is a multiple of 100. For example, for beyond 100G rates with sub rate potential (i.e. OTUCn-M), this includes the n-M options where n is the number of OxUC overhead instances and M is the number of 5G tributary slots. For example, OTUC4-60 implies 4 instances of OxUC overhead, and 300G capacity (5G x 60).",
          "enum": [
            "ODUC1",
            "ODUC2",
            "ODUC2_25",
            "ODUC2_30",
            "ODUC3",
            "ODUC4",
            "ODUC4_60",
            "ODUC4_70",
            "ODUC5",
            "ODUC5_90",
            "ODUC6",
            "ODUC6_110",
            "ODUC7",
            "ODUC8",
            "OTUC1",
            "OTUC2",
            "OTUC2_25",
            "OTUC2_30",
            "OTUC3",
            "OTUC3_50",
            "OTUC4",
            "OTUC4_60",
            "OTUC4_70",
            "OTUC5",
            "OTUC5_90",
            "OTUC6",
            "OTUC6_110",
            "OTUC7",
            "OTUC8",
            "OC3",
            "OC12",
            "OC48",
            "OC192",
            "OC768",
            "STM1",
            "STM4",
            "STM16",
            "STM64",
            "STM256",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "_1GE",
            "_10GE",
            "_40GE",
            "_100GE",
            "_400GE",
            "_2G5",
            "_1G25",
            "_10G",
            "_40G",
            "_100G",
            "_150G",
            "_200G",
            "_250G",
            "_300G",
            "_350G",
            "_400G",
            "_450G",
            "_500G",
            "_550G",
            "_600G",
            "_700G",
            "_800G",
            "ETHFLEX",
            "FICON1G",
            "FICONEXPRESS2G",
            "FICON4G",
            "FICON8G",
            "FICON16G",
            "FC100",
            "FC200",
            "FC400",
            "FC800",
            "FC1200",
            "FC1600",
            "FC3200",
            "UNKNOWN"
          ]
        },
        "cardinality": {
          "type": "string",
          "description": "Number of possible potential TPEs. Can be a numeric (eg '1', '96', '1000', ...) or can be categorical (eg 'indirect')."
        },
        "clientTpeRulesInOwnLayer": {
          "type": "array",
          "description": "Directions of how to instantiate client TPE(s) for this access point, including indirect (client over client) client TPE instantiation.",
          "items": {
            "$ref": "#/definitions/ConnectionRuleRO"
          }
        },
        "lifeCycleRules": {
          "description": "Indicates the life cycle rules for an entity.",
          "$ref": "#/definitions/LifeCycleRuleRO"
        },
        "regenIdPackage": {
          "description": "This package stores regen related information.",
          "$ref": "#/definitions/RegenIdPackageRO"
        },
        "cascadedDtlTpePackage": {
          "description": "This package stores cascaded dtl tpe information.",
          "$ref": "#/definitions/CascadedDtlTpePackageRO"
        },
        "mirroringBandwidthRules": {
          "type": "string",
          "description": "The mirroringBandwithRules for capacity calculation"
        },
        "mirroringNamingRules": {
          "type": "string",
          "description": "The mirroringNamingRules for capacity calculation"
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "potentialGrowthCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "namingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamingRulesRO"
          }
        },
        "stitchingConstraint": {
          "type": "string",
          "description": "stitchingConstraint values",
          "enum": ["otnRegen"]
        }
      }
    },
    "AdaptationPoolRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the AdaptationPool. Unique in the scope of this TPE."
        },
        "logicalRule": {
          "type": "string",
          "description": "Restrict the number of active poolAdapters could be xOR or OR - default is OR",
          "enum": ["xOR", "OR"]
        },
        "poolAdapters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdapterRO"
          }
        },
        "memberAdaptationPools": {
          "type": "array",
          "description": "Reference(s) to 0 or more member AdaptationPool-s. Allows for nesting of AdaptationPools.",
          "items": {
            "type": "string"
          }
        },
        "namingRules": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        }
      }
    },
    "AdapterRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Adapter. Unique in the scope of this TPE."
        },
        "adaptsToLayerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "adaptsToLayerRateQualifier": {
          "type": "string",
          "description": "Provides a means to provide additional qualification attributes for a Layer Rate. For example, for beyond 100G rates OTUCn and ODUCn, the value of n, where n is a multiple of 100. For example, for beyond 100G rates with sub rate potential (i.e. OTUCn-M), this includes the n-M options where n is the number of OxUC overhead instances and M is the number of 5G tributary slots. For example, OTUC4-60 implies 4 instances of OxUC overhead, and 300G capacity (5G x 60).",
          "enum": [
            "ODUC1",
            "ODUC2",
            "ODUC2_25",
            "ODUC2_30",
            "ODUC3",
            "ODUC4",
            "ODUC4_60",
            "ODUC4_70",
            "ODUC5",
            "ODUC5_90",
            "ODUC6",
            "ODUC6_110",
            "ODUC7",
            "ODUC8",
            "OTUC1",
            "OTUC2",
            "OTUC2_25",
            "OTUC2_30",
            "OTUC3",
            "OTUC3_50",
            "OTUC4",
            "OTUC4_60",
            "OTUC4_70",
            "OTUC5",
            "OTUC5_90",
            "OTUC6",
            "OTUC6_110",
            "OTUC7",
            "OTUC8",
            "OC3",
            "OC12",
            "OC48",
            "OC192",
            "OC768",
            "STM1",
            "STM4",
            "STM16",
            "STM64",
            "STM256",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "_1GE",
            "_10GE",
            "_40GE",
            "_100GE",
            "_400GE",
            "_2G5",
            "_1G25",
            "_10G",
            "_40G",
            "_100G",
            "_150G",
            "_200G",
            "_250G",
            "_300G",
            "_350G",
            "_400G",
            "_450G",
            "_500G",
            "_550G",
            "_600G",
            "_700G",
            "_800G",
            "ETHFLEX",
            "FICON1G",
            "FICONEXPRESS2G",
            "FICON4G",
            "FICON8G",
            "FICON16G",
            "FC100",
            "FC200",
            "FC400",
            "FC800",
            "FC1200",
            "FC1600",
            "FC3200",
            "UNKNOWN"
          ]
        },
        "poolAdapterType": {
          "type": "string",
          "description": "The type for the adapter."
        },
        "connectionRulesInAdaptationLayer": {
          "type": "array",
          "description": "Directions of how to instantiate client TPE(s) for this adapter, including indirect (client over client) client TPE instantiation.",
          "items": {
            "$ref": "#/definitions/ConnectionRuleRO"
          }
        },
        "cardinality": {
          "type": "string",
          "description": "Number of possible potential TPEs. Can be a numeric (eg '1', '96', '1000', ...) or can be categorical (eg 'indirect')."
        },
        "continuousAdapterRulesPackage": {
          "description": "This package stores various rules to be considered when instantiating a new TPE utilizing continuous b/w.",
          "$ref": "#/definitions/ContinuousAdapterRulesPackageRO"
        },
        "mappingInteractionRules": {
          "type": "array",
          "description": "The specification of the interaction between the support for different client layer protocols signals.",
          "items": {
            "$ref": "#/definitions/MappingInteractionRuleRO"
          }
        },
        "potentialAdapterCapacities": {
          "type": "array",
          "description": "Total potential capacity of this Adapter.",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "lifeCycleRules": {
          "description": "Indicates the life cycle rules for an entity.",
          "$ref": "#/definitions/LifeCycleRuleRO"
        },
        "photonicSpectrumPackage": {
          "description": "This package stores photonic spectrum information.",
          "$ref": "#/definitions/PhotonicSpectrumPackageRO"
        },
        "nameToCapacityMappingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameToCapacityMappingRulesRO"
          }
        },
        "eFreTerminationState": {
          "type": "string",
          "description": "Values to handle TPEs that have multiple poolAdapters, especially multiple poolAdapters adapting to the same layer rate",
          "enum": ["hapFre_terminated", "hapFre_not_terminated"]
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "mirroringBandwidthRules": {
          "type": "string",
          "description": "The mirroringBandwithRules for capacity calculation"
        },
        "mirroringNamingRules": {
          "type": "string",
          "description": "The mirroringNamingRules for capacity calculation"
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "potentialGrowthCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "namingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamingRulesRO"
          }
        },
        "stitchingConstraint": {
          "type": "string",
          "description": "stitchingConstraint values",
          "enum": ["otnRegen"]
        }
      }
    },
    "AdditionalAttributesRO": {
      "type": "object"
    },
    "AdjacencyPackageRO": {
      "type": "object",
      "properties": {
        "adjacencyType": {
          "type": "string",
          "description": "This field delimits the adjacency type between two network elements (Ex: LIM, LINE, etc...)."
        },
        "localTag": {
          "type": "string",
          "description": "The actual tag of the originating network element."
        },
        "localTagFormat": {
          "type": "string",
          "description": "The format of the local adjacency tag."
        },
        "provisionedRemoteTag": {
          "type": "string",
          "description": "The provisioned remote tag is the expected destination defined by the user that adheres to the remoteTagFormat."
        },
        "provisionedRemoteTagFormat": {
          "type": "string",
          "description": "The format of the remote provisioning adjacency tag."
        },
        "remoteTag": {
          "type": "string",
          "description": "The actual remote tag as discovered by the network element."
        },
        "remoteTagFormat": {
          "type": "string",
          "description": "The format of the remote adjacency tag."
        },
        "topologySourceTag": {
          "type": "string",
          "description": "The tag representing the topological state. This could be 'DISCOVERED', for example."
        },
        "adjacencyMechanism": {
          "type": "string",
          "description": "The attribute defining the adjacency mechanism used."
        },
        "linkAttributes": {
          "description": "This package stores information of Link.",
          "$ref": "#/definitions/LinkAttributesRO"
        }
      }
    },
    "AfiSafiNextHopSelfRO": {
      "type": "object",
      "properties": {
        "configured": {
          "type": "boolean",
          "description": "true/false depending on if nbr is added as route reflector client for afi and safi",
          "default": false
        },
        "excludeReflectedRoutes": {
          "type": "boolean",
          "description": "true/false depending on if nbr is added as route reflector client for afi and safi",
          "default": false
        }
      }
    },
    "AfiSafiOrfRO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Outbound Route Filtering type"
        },
        "direction": {
          "type": "string",
          "description": "Outbound Route Filtering direction",
          "enum": ["rx", "tx", "both"]
        }
      }
    },
    "AfiSafiPrefixListRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name to filter BGP advertisements."
        },
        "direction": {
          "type": "string",
          "description": "Direction to filter BGP advertisements.",
          "enum": ["in", "out"]
        }
      }
    },
    "AggregationBucketRO": {
      "type": "object",
      "properties": {
        "bucketKey": {
          "type": "string",
          "description": "The key of the aggregation criteria"
        },
        "bucketValue": {
          "type": "string",
          "description": "The result of the aggregation"
        },
        "absoluteTotal": {
          "type": "string",
          "description": "The unfiltered total number of entities in the data"
        },
        "subAggregations": {
          "description": "The aggregated data based on a requested aggregation name and criteria",
          "$ref": "#/definitions/AggregationRO"
        }
      }
    },
    "AggregationRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the aggregation"
        },
        "buckets": {
          "type": "array",
          "description": "Aggregation results for different criteria",
          "items": {
            "$ref": "#/definitions/AggregationBucketRO"
          }
        }
      }
    },
    "AssociationIdentifierRO": {
      "type": "object"
    },
    "AssociationRO": {
      "type": "object",
      "properties": {
        "orderIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The order index value of this entry (to allow defining an entry order)"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of association. Each value indicates what type of relationship this association is representing.",
          "enum": ["concrete", "owningServer", "physical"]
        },
        "relationship": {
          "type": "string",
          "description": "The association relationship resource type",
          "enum": ["networkConstructs", "tpes", "fres"]
        },
        "freType": {
          "type": "string",
          "description": "The type of the fre that's associated with."
        },
        "identifier": {
          "description": "Association Identifier",
          "$ref": "#/definitions/AssociationIdentifierRO"
        },
        "id": {
          "type": "string",
          "description": "The id of the resource being referenced by this association"
        },
        "nodalId": {
          "type": "string",
          "description": "The id of the resource being referenced by this association"
        }
      }
    },
    "AttributeMatchingRuleRO": {
      "type": "object",
      "properties": {
        "matchingScope": {
          "type": "string",
          "enum": ["e2e", "local"]
        },
        "matchRequired": {
          "type": "boolean",
          "default": false
        },
        "impact": {
          "type": "string",
          "enum": ["trafficImpactingWithNoMatch", "noTrafficImpactWithNoMatch"]
        }
      }
    },
    "AttributeModificationRuleRO": {
      "type": "object",
      "properties": {
        "permittedOperation": {
          "type": "string",
          "enum": ["writeAtCreationTime", "readWrite", "readOnly"]
        },
        "constraint": {
          "type": "string",
          "enum": ["writeAtFarEnd"]
        }
      }
    },
    "AttributePoliciesRO": {
      "type": "object",
      "properties": {
        "defaultAttributeSourcePolicy": {
          "type": "string",
          "description": "Source of attribute.",
          "enum": ["plannedOverDiscovered", "discoveredOverPlanned"]
        },
        "overrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributePolicyOverrideRO"
          }
        }
      }
    },
    "AttributePolicyOverrideRO": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string",
          "description": "Attribute path(e.g. attribute.customerCode or relationship.endpoints)"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["plannedOverDiscovered", "discoveredOverPlanned"]
          }
        },
        "attributeSource": {
          "type": "string",
          "description": "Attribute source, in case it has the value from some other references, (e.g. attributes.srlg is relationships.srlgs.id"
        }
      }
    },
    "AttributeSpecRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of attribute."
        },
        "location": {
          "type": "string",
          "description": "Location of attribute, using dot notation e.g. attributes.layerTerminations[DSR].additionalAttributes."
        },
        "format": {
          "type": "string",
          "description": "Format of attribute."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default value for attribute."
        },
        "modificationRules": {
          "type": "array",
          "description": "List of operations that are permitted on the attribute.",
          "items": {
            "$ref": "#/definitions/AttributeModificationRuleRO"
          }
        },
        "displayRules": {
          "type": "array",
          "description": "Display rules applicable for the attribute.",
          "items": {
            "$ref": "#/definitions/DisplayRuleRO"
          }
        },
        "valueOptions": {
          "description": "Provides a means to specify the possible values for an attribute.",
          "$ref": "#/definitions/AttributeValueOptionRO"
        },
        "matchingRules": {
          "type": "array",
          "description": "List of matching rules that apply to this attribute.",
          "items": {
            "$ref": "#/definitions/AttributeMatchingRuleRO"
          }
        }
      }
    },
    "AttributeValueOptionRO": {
      "type": "object",
      "properties": {
        "selectFrom": {
          "type": "array",
          "description": "A comma separated list of the choices available for selection.",
          "items": {
            "type": "string"
          }
        },
        "range": {
          "type": "string",
          "description": "A range of values in the format of '<from>,<to>,[step]' whereby from is the initial value, to is the end value, and an optional step value to indicate the increment."
        }
      }
    },
    "BandwidthThresholdRO": {
      "type": "object",
      "properties": {
        "ODU0": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU0) advertised for a link."
        },
        "ODU1": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU1) advertised for a link."
        },
        "ODU2": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU2) advertised for a link."
        },
        "ODU2E": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU2E) advertised for a link."
        },
        "ODU3": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU3) advertised for a link."
        },
        "ODU4": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (here unit of ODU4) advertised for a link."
        },
        "ODUFLEXRSZ": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (in Bps) for Resizable ODU Flex advertised for a link."
        },
        "ODUFLEXNRSZ": {
          "type": "string",
          "description": "The Bandwidth Threshold shows the maximum number of bandwidth units (in Bps) for Non-Resizable ODU Flex advertised for a link."
        }
      }
    },
    "BfdRO": {
      "type": "object",
      "properties": {
        "bfdType": {
          "type": "string",
          "description": "Type of BFD - ipBFD, mplsBFD or bgpBFD",
          "enum": ["ipBFD", "mplsBFD", "bgpBFD"]
        },
        "configured": {
          "type": "boolean",
          "description": "True when BFD is enabled on this endpoint",
          "default": false
        },
        "profileName": {
          "type": "string",
          "description": "The profile name associated with this set of BFD attributes"
        },
        "adminState": {
          "type": "string",
          "description": "The administrative state of BFD for this endpoint",
          "enum": ["up", "down"]
        },
        "operationalState": {
          "type": "string",
          "description": "The operational state of BFD for this endpoint",
          "enum": ["up", "down"]
        },
        "role": {
          "type": "string",
          "description": "The role of BFD for this endpoint",
          "enum": ["passive", "active", "any"]
        },
        "transmitInterval": {
          "type": "string",
          "description": "The interval between transmitting BFD messages"
        },
        "receiveInterval": {
          "type": "string",
          "description": "The interval between receiving BFD messages"
        },
        "ipEncapsulation": {
          "type": "boolean",
          "description": "To report IP settings on the interface",
          "default": false
        },
        "pathType": {
          "type": "string",
          "description": "Single-hop BFD or Multi-hop BFD",
          "enum": ["ipsh", "ipmh"]
        },
        "srcAddress": {
          "type": "string",
          "description": "Local IP address"
        },
        "destAddress": {
          "type": "string",
          "description": "IP address of the peer"
        },
        "localMultiplier": {
          "type": "integer",
          "format": "int32",
          "description": "The negotiated transmit interval, multiplied by this value, provides the Detection Time for the receiving system"
        },
        "desiredMinTxInterval": {
          "type": "string",
          "description": "Rate at which BFD Control packets are transmitted to the remote system "
        },
        "requiredMinRxInterval": {
          "type": "string",
          "description": "Rate at which BFD Control packets arrive from the remote system"
        },
        "sourcePort": {
          "type": "integer",
          "format": "int32",
          "description": "Source UDP port valid only when IP encapsulation is used"
        },
        "destPort": {
          "type": "integer",
          "format": "int32",
          "description": "Destination UDP port valid only when IP encapsulation is used"
        },
        "diagnostic": {
          "type": "string",
          "description": "A diagnostic code specifying the local system's reason for the last change in session state"
        },
        "mhop": {
          "type": "boolean",
          "description": "True when multihop IP BFD is enabled for BGP on this endpoint",
          "default": false
        }
      }
    },
    "BgpAfiSafiRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Supported afi-safi names.",
          "enum": ["IPV4_UNICAST", "IPV4_LABELED_UNICAST"]
        },
        "activated": {
          "type": "boolean",
          "description": "true if activated otherwise false",
          "default": false
        },
        "grCapability": {
          "type": "string",
          "description": "GR capability",
          "enum": ["enabled", "disabled"]
        },
        "prefixList": {
          "description": "This stores BGP Afi Safi Prefix List related information.",
          "$ref": "#/definitions/AfiSafiPrefixListRO"
        },
        "orf": {
          "description": "This stores BGP Afi Safi Orf related information.",
          "$ref": "#/definitions/AfiSafiOrfRO"
        },
        "rrEnabled": {
          "type": "boolean",
          "description": "true/false depending on if nbr is added as route reflector client for afi and safi",
          "default": false
        },
        "nextHopSelf": {
          "description": "This stores BGP Afi Safi NextHopSelf related information.",
          "$ref": "#/definitions/AfiSafiNextHopSelfRO"
        }
      }
    },
    "BgpBfdRO": {
      "type": "object",
      "properties": {
        "configured": {
          "type": "boolean",
          "description": "True when BFD is enabled on this endpoint",
          "default": false
        },
        "profileName": {
          "type": "string",
          "description": "The profile name associated with this set of BFD attributes"
        },
        "adminState": {
          "type": "string",
          "description": "The administrative state of BFD for this endpoint",
          "enum": ["up", "down"]
        },
        "operationalState": {
          "type": "string",
          "description": "The operational state of BFD for this endpoint",
          "enum": ["up", "down"]
        },
        "role": {
          "type": "string",
          "description": "The role of BFD for this endpoint",
          "enum": ["passive", "active", "any"]
        },
        "transmitInterval": {
          "type": "string",
          "description": "The interval between transmitting BFD messages"
        },
        "receiveInterval": {
          "type": "string",
          "description": "The interval between receiving BFD messages"
        },
        "mhop": {
          "type": "boolean",
          "description": "True when BFD is enabled on this endpoint",
          "default": false
        }
      }
    },
    "BgpMsgsRO": {
      "type": "object",
      "properties": {
        "peerInUpdates": {
          "type": "string",
          "description": "Number of peer in updates"
        },
        "peerOutUpdates": {
          "type": "string",
          "description": "Number of peer out updates"
        },
        "peerInTotalMessages": {
          "type": "string",
          "description": "Total Number of peer messages"
        },
        "peerOutTotalMessages": {
          "type": "string",
          "description": "Total number of peer out messages"
        },
        "peerInUpdateElapsedTime": {
          "type": "string",
          "description": "Peer updated elapsed time in seconds"
        },
        "lastError": {
          "description": "This stores BGP Message Last Error related information.",
          "$ref": "#/definitions/MsgsLastErrorRO"
        }
      }
    },
    "BgpPackageRO": {
      "type": "object",
      "properties": {
        "peerType": {
          "type": "string",
          "description": "internal/external depending on peerAs number is same as local or different.",
          "enum": ["internal", "external"]
        },
        "peerAs": {
          "type": "integer",
          "format": "int64",
          "description": "Autonomous System number configured for the peer."
        },
        "peerBgpIdentifier": {
          "type": "string",
          "description": "BGP identifier of the peer. Learned only in OPEN CONFIRM and ESTABLISHED states."
        },
        "peerState": {
          "type": "string",
          "description": "BGP states",
          "enum": [
            "idle",
            "connect",
            "active",
            "opensent",
            "openconfirm",
            "established"
          ]
        },
        "peerNegotiatedBGPVersion": {
          "type": "string",
          "description": "Learned only in OPENCONFIRM and ESTABLISHED states."
        },
        "peerFsmEstablishedTransitions": {
          "type": "string",
          "description": "Peer Fsm established transitions."
        },
        "peerFsmEstablishedTime": {
          "type": "string",
          "description": "Peer Fsm established time in seconds."
        },
        "bfd": {
          "description": "Holds BFD attributes for BGP TPE endpoint",
          "$ref": "#/definitions/BgpBfdRO"
        },
        "transport": {
          "description": "This package stores BGP transport related information.",
          "$ref": "#/definitions/BgpTransportRO"
        },
        "timers": {
          "description": "This package stores BGP time related information.",
          "$ref": "#/definitions/BgpTimersRO"
        },
        "rr": {
          "description": "This package stores BGP route reflector related information.",
          "$ref": "#/definitions/BgpRrRO"
        },
        "msgs": {
          "description": "This package stores BGP message related information.",
          "$ref": "#/definitions/BgpMsgsRO"
        },
        "afiSafi": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BgpAfiSafiRO"
          }
        }
      }
    },
    "BgpRrRO": {
      "type": "object",
      "properties": {
        "peerClusterId": {
          "type": "string",
          "description": "The cluster-id to which peer belongs if it is configured as RR client."
        },
        "peerRole": {
          "type": "string",
          "description": "Role of the peer",
          "enum": ["client", "routeReflector"]
        },
        "role": {
          "type": "string",
          "description": "self role",
          "enum": ["client", "routeReflector"]
        }
      }
    },
    "BgpTimersRO": {
      "type": "object",
      "properties": {
        "peerConnectRetryInterval": {
          "type": "string",
          "description": "Peer connection retry intervel in seconds."
        },
        "peerNegotiatedHoldTime": {
          "type": "string",
          "description": "Peer negotiation hold time in seconds"
        },
        "peerConfiguredHoldTime": {
          "type": "string",
          "description": "Peer configured hold time in seconds"
        },
        "peerNegotiatedKeepAliveTime": {
          "type": "string",
          "description": "Peer negotiation keep alive time in seconds"
        },
        "peerConfiguredKeepAliveTime": {
          "type": "string",
          "description": "Peer configured keep alive time in seconds"
        },
        "peerMinASOriginationInterval": {
          "type": "string",
          "description": "Peer minimum AS origination intervel in seconds"
        },
        "peerMinRouteAdvertisementInterval": {
          "type": "string",
          "description": "Peer minimum advertised intervel in seconds"
        }
      }
    },
    "BgpTransportRO": {
      "type": "object",
      "properties": {
        "localIp": {
          "type": "string",
          "description": "If update-source is configured then IP address of the interface. Rely on learned localIp if it is reported. Reported in OPENCONFIRM and ESTABLISHED states."
        },
        "localPort": {
          "type": "string",
          "description": "Local port reported in OPENCONFIRM and ESTABLISHED states."
        },
        "peerIp": {
          "type": "string",
          "description": "Peer Ip configured as part of BGP peer configuration."
        },
        "peerPort": {
          "type": "string",
          "description": "Peer port reported in OPENCONFIRM and ESTABLISHED states."
        }
      }
    },
    "BookingDataRO": {
      "type": "object",
      "properties": {
        "assignedBandwidth": {
          "type": "string",
          "description": "The bandwidth assigned to the link."
        },
        "assignedBandwidthUnit": {
          "type": "string",
          "description": "The unit of the bandwidth assigned to the link."
        },
        "bandwidthLockout": {
          "type": "boolean",
          "description": "Flag that enables/disables a link from having additional tunnel BW being consumed.",
          "default": false
        },
        "bookingFactor": {
          "type": "string",
          "description": "The factor that dictates how much overbooking is allowed."
        }
      }
    },
    "BwRO": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "description": "The bandwidth unit that applies to all bandwidth attributes in this package. Available values: bps, kbps, mbps, gbps"
        },
        "used": {
          "type": "string",
          "description": "The current used bandwidth by all supported clients"
        },
        "minimum": {
          "type": "string",
          "description": "The minimum bandwidth configured for supported clients"
        },
        "maximum": {
          "type": "string",
          "description": "The maximum bandwidth configured for supported clients"
        },
        "increment": {
          "type": "string",
          "description": "The configured bandwidth increment for auto-sizing of an MPLS tunnel"
        },
        "requested": {
          "type": "string",
          "description": "The requested bandwidth from the supporting layer, e.g. a dynamic tunnel requesting bandwidth from IP interface"
        },
        "operational": {
          "type": "string",
          "description": "The current bandwidth being allocated from the supporting layer"
        },
        "total": {
          "type": "string",
          "description": "The total bandwidth allocated or allowed, e.g. the capacity of an IP interface"
        },
        "bookingFactor": {
          "type": "string",
          "description": "The booking factor of how much the bandwidth can be oversubscribed, e.g. on an IP interface"
        },
        "maxReservable": {
          "type": "string",
          "description": "The maximum reservable bandwidth allowed to be allocated to supported clients and it's calculated as bwBookingFactor x bwTotal"
        },
        "available": {
          "type": "string",
          "description": "The available bandwidth left to be"
        },
        "autoSize": {
          "type": "string",
          "description": "If true, the MPLS tunnel will be auto-sized by the NE",
          "enum": ["enable", "disable"]
        },
        "autoSizingMode": {
          "type": "string",
          "description": "The configured auto-sizing mode",
          "enum": ["none", "cac", "utilization"]
        },
        "autoSizeFailureAction": {
          "type": "string",
          "description": "The action to be taken when auto-sizing fails: raise alarm, or make-before-break",
          "enum": ["none", "alarm", "mbb"]
        },
        "autoSizeIntervalMinutes": {
          "type": "string",
          "description": "The configured interval between auto-sizing attempts"
        },
        "autoSizeLastResizeState": {
          "type": "string",
          "description": "The state of the last auto-sizing attempt",
          "enum": ["success", "failure", "in_progress"]
        },
        "autoSizeLastResizeStartTime": {
          "type": "string",
          "description": "Start time of the last auto resize happened"
        },
        "autoSizeLastResizeEndTime": {
          "type": "string",
          "description": "End time of the last auto resize happened"
        },
        "autoSizeLastResizeReason": {
          "type": "string",
          "description": "Reason of the last auto resize happened"
        },
        "profileName": {
          "type": "string",
          "description": "The name of the bandwidth profile associated with the dynamic tunnel endpoint"
        }
      }
    },
    "CapabilitySpecRO": {
      "type": "object",
      "properties": {
        "attributeSpecs": {
          "type": "array",
          "description": "List of attributes defined in the capability specification that can be acted upon.",
          "items": {
            "$ref": "#/definitions/AttributeSpecRO"
          }
        }
      }
    },
    "CapacityPatternRO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Identifies Pattern type",
          "enum": ["LIST", "RANGE", "POOL", "PERCENTAGE"]
        },
        "format": {
          "type": "string",
          "description": "An optional regex expression or format string describing how to parse the size string in case of multiple values, e.g. CIR:EIR"
        }
      }
    },
    "CapacityRO": {
      "type": "object",
      "properties": {
        "layer": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "capacityClass": {
          "type": "string",
          "description": "Discrete – b/w space is treated as a list of discrete values; this is default. Continuous – b/w space is treated as continuous segment, in the range of low/upper.",
          "enum": ["discrete", "continuous"]
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Number of potential client instances or usage instances"
        },
        "capacitySize": {
          "description": "Identifies how the capacity size is to be interpreted : LIST is a discrete list of values, RANGE is a range in values etc...",
          "$ref": "#/definitions/CapacitySizeRO"
        },
        "capacityCalculationRule": {
          "type": "string",
          "description": "Core logic that will be used on capacity calculation"
        },
        "source": {
          "type": "string",
          "description": "Source of the capacity"
        },
        "maxLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum potential client instances"
        }
      }
    },
    "CapacityReservationRO": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "usedCapacity": {
          "description": "Resource to track total and used capacity per client type for a TPE",
          "$ref": "#/definitions/CapacityRO"
        }
      }
    },
    "CapacitySizeRO": {
      "type": "object",
      "properties": {
        "size": {
          "type": "array",
          "description": "Capacity size to be interpreted with CapacityPattern",
          "items": {
            "type": "string"
          }
        },
        "pattern": {
          "description": "Identifies how the capacity size is to be interpreted : LIST is a discrete list of values, RANGE is a range in values etc...",
          "$ref": "#/definitions/CapacityPatternRO"
        },
        "unit": {
          "type": "string",
          "description": "unit for size string value"
        }
      }
    },
    "CascadedDtlTpePackageRO": {
      "type": "object",
      "properties": {
        "cascadedDtlIdTuple": {
          "type": "string",
          "description": "This field Cascaded DTL ID Tuple info.."
        }
      }
    },
    "ColorEntryRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the color"
        },
        "bitmask": {
          "type": "string",
          "description": "The 32-bit hexadecimal bitmask of the color"
        }
      }
    },
    "ColorGroupRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the color group"
        },
        "bitmask": {
          "type": "string",
          "description": "The 32-bit hexadecimal bitmask of the color group"
        },
        "colors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColorEntryRO"
          }
        }
      }
    },
    "ConnectionPointRO": {
      "type": "object",
      "properties": {
        "owningPoolAdapterType": {
          "type": "string",
          "description": "Type of the owner Adapter."
        },
        "dynamicOwningPoolAdapterFgiRules": {
          "type": "array",
          "description": "dynamicOwningPoolAdapterFgiRules",
          "items": {
            "type": "string"
          }
        },
        "mirroringBandwidthRules": {
          "type": "string",
          "description": "The mirroringBandwithRules for capacity calculation"
        },
        "mirroringNamingRules": {
          "type": "string",
          "description": "The mirroringNamingRules for capacity calculation"
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "potentialGrowthCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "namingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamingRulesRO"
          }
        },
        "stitchingConstraint": {
          "type": "string",
          "description": "stitchingConstraint values",
          "enum": ["otnRegen"]
        }
      }
    },
    "ConnectionRuleRO": {
      "type": "object",
      "properties": {
        "targetLayer": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "rule": {
          "type": "string",
          "description": "toServerUsingClientExternalFGRule matchers server's clientExternalFGRule",
          "enum": [
            "mustConnectInternally",
            "clientExternalFGRule",
            "connectsExternally",
            "toServerUsingClientExternalFGRule",
            "externalFGRule",
            "externalFGRuleViaImmediateClientPotential",
            "toDualPortPeerUsingClientExternalFGRule",
            "transitionalAtCreationTime"
          ]
        },
        "immediateClientPotential": {
          "type": "string",
          "description": "If describing connectionRulesInAdaptationLayer: names of TPESpec of immediate client TPE. If describing connectionRulesInOwnLayer: null (not relevant). If describing mustConnectInternally: null (not relevant)."
        },
        "immediateDualPortPeerPotential": {
          "type": "string",
          "description": "If describing connectionRulesInAdaptationLayer: names of TPESpec of dual port peer TPE. If describing connectionRulesInOwnLayer: null (not relevant). If describing mustConnectInternally: null (not relevant)."
        }
      }
    },
    "ContinuousAdapterRulesPackageRO": {
      "type": "object",
      "properties": {
        "segmentationRule": {
          "type": "string",
          "description": "Whether the segment can be fragmented.",
          "enum": ["oneSegementInGroup"]
        },
        "widthRule": {
          "type": "string",
          "description": "How wide the range can be. Can point to a specific algorithm to be executed.",
          "enum": ["mediaChannelWidthRule", "nmcWidthRule"]
        },
        "lowerBoundaryRule": {
          "type": "string",
          "description": "Rule that the boundary of the range must follow. Can point to a specific algorithm to be executed.",
          "enum": [
            "mustSnapTo6_25GHzGrid_0_768",
            "mustSnapTo37_5GHzGrid_0_96",
            "snapTo6_25GHzGrid",
            "snapTo50GHzGrid",
            "snapTo100GHzGrid",
            "snapTo75GHzGrid"
          ]
        },
        "upperBoundaryRule": {
          "type": "string",
          "description": "Rule that the boundary of the range must follow. Can point to a specific algorithm to be executed.",
          "enum": [
            "mustSnapTo6_25GHzGrid_0_768",
            "mustSnapTo37_5GHzGrid_0_96",
            "snapTo6_25GHzGrid",
            "snapTo50GHzGrid",
            "snapTo100GHzGrid",
            "snapTo75GHzGrid"
          ]
        },
        "centerFrequencyRule": {
          "type": "string",
          "description": "Rule that the centerFrequency of the range must follow. Can point to a specific algorithm to be executed.",
          "enum": ["transponderResolution"]
        }
      }
    },
    "ControlPlanePackageRO": {
      "type": "object",
      "properties": {
        "osrpCommChannel": {
          "type": "string",
          "description": "communication carrier.",
          "enum": ["GCC0", "GCC1", "GCC2", "GCC12"]
        },
        "ovpnIds": {
          "type": "array",
          "description": "The optical virtual private network ID list",
          "items": {
            "type": "string"
          }
        },
        "applicableRates": {
          "type": "string",
          "description": "Applicable Rates list"
        },
        "holdBackSdThresholds": {
          "type": "string",
          "description": "Holdback signal degrade threshold"
        },
        "bwThresholdMode": {
          "type": "string",
          "description": "The default setting of OSRP link bandwidth threshold mode",
          "enum": ["ADV_ALL", "AUTO", "MANUAL"]
        },
        "commonId": {
          "type": "integer",
          "format": "int32",
          "description": "Common identifier of the OSRP line"
        },
        "holdOffTimer": {
          "type": "integer",
          "format": "int32",
          "description": "Line-Level hold-off timer "
        },
        "configuredLatencyType": {
          "type": "string",
          "description": "Describe whether the latency is discovered or  manual.",
          "enum": ["disc", "manual"]
        },
        "isMaster": {
          "type": "boolean",
          "description": "Specifies if this end of the OSRP link is the master.",
          "default": false
        },
        "commState": {
          "type": "string",
          "description": "State of the Hello protocol finite state machine."
        },
        "bwLockOut": {
          "type": "string",
          "description": "Specifies if bandwidth lockout is enabled locally for the OSRP line.",
          "enum": ["NO", "YES"]
        },
        "bwThreshold": {
          "$ref": "#/definitions/BandwidthThresholdRO"
        }
      }
    },
    "DisplayRuleRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of attribute."
        },
        "disabled": {
          "type": "boolean",
          "description": "Describes whether attribute is disabled or not.",
          "default": false
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorDescription": {
          "type": "string"
        },
        "msgAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "ErrorRO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code"
        },
        "title": {
          "type": "string",
          "description": "Error title"
        },
        "detail": {
          "type": "string",
          "description": "Error details"
        },
        "source": {
          "description": "Error source",
          "$ref": "#/definitions/ErrorSourceRO"
        }
      }
    },
    "ErrorSourceRO": {
      "type": "object",
      "properties": {
        "pointer": {
          "type": "string",
          "description": "JSON Pointer to the associated entity in the request document"
        },
        "parameter": {
          "type": "string",
          "description": "URI query parameter that caused the error"
        }
      }
    },
    "Errors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "ErrorsRO": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "description": "A list of errors",
          "items": {
            "$ref": "#/definitions/ErrorRO"
          }
        }
      }
    },
    "G8032PackageRO": {
      "type": "object",
      "properties": {
        "ringId": {
          "type": "string",
          "description": "The logical ring ID"
        },
        "logicalRingName": {
          "type": "string",
          "description": "The logical ring name"
        },
        "virtualRingName": {
          "type": "string",
          "description": "the virtual ring name"
        },
        "rapsVid": {
          "type": "string",
          "description": "the R-APS VID of the ring"
        },
        "rplOwner": {
          "type": "boolean",
          "description": "True if the port is configured as RPL-owner.",
          "default": false
        },
        "operationalChannelBlock": {
          "type": "boolean",
          "description": "True if the port is blocked, i.e portState == Blocked",
          "default": false
        },
        "ringType": {
          "type": "string",
          "description": "the type of ring",
          "enum": ["majorRing", "subRing"]
        },
        "sharedPort": {
          "type": "string",
          "description": "sharedPort information for the sub-ring (ONLY for sub-ring endNode)"
        },
        "sharedPortRef": {
          "type": "string",
          "description": "the ID of the PTP on the shared port"
        },
        "forceSwitch": {
          "type": "boolean",
          "description": "a flag indicating whether the switching is forced or not.",
          "default": false
        },
        "subRingTermination": {
          "type": "boolean",
          "description": "flag indicating whether the subring is terminating or not",
          "default": false
        },
        "portDirection": {
          "type": "string",
          "description": "the direction of the port.",
          "enum": ["east", "west"]
        },
        "revertive": {
          "type": "boolean",
          "description": "revertive",
          "default": false
        },
        "holdOffTime": {
          "type": "integer",
          "format": "int32",
          "description": "hold off time in milliseconds"
        },
        "holdOffTimeUnit": {
          "type": "string",
          "description": "Unit of time",
          "enum": ["min", "sec", "msec"]
        },
        "waitToRestore": {
          "type": "integer",
          "format": "int32",
          "description": "wait to restore time in minute. "
        },
        "waitToRestoreUnit": {
          "type": "string",
          "description": "Unit of time",
          "enum": ["min", "sec", "msec"]
        },
        "waitToBlock": {
          "type": "integer",
          "format": "int32",
          "description": "wait to block time in milliseconds. "
        },
        "waitToBlockUnit": {
          "type": "string",
          "description": "Unit of time",
          "enum": ["min", "sec", "msec"]
        },
        "guardTime": {
          "type": "integer",
          "format": "int32",
          "description": "guard time in millisecond."
        },
        "guardTimeUnit": {
          "type": "string",
          "description": "Unit of time",
          "enum": ["min", "sec", "msec"]
        },
        "ringMembers": {
          "type": "string",
          "description": "a comma separated list of virtual ring members."
        },
        "ringState": {
          "type": "string",
          "description": "the state of the ring",
          "enum": [
            "initializing",
            "ok",
            "adminDisabled",
            "operationalDisabled",
            "protecting",
            "recovering",
            "manualSwitch",
            "forceSwitch",
            "unknown"
          ]
        },
        "ringStatus": {
          "type": "string",
          "description": "the status of the ring",
          "enum": [
            "ok",
            "localSignalFailure",
            "localForceSwitch",
            "remoteOtherPortSignalFailure",
            "remoteOtherPortForceSwitch",
            "provisioningMismatch",
            "notReceivingPDUS",
            "noRPLOwnerDetected",
            "unknown"
          ]
        },
        "portState": {
          "type": "string",
          "description": "the state of the port",
          "enum": [
            "disabled",
            "forwarding",
            "blocked",
            "localManualSwitch",
            "localForceSwitch",
            "unknown"
          ]
        },
        "portStatus": {
          "type": "string",
          "description": "the status of the port",
          "enum": [
            "ok",
            "down",
            "CCMFailure",
            "localForceSwitch",
            "remoteForceSwitch",
            "remoteSignalFailure",
            "unknown"
          ]
        }
      }
    },
    "HopEntryRO": {
      "type": "object",
      "properties": {
        "hopAddress": {
          "type": "string",
          "description": "The IP-data interface address for this hop"
        },
        "hopType": {
          "type": "string",
          "description": "The type of this hop",
          "enum": ["strict", "loose"]
        }
      }
    },
    "IdentifierRO": {
      "type": "object"
    },
    "IndexesRO": {
      "type": "object"
    },
    "IpInterfacePackageRO": {
      "type": "object",
      "properties": {
        "bfd": {
          "description": "Holds BFD attributes for TPE endpoint",
          "$ref": "#/definitions/BfdRO"
        },
        "isis": {
          "description": "Holds IsIs attributes",
          "$ref": "#/definitions/IsIsRO"
        }
      }
    },
    "IsIsLevelDataRO": {
      "type": "object",
      "properties": {
        "levelType": {
          "type": "string",
          "description": "Level of an IS-IS node - can be level-1, level-2 or level-1-2"
        },
        "linkCost": {
          "type": "integer",
          "format": "int32",
          "description": "Cost associated with the links having range 1-63, i.e. default-10, delay, expense etc."
        },
        "lfaCandidateEnable": {
          "type": "boolean",
          "description": "Enable/disable the interface from being used as LFA for level-1, level-2 or level-1-2 primary route",
          "default": false
        }
      }
    },
    "IsIsRO": {
      "type": "object",
      "properties": {
        "instance-tag": {
          "type": "string",
          "description": "Protocol instance Tag"
        },
        "levels": {
          "type": "array",
          "description": "Contains IsIs Level attribute details",
          "items": {
            "$ref": "#/definitions/IsIsLevelDataRO"
          }
        },
        "interfaceType": {
          "type": "string",
          "description": "point-to-point or point-to-multipoint network"
        },
        "bfdEnabled": {
          "type": "boolean",
          "description": "Bidirectional forwarding detection for ISIS",
          "default": false
        }
      }
    },
    "ItsPackageRO": {
      "type": "object",
      "properties": {
        "itsMode": {
          "type": "string",
          "description": "Specify supported ITS mode"
        }
      }
    },
    "LayerProtocolRO": {
      "type": "object",
      "properties": {
        "termination": {
          "description": "The specification of the layer protocol termination (including framing, modulation etc). For example the specification of the function that takes a MAC frame and extracts the content (removing the MAC address in the process).",
          "$ref": "#/definitions/TerminationRO"
        },
        "adaptationPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdaptationPoolRO"
          }
        },
        "layeredAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayeredAttributeRO"
          }
        },
        "accessPoint": {
          "$ref": "#/definitions/AccessPointRO"
        },
        "connectionPoint": {
          "$ref": "#/definitions/ConnectionPointRO"
        },
        "tandemConnectionMonitoring": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TandemConnectionMonitoringRO"
          }
        }
      }
    },
    "LayerTerminationRO": {
      "type": "object",
      "properties": {
        "layerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "nativeLayerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "dynamicLayerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "layerRateQualifier": {
          "type": "string",
          "description": "Provides a means to provide additional qualification attributes for a Layer Rate. For example, for beyond 100G rates OTUCn and ODUCn, the value of n, where n is a multiple of 100. For example, for beyond 100G rates with sub rate potential (i.e. OTUCn-M), this includes the n-M options where n is the number of OxUC overhead instances and M is the number of 5G tributary slots. For example, OTUC4-60 implies 4 instances of OxUC overhead, and 300G capacity (5G x 60).",
          "enum": [
            "ODUC1",
            "ODUC2",
            "ODUC2_25",
            "ODUC2_30",
            "ODUC3",
            "ODUC4",
            "ODUC4_60",
            "ODUC4_70",
            "ODUC5",
            "ODUC5_90",
            "ODUC6",
            "ODUC6_110",
            "ODUC7",
            "ODUC8",
            "OTUC1",
            "OTUC2",
            "OTUC2_25",
            "OTUC2_30",
            "OTUC3",
            "OTUC3_50",
            "OTUC4",
            "OTUC4_60",
            "OTUC4_70",
            "OTUC5",
            "OTUC5_90",
            "OTUC6",
            "OTUC6_110",
            "OTUC7",
            "OTUC8",
            "OC3",
            "OC12",
            "OC48",
            "OC192",
            "OC768",
            "STM1",
            "STM4",
            "STM16",
            "STM64",
            "STM256",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "_1GE",
            "_10GE",
            "_40GE",
            "_100GE",
            "_400GE",
            "_2G5",
            "_1G25",
            "_10G",
            "_40G",
            "_100G",
            "_150G",
            "_200G",
            "_250G",
            "_300G",
            "_350G",
            "_400G",
            "_450G",
            "_500G",
            "_550G",
            "_600G",
            "_700G",
            "_800G",
            "ETHFLEX",
            "FICON1G",
            "FICONEXPRESS2G",
            "FICON4G",
            "FICON8G",
            "FICON16G",
            "FC100",
            "FC200",
            "FC400",
            "FC800",
            "FC1200",
            "FC1600",
            "FC3200",
            "UNKNOWN"
          ]
        },
        "structureType": {
          "type": "string",
          "description": "Identifies the internal structure of the layer termination.",
          "enum": [
            "dual_port",
            "dual_port_client_mapping",
            "exposed_lone_cp",
            "lone_adapter",
            "full_layer_optional_exposed_cp",
            "full_layer_optional_exposed_cp_and_tcp",
            "full_layer_fixed",
            "exposed_tcp",
            "concatenating_adapter",
            "concatenatable_exposed_tcp",
            "layer_termination_structure_type_unknown",
            "concatenatable_fixed",
            "exposed_TCP_and_CP"
          ]
        },
        "terminationState": {
          "type": "string",
          "description": "Whether and how this LayerTermination is terminated.",
          "enum": [
            "layer_termination_cannot_terminate",
            "layer_termination_not_terminated",
            "terminated_server_to_client_flow",
            "terminated_client_to_server_flow",
            "terminated_bidirectional",
            "layer_termination_permanently_terminated",
            "termination_state_unknown"
          ]
        },
        "adminState": {
          "type": "string",
          "description": "The administrative state of the layer termination.",
          "enum": ["up", "down"]
        },
        "operationalState": {
          "type": "string",
          "description": "The operational (actual) state of the layer termination.",
          "enum": ["up", "down", "link_flapping", "abnormal"]
        },
        "active": {
          "type": "boolean",
          "description": "Whether or not an inactive layer appears to be absent from the layer stack.",
          "default": false
        },
        "adjacencyPackage": {
          "description": "This package stores layer adjacency information.",
          "$ref": "#/definitions/AdjacencyPackageRO"
        },
        "retainedAdjacencyPackage": {
          "description": "This package stores layer adjacency information.",
          "$ref": "#/definitions/AdjacencyPackageRO"
        },
        "manualAdjacencyPackage": {
          "description": "This package stores layer adjacency information.",
          "$ref": "#/definitions/AdjacencyPackageRO"
        },
        "powerPackage": {
          "description": "This package stores power related information.",
          "$ref": "#/definitions/PowerPackageRO"
        },
        "photonicSpectrumPackage": {
          "description": "This package stores photonic spectrum information.",
          "$ref": "#/definitions/PhotonicSpectrumPackageRO"
        },
        "cfmPackages": {
          "type": "array",
          "description": "Holds data related to CFM services configured on an Ethernet service",
          "items": {
            "$ref": "#/definitions/TpeCfmPackageRO"
          }
        },
        "mplsPackage": {
          "description": "This package stores MPLS tunnel information.",
          "$ref": "#/definitions/MplsPackageRO"
        },
        "g8032Package": {
          "description": "This package stores information about the G8032 ring",
          "$ref": "#/definitions/G8032PackageRO"
        },
        "signalIndex": {
          "description": "Attribute representing a signal index (e.g. channel information, wavelength, etc).",
          "$ref": "#/definitions/SignalIndexRO"
        },
        "nativeName": {
          "type": "string",
          "description": "The name of the TPE that is native to the network element."
        },
        "layerProtocol": {
          "description": "A LayerProtocol instance is used for controlling termination and monitoring functionality. Also, it is used for controlling the adaptation (i.e. encapsulation and/or multiplexing of client signal), tandem connection monitoring, traffic conditioning and/or shaping functionality at an intermediate point along a connection.",
          "$ref": "#/definitions/LayerProtocolRO"
        },
        "trafficProfiles": {
          "type": "array",
          "description": "Traffic profile characteristics used to data-drive provisioning workflows.",
          "items": {
            "$ref": "#/definitions/TrafficProfileRO"
          }
        },
        "serviceLabel": {
          "type": "string",
          "description": "The service-identifiying label"
        },
        "boundaries": {
          "type": "array",
          "description": "Array of strings to track boundaries of Layer Termination",
          "items": {
            "type": "string"
          }
        },
        "ttiPackage": {
          "description": "This package stores Tti information.",
          "$ref": "#/definitions/TtiPackageRO"
        },
        "controlPlanePackage": {
          "description": "The northbound model of Control Plane Package.",
          "$ref": "#/definitions/ControlPlanePackageRO"
        },
        "resiliencyTopologyPackage": {
          "description": "This package stores resiliency topology information.",
          "$ref": "#/definitions/ResiliencyTopologyPackageRO"
        },
        "adminWt": {
          "type": "number",
          "format": "double",
          "description": "Administrative weight which specifies the level of importance given to the OSRP link"
        },
        "bundleIds": {
          "type": "array",
          "description": "List of up to 20 protection bundles to which the OSRP link belongs",
          "items": {
            "type": "string"
          }
        },
        "latency": {
          "type": "number",
          "format": "double",
          "description": "Indicates the delay in microseconds."
        },
        "bgpPackage": {
          "description": "This package stores BGP information.",
          "$ref": "#/definitions/BgpPackageRO"
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "txInfo": {
          "description": "TxInfo",
          "$ref": "#/definitions/TxInfoRO"
        },
        "ipInterfacePackage": {
          "description": "To report IP settings on the interface",
          "$ref": "#/definitions/IpInterfacePackageRO"
        }
      }
    },
    "LayeredAttributeRO": {
      "type": "object",
      "properties": {
        "layer": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "loopbackPackage": {
          "description": "This package stores loopback information",
          "$ref": "#/definitions/LoopbackPackageRO"
        },
        "itsPackage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItsPackageRO"
          }
        }
      }
    },
    "LifeCycleRuleRO": {
      "type": "object",
      "properties": {
        "autoCreatedByNetwork": {
          "type": "boolean",
          "description": "Indicates if the entity is auto created by the network and/or device (true) or must it explicitly be created (false).",
          "default": false
        },
        "autoDeletedByNetwork": {
          "type": "boolean",
          "description": "Indicates if the entity is auto deleted by the network and/or device (true) or must it explicitly be created (false).",
          "default": false
        }
      }
    },
    "LinkAttributesRO": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Reference to 3rd Party Network involved in this topology, can be re-used for other purposes in future.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Short description of the topology to be created."
        },
        "userLabel": {
          "type": "string",
          "description": "The user label (not necessarily unique) of the topology to be created."
        },
        "note": {
          "$ref": "#/definitions/NoteRO"
        }
      }
    },
    "LinksRO": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "A `self` member, whose value is a URL for the relationship itself (a \"relationship URL\"). This URL allows the client to directly manipulate the relationship. For example, it would allow a client to remove an `author` from an `article` without deleting the people resource itself."
        },
        "first": {
          "type": "string",
          "format": "uri",
          "description": "The first page of data"
        },
        "last": {
          "type": "string",
          "format": "uri",
          "description": "The last page of data"
        },
        "prev": {
          "type": "string",
          "format": "uri",
          "description": "The previous page of data"
        },
        "next": {
          "type": "string",
          "format": "uri",
          "description": "The next page of data"
        },
        "current": {
          "type": "string",
          "format": "uri",
          "description": "The current page of data"
        }
      }
    },
    "LocationIndexesRO": {
      "type": "object"
    },
    "LocationRO": {
      "type": "object",
      "properties": {
        "managementType": {
          "type": "string",
          "description": "Management protocol type",
          "enum": ["tl1", "saos", "netconf", "rest", "corba", "submarineConf"]
        },
        "fic": {
          "type": "string",
          "description": "Frame identification code"
        },
        "baynum": {
          "type": "string",
          "description": "Bay number"
        },
        "sncId": {
          "type": "string",
          "description": "Snc id number"
        },
        "rack": {
          "type": "string"
        },
        "shelf": {
          "type": "string"
        },
        "subshelf": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "subslot": {
          "type": "string"
        },
        "subsubslot": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "subport": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "logicalPortName": {
          "type": "string"
        },
        "logicalId": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "wavelength": {
          "type": "string"
        },
        "index": {
          "type": "string"
        },
        "odu2_index": {
          "type": "string"
        },
        "odu4_index": {
          "type": "string"
        },
        "oduCn_index": {
          "type": "string"
        },
        "eth_index": {
          "type": "string"
        },
        "vlan": {
          "type": "string",
          "description": "The VLAN ID of the CTP entity"
        },
        "vce": {
          "type": "string",
          "description": "The VS name of the CTP entity"
        },
        "eqptGrp": {
          "type": "string",
          "description": "The group ID obtained from RTRV-EQPTGRP for the SAOS card on which the entity resides"
        },
        "peerAs": {
          "type": "integer",
          "format": "int64",
          "description": "Autonomous System number of the BGP peer"
        },
        "peerIp": {
          "type": "string",
          "description": "Address of the BGP peer"
        },
        "frequency": {
          "type": "string",
          "description": "The frequency of the channel"
        },
        "mcId": {
          "type": "string",
          "description": "The identifier of the media channel"
        },
        "pseudoWireId": {
          "type": "string",
          "description": "DEPRECATED The identifier of Pseudo-Wire CTP"
        },
        "pseudoWireName": {
          "type": "string",
          "description": "The name of the Pseudo-Wire on the CTP"
        },
        "interfaceName": {
          "type": "string",
          "description": "Interface name of the IP FTP"
        },
        "interfaceIp": {
          "type": "string",
          "description": "DEPRECATED The IP address of MPLS interface"
        },
        "primaryLspName": {
          "type": "string",
          "description": "The primary MPLS tunnel name"
        },
        "tunnelRole": {
          "type": "string",
          "description": "MPLS tunnel role",
          "enum": ["headEnd", "tailEnd", "transit"]
        },
        "lspName": {
          "type": "string",
          "description": "MPLS tunnel name"
        },
        "protectionRole": {
          "type": "string",
          "description": "Protection role",
          "enum": ["primary", "backup"]
        },
        "mplsLabel": {
          "type": "string",
          "description": "MPLS tunnel forward/reverse in/out label"
        },
        "lagName": {
          "type": "string",
          "description": "Name of the LAG"
        },
        "mgmtMcId": {
          "type": "string",
          "description": "TBD"
        },
        "nmcId": {
          "type": "string",
          "description": "OSTi CTP for the SNC"
        },
        "mgmtNmcId": {
          "type": "string",
          "description": "TBD"
        },
        "neName": {
          "type": "string",
          "description": "Name of the networkConstruct. For example, the OSRP node name in controlPlane."
        },
        "locationIndex": {
          "type": "array",
          "description": "List of location indexes",
          "items": {
            "$ref": "#/definitions/LocationIndexesRO"
          }
        },
        "srcIp": {
          "type": "string",
          "description": "Source IP of the node"
        },
        "leg": {
          "type": "string",
          "description": "Branching Unit (BU) leg e.g. Trunk, A1 or A2",
          "enum": ["trunk", "a1", "a2"]
        },
        "fiberPairTermination": {
          "type": "string",
          "description": "The terminating fiber pair id within a Branching Unit (BU)"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the traffic flow e.g. Tx or Rx",
          "enum": ["tx", "rx"]
        },
        "iclName": {
          "type": "string",
          "description": "Name of the ICL"
        },
        "virtualRingName": {
          "type": "string",
          "description": "Name of the virtual ring"
        },
        "ringId": {
          "type": "string",
          "description": "ID of the ring"
        },
        "rapsVid": {
          "type": "string",
          "description": "R-APS VID"
        }
      }
    },
    "LoopbackPackageRO": {
      "type": "object",
      "properties": {
        "loopbackStatus": {
          "type": "string",
          "description": "Status of the test; taken directly from the value of the TL1 LPBKSTATUS field."
        },
        "loopbackWavelength": {
          "type": "string",
          "description": "Wavelength of the loopback test; taken directly from the value of the TL1 LPBKWVL field"
        }
      }
    },
    "MapperRuleRO": {
      "type": "object",
      "properties": {
        "groupedTribSlots": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "tribSlots": {
          "type": "array",
          "description": "Mapped tributary slots corresponding to tributary port",
          "items": {
            "type": "string"
          }
        },
        "tribPort": {
          "type": "string",
          "description": "Tributary port"
        }
      }
    },
    "MappingInteractionRuleRO": {
      "type": "object",
      "properties": {
        "segmentBoundaryRule": {
          "type": "string",
          "description": "The default is mustNotOverlap.",
          "enum": ["mustNotOverlap"]
        }
      }
    },
    "MappingTableEntryRO": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": "The directionality defined in terms of RX/TX.",
          "enum": ["RX", "TX", "RXTX"]
        },
        "label": {
          "type": "string",
          "description": "The user label."
        },
        "cos": {
          "type": "string",
          "description": "The class of service."
        },
        "ip": {
          "type": "string",
          "description": "The ip address."
        }
      }
    },
    "MbbHistoryEntryRO": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Start time of the make-before-break happened"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the make-before-break happened"
        },
        "result": {
          "type": "string",
          "description": "Result of the make-before-break"
        },
        "reason": {
          "type": "string",
          "description": "Reason of the make-before-break"
        }
      }
    },
    "MepEntryRO": {
      "type": "object",
      "properties": {
        "mepId": {
          "type": "string",
          "description": "The ID of the MEP"
        },
        "ccmTransmitState": {
          "type": "string",
          "description": "The transmission state of CCM (on/off)",
          "enum": ["ON", "OFF"]
        },
        "mepAdminState": {
          "type": "string",
          "description": "The administrative state (enabled/disabled) of the MEP",
          "enum": ["ENABLED", "DISABLED"]
        },
        "mepType": {
          "type": "string",
          "description": "The type of the MEP, up or down",
          "enum": ["UP", "DOWN"]
        },
        "mepMacAddress": {
          "type": "string",
          "description": "The MAC address of the MEP"
        },
        "ccmPriority": {
          "type": "string",
          "description": "Priority of the CC messages (0-7)"
        },
        "vlanId": {
          "type": "string",
          "description": "The VLAN ID of the MEP"
        },
        "lmm": {
          "description": "Holds Y.1731 attributes for one measurement type of a MEP",
          "$ref": "#/definitions/Y1731AttributesRO"
        },
        "dmm": {
          "description": "Holds Y.1731 attributes for one measurement type of a MEP",
          "$ref": "#/definitions/Y1731AttributesRO"
        },
        "slm": {
          "description": "Holds Y.1731 attributes for one measurement type of a MEP",
          "$ref": "#/definitions/Y1731AttributesRO"
        },
        "remoteMepId": {
          "type": "string",
          "description": "The ID of the remote MEP"
        },
        "maName": {
          "type": "string",
          "description": "Holds maintenance association name"
        },
        "ccmInterval": {
          "type": "string",
          "description": "The interval between CCM transmissions to be used by all MEPs in the MA"
        }
      }
    },
    "MetaDataRO": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of entities in the data"
        },
        "absoluteTotal": {
          "type": "integer",
          "format": "int64",
          "description": "The unfiltered total number of entities in the data"
        },
        "aggregations": {
          "type": "array",
          "description": "The aggregated data based on a requested aggregation name and criteria",
          "items": {
            "$ref": "#/definitions/AggregationRO"
          }
        },
        "missingReferences": {
          "type": "boolean",
          "description": "boolean detailing if the GET FRE tree has any missing references",
          "default": false
        },
        "missingReferenceIds": {
          "type": "array",
          "description": "The list of missing resource IDs",
          "items": {
            "$ref": "#/definitions/RelationshipDataRO"
          }
        },
        "filtered": {
          "type": "boolean",
          "description": "Flags whether the current object is filtered using `fields` query param or not",
          "default": false
        }
      }
    },
    "MplsFbProtectedTunnelRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the tunnel protected by this FB tunnel"
        },
        "srcIp": {
          "type": "string",
          "description": "Source IP address of the tunnel protected by this FB tunnel"
        },
        "destIp": {
          "type": "string",
          "description": "Destination IP address of the tunnel protected by this FB tunnel"
        },
        "role": {
          "type": "string",
          "description": "The role at this point of the MPLS tunnel protected by this FB tunnel",
          "enum": ["ingress", "transit"]
        }
      }
    },
    "MplsFbRO": {
      "type": "object",
      "properties": {
        "frrAutoCreated": {
          "type": "boolean",
          "description": "The flag indicating whether the FB tunnel is auto created by FRR",
          "default": false
        },
        "protectedInterface": {
          "type": "string",
          "description": "Name of the interface being protected by the FB tunnel"
        },
        "excludeIp": {
          "type": "string",
          "description": "IP address excluded from the FB tunnel path"
        },
        "protectedTunnels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MplsFbProtectedTunnelRO"
          }
        }
      }
    },
    "MplsFrrLocalProtectionRO": {
      "type": "object",
      "properties": {
        "protectionAvailable": {
          "type": "boolean",
          "description": "True when the protection is available on this endpoint",
          "default": false
        },
        "protectionInUse": {
          "type": "boolean",
          "description": "True when the protection is in use on this endpoint",
          "default": false
        },
        "protectionFbName": {
          "type": "string",
          "description": "Protection FB tunnel name"
        }
      }
    },
    "MplsFrrProtectionRouteHopRO": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "description": "IP interface address or node loopback IP address of the current hop"
        },
        "protectionType": {
          "type": "string",
          "description": "The FB protection type on this hop for this unidirectional tunnel",
          "enum": ["none", "link_protect", "node_protect"]
        },
        "protectionInUse": {
          "type": "boolean",
          "description": "True when the protection is in use on this endpoint",
          "default": false
        },
        "bwProtected": {
          "type": "boolean",
          "description": "True when the bandwidth is protected on this endpoint",
          "default": false
        }
      }
    },
    "MplsFrrRO": {
      "type": "object",
      "properties": {
        "frrProtected": {
          "type": "boolean",
          "description": "If true, the tunnel is protected by fast re-route (FRR) on the headend TX MPLS CTP",
          "default": false
        },
        "profileName": {
          "type": "string",
          "description": "The FRR profile name on the headend TX MPLS CTP"
        },
        "localProtection": {
          "description": "Holds MPLS FRR local protection attributes for TX MPLS CTP",
          "$ref": "#/definitions/MplsFrrLocalProtectionRO"
        },
        "actualProtectionRoute": {
          "type": "array",
          "description": "Actual FRR protection route on the headend TX MPLS CTP",
          "items": {
            "$ref": "#/definitions/MplsFrrProtectionRouteHopRO"
          }
        }
      }
    },
    "MplsPackageRO": {
      "type": "object",
      "properties": {
        "lspName": {
          "type": "string",
          "description": "The name of this MPLS tunnel"
        },
        "lspId": {
          "type": "string",
          "description": "The numeric ID of this MPLS tunnel"
        },
        "coRouted": {
          "type": "boolean",
          "description": "If true, this MPLS tunnel is co-routed; otherwise it is associated",
          "default": false
        },
        "signaled": {
          "type": "boolean",
          "description": "If true, this MPLS tunnel is dynamic; otherwise it is static",
          "default": false
        },
        "subType": {
          "type": "string",
          "description": "TP refers to Transport Profile; TE refers to Traffic Engineering",
          "enum": ["TP", "TE"]
        },
        "direction": {
          "type": "string",
          "description": "Tunnel direction. Use value bidirectional or unidirectional only and TPE attribute stackDirection since ingress and egress are ambiguous",
          "enum": ["bidirectional", "ingress", "egress", "unidirectional"]
        },
        "tunnelType": {
          "type": "string",
          "description": "Tunnel type (static/dynamic, ingress/egress, corouted/unidrectional)",
          "enum": [
            "rsvp_ingress_corout",
            "rsvp_egress_corout",
            "rsvp_transit_corout",
            "static_ingress_corout",
            "static_egress_corout",
            "static_transit_corout",
            "static_ingress_unidir",
            "static_egress_unidir",
            "static_transit_unidir",
            "rsvp_ingress_unidir",
            "rsvp_transit_unidir",
            "static_ingress_assoc",
            "rsvp_ingress",
            "rsvp_transit",
            "rsvp_egress"
          ]
        },
        "ctrlPlaneId": {
          "type": "string",
          "description": "A generated value to uniquely identify a particular tunnel instance"
        },
        "srcIp": {
          "type": "string",
          "description": "The IP-data interface address of the near end of this MPLS tunnel"
        },
        "srcTunnelId": {
          "type": "string",
          "description": "The ID of the near end of this MPLS tunnel"
        },
        "destIp": {
          "type": "string",
          "description": "The IP-data interface address of the far end of this MPLS tunnel"
        },
        "destTunnelId": {
          "type": "string",
          "description": "The ID of the far end of this MPLS tunnel"
        },
        "fwdIn": {
          "type": "string",
          "description": "The inward ID in the forward direction (transit)"
        },
        "fwdOut": {
          "type": "string",
          "description": "The outward ID in the forward direction (transit)"
        },
        "revIn": {
          "type": "string",
          "description": "The inward ID in the reverse direction (transit)"
        },
        "revOut": {
          "type": "string",
          "description": "The outward ID in the reverse direction (transit)"
        },
        "prevHopIp": {
          "type": "string",
          "description": "The interface address (on 6200, MAC address) of the previous hop of this MPLS tunnel"
        },
        "nextHopIp": {
          "type": "string",
          "description": "The interface address (on 6200, MAC address) of the next hop of this MPLS tunnel"
        },
        "prevHopIfNum": {
          "type": "string",
          "description": "The interface number of the previous hop of this MPLS tunnel"
        },
        "nextHopIfNum": {
          "type": "string",
          "description": "The interface number of the next hop of this MPLS tunnel"
        },
        "localIfNamePrevHop": {
          "type": "string",
          "description": "The local interface name of the previous hop of this MPLS tunnel (6200 only)"
        },
        "localIfNameNextHop": {
          "type": "string",
          "description": "The local interface name of the next hop of this MPLS tunnel (6200 only)"
        },
        "RxTag": {
          "type": "string",
          "description": "The label used for traffic ingressing to this endpoint"
        },
        "TxTag": {
          "type": "string",
          "description": "The label used for traffic egressing from this endpoint"
        },
        "tunnelRole": {
          "type": "string",
          "description": "The role at this point in the MPLS tunnel",
          "enum": ["headEnd", "tailEnd", "transit"]
        },
        "bw": {
          "description": "Holds bandwidth attributes for a dynamic tunnel endpoint or an IP interface",
          "$ref": "#/definitions/BwRO"
        },
        "autoBackup": {
          "type": "string",
          "description": "A flag to signal if auto-backup tunnel creation is on or off",
          "enum": ["on", "off"]
        },
        "diversityResource": {
          "type": "string",
          "description": "The object upon which to base diversity for the backup tunnel",
          "enum": [
            "unknown",
            "none",
            "link",
            "srlg",
            "node",
            "srlg_and_node",
            "srlg_and_link",
            "link_and_node",
            "srlg_or_node",
            "srlg_and_link_and_node"
          ]
        },
        "diversityLevel": {
          "type": "string",
          "description": "The diversity level of backup tunnel creation (maximal meaning best-effort)",
          "enum": ["strict", "maximal"]
        },
        "explicitRouteObject": {
          "type": "array",
          "description": "An ordered list of hop-by-hop IP-data interface addresses traversed by this dynamic MPLS tunnel",
          "items": {
            "type": "string"
          }
        },
        "bfd": {
          "description": "Holds BFD attributes for one LER TPE endpoint",
          "$ref": "#/definitions/BfdRO"
        },
        "aisProfileName": {
          "type": "string",
          "description": "The name of the Alarm Indication Signal profile for this MPLS tunnel"
        },
        "aisSessionAdminState": {
          "type": "string",
          "description": "The administrative state of the AIS session for this MPLS tunnel",
          "enum": ["up", "down"]
        },
        "aisRefreshTimer": {
          "type": "integer",
          "format": "int32",
          "description": "The interval between each AIS refresh for this MPLS tunnel"
        },
        "aisRefreshTimerUnit": {
          "type": "string",
          "description": "The units for aisRefreshTimer field"
        },
        "frrSignaling": {
          "type": "string",
          "description": "Deprecated by frr package and will be removed later. Flag for fast re-route capability",
          "enum": ["on", "off"]
        },
        "frrProfile": {
          "type": "string",
          "description": "Deprecated by frr package and will be removed later. The fast re-route profile for this MPLS tunnel",
          "enum": ["none", "link_protect", "node_protect"]
        },
        "explicitTunnel": {
          "description": "Holds data for the explicit tunnel path",
          "$ref": "#/definitions/TunnelPathRO"
        },
        "fixedTtl": {
          "type": "string",
          "description": "The time-to-live for tunnel hops (1-255)"
        },
        "setupPriority": {
          "type": "string",
          "description": "The priority of the dynamic tunnel setup (0-7)"
        },
        "holdPriority": {
          "type": "string",
          "description": "The priority of the dynamic tunnel steady-state (0-7)"
        },
        "optimization": {
          "type": "string",
          "description": "A flag indicating if tunnel optimization should be attempted by the control-plane",
          "enum": ["on", "off"]
        },
        "optimizationInterval": {
          "type": "integer",
          "format": "int32",
          "description": "The interval between tunnel optimization attempts"
        },
        "optimizationIntervalUnit": {
          "type": "string",
          "description": "The unit for optimizationInterval"
        },
        "srlg": {
          "type": "array",
          "description": "A list of shared-risk link-group values assigned to this interface",
          "items": {
            "type": "string"
          }
        },
        "colorGroup": {
          "description": "The color group for a dynamic tunnel endpoint",
          "$ref": "#/definitions/ColorGroupRO"
        },
        "includeAny": {
          "description": "The color group for a dynamic tunnel endpoint",
          "$ref": "#/definitions/ColorGroupRO"
        },
        "includeAll": {
          "description": "The color group for a dynamic tunnel endpoint",
          "$ref": "#/definitions/ColorGroupRO"
        },
        "excludeAny": {
          "description": "The color group for a dynamic tunnel endpoint",
          "$ref": "#/definitions/ColorGroupRO"
        },
        "facilityBypass": {
          "type": "boolean",
          "description": "If true, this MPLS tunnel is facility-bypass (FB) tunnel",
          "default": false
        },
        "softPreemption": {
          "type": "string",
          "description": "If true, soft preemption is enabled. Applicable to dynamic TE unidirectional tunnels only.",
          "enum": ["enable", "disable"]
        },
        "stickyLsp": {
          "type": "string",
          "description": "A flag indicating a dynamic tunnel stays on the same path after change in required resources. Applicable to dynamic coRouted tunnels only.",
          "enum": ["on", "off"]
        },
        "mbbHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MbbHistoryEntryRO"
          }
        },
        "frr": {
          "description": "MPLS FRR details attributes",
          "$ref": "#/definitions/MplsFrrRO"
        },
        "fb": {
          "description": "MPLS FB tunnel attributes",
          "$ref": "#/definitions/MplsFbRO"
        },
        "shareSrlg": {
          "type": "array",
          "description": "A list of share SRLG values used by dynamic tunnel during provisioning.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MsgsLastErrorRO": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "Error code for last error"
        },
        "errorSubCode": {
          "type": "string",
          "description": "Sub error code for last error"
        }
      }
    },
    "NameToCapacityMappingRulesRO": {
      "type": "object",
      "properties": {
        "namingUnit": {
          "type": "string",
          "description": "Unit of namespace."
        },
        "capacityUnit": {
          "type": "string",
          "description": "Unit of the capacity."
        },
        "relationType": {
          "type": "string",
          "description": "Relation type",
          "enum": ["ONE_TO_ONE", "ONE_TO_MANY"]
        },
        "mapping": {
          "type": "string",
          "description": "Identifies namespace to capacity mapping.",
          "enum": ["FIXED", "FLEXIBLE", "FLEXIBLE_GROUPED", "ALL"]
        },
        "noOfUnits": {
          "type": "integer",
          "format": "int32",
          "description": "Number 1-80 in switching and broadband case"
        },
        "mapperRule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MapperRuleRO"
          }
        }
      }
    },
    "NamingRulesRO": {
      "type": "object",
      "properties": {
        "total": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "used": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "potentialGrowth": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        }
      }
    },
    "NoteRO": {
      "type": "object",
      "properties": {
        "noteMsg": {
          "type": "string",
          "description": "The message left on the note left by the user"
        },
        "lastUpdatedBy": {
          "type": "string",
          "description": "The name of the user that last edited the note"
        },
        "lastUpdatedTime": {
          "type": "string",
          "description": "The time the note was last updated"
        }
      }
    },
    "OneToManyRelationshipRO": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "The one-to-many relationship",
          "items": {
            "$ref": "#/definitions/RelationshipDataRO"
          }
        },
        "meta": {
          "description": "The relationship type and identifier",
          "$ref": "#/definitions/RelationshipMetaDataRO"
        }
      }
    },
    "OneToOneRelationshipRO": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The relationship type and identifier",
          "$ref": "#/definitions/RelationshipDataRO"
        },
        "meta": {
          "description": "The relationship type and identifier",
          "$ref": "#/definitions/RelationshipMetaDataRO"
        }
      }
    },
    "PhotonicSpectrumPackageRO": {
      "type": "object",
      "properties": {
        "minFreqDeadBand": {
          "type": "string",
          "description": "Lower dead band in GHz. The dead band will be in format of 'xxxx.xxx'."
        },
        "maxFreqDeadBand": {
          "type": "string",
          "description": "Upper dead band in GHz. The dead band will be in format of 'xxxx.xxx'."
        },
        "targetMinFreq": {
          "type": "string",
          "description": "Allows the automatic adjustment of the MINFREQ when any associated NMCTP are deleted. Default is MINFREQ (no target lower frequency)."
        },
        "targetMaxFreq": {
          "type": "string",
          "description": "Allows the automatic adjustment of the MAXFREQ when any associated NMCTP are deleted. Default is MAXFREQ (no target upper frequency)."
        },
        "minFreqGuardBand": {
          "type": "string",
          "description": "Indicates the minimum required frequency spacing for the previous NMC."
        },
        "maxFreqGuardBand": {
          "type": "string",
          "description": "Indicates the minimum required frequency spacing for the next NMC."
        },
        "freqResolution": {
          "type": "string",
          "description": "Indicates the recurring frequency step that is allowed to be configured on the transponder."
        },
        "signalBandWidth10DB": {
          "type": "string",
          "description": "Captures Tx Signal Bandwidth in GHz measured at 10 dBm less than peak power."
        },
        "signalBandWidth3DB": {
          "type": "string",
          "description": "Captures Tx Signal Bandwidth in GHz measured at 3 dBm less than peak power."
        },
        "frequency": {
          "type": "string",
          "description": "The central signal frequency."
        },
        "minFreq": {
          "type": "string",
          "description": "The minimum signal frequency."
        },
        "maxFreq": {
          "type": "string",
          "description": "The maximum signal frequency."
        },
        "wavelength": {
          "type": "string",
          "description": "The central signal wavelength."
        },
        "wavelengthGrid ": {
          "type": "string",
          "description": "A hexadecimal number representing the vector of wavelengths that can be used by this SNC. Each bit set within the number indicates which wavelength is currently configured"
        }
      }
    },
    "PowerPackageRO": {
      "type": "object",
      "properties": {
        "txActualPower": {
          "type": "string",
          "description": "Current transmitter power (dBm)."
        },
        "txMaxPower": {
          "type": "string",
          "description": "Maximum transmitter power level (dBm)."
        },
        "txMinPower": {
          "type": "string",
          "description": "Minimum transmitter power level (dBm)."
        },
        "rxActualPower": {
          "type": "string",
          "description": "Current receiver power (dBm)."
        },
        "rxMaxPower": {
          "type": "string",
          "description": "Maximum receiver power level (dBm)."
        },
        "rxMinPower": {
          "type": "string",
          "description": "Minimum receiver power level (dBm)."
        }
      }
    },
    "ProvisioningAttributesRO": {
      "type": "object"
    },
    "RegenIdPackageRO": {
      "type": "object",
      "properties": {
        "regenTid": {
          "type": "string",
          "description": "This field is the Regen ID Tid"
        },
        "nearTransponder": {
          "type": "string",
          "description": "This field is near Transponder Shelf SLot Port."
        },
        "clientTransponder": {
          "type": "string",
          "description": "The Client Transponder Shelf SLot Port"
        },
        "mateInfo": {
          "type": "string",
          "description": "This field is Mate Info String."
        }
      }
    },
    "RelationshipDataRO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The relationship resource type"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the referenced resource."
        }
      }
    },
    "RelationshipMetaDataRO": {
      "type": "object",
      "properties": {
        "partiallyPopulated": {
          "type": "boolean",
          "description": "Flags whether the included relationship object is partially populated or not",
          "default": false
        }
      }
    },
    "ResiliencyHandlingEdgeRO": {
      "type": "object",
      "properties": {
        "switchTpeId": {
          "type": "string",
          "description": "The ID of the CTPs in the physical view"
        },
        "clientTpeId": {
          "type": "string",
          "description": "The ID of the client PTP connected to the switch"
        }
      }
    },
    "ResiliencyHandlingPackageRO": {
      "type": "object",
      "properties": {
        "layerRateStack": {
          "type": "array",
          "description": "ordered list of layerRates",
          "items": {
            "type": "string",
            "enum": [
              "ETHERNET",
              "OTU1",
              "OTU2",
              "OTU2e",
              "OTU3",
              "OTU4",
              "OTUCn",
              "OTSi",
              "OMS",
              "OS",
              "PHY",
              "OTS",
              "FICON",
              "FC",
              "ODU",
              "ODU0",
              "ODU1",
              "ODU2",
              "ODU2e",
              "ODU3",
              "ODU4",
              "ODUCn",
              "DSR",
              "DSR_10GE",
              "DSR_100GE",
              "DSR_ETHERNET",
              "ENCAPSULATION",
              "MPLS",
              "MPLS_PROTECTION",
              "MEDIA",
              "LAG",
              "RS",
              "E0",
              "E1",
              "E3",
              "E1_2M",
              "EC1",
              "DSR_2M",
              "LINE_OC3_STS3_AND_MS_STM1",
              "SECTION_OC3_STS3_AND_RS_STM1",
              "DSR_OC3_STM1",
              "DSR_OC12_STM4",
              "DSR_OC48_STM16",
              "DSR_OC192_STM64",
              "CES_IWF",
              "T1",
              "DSR_1_5M",
              "STS1",
              "STS3C",
              "STS12C",
              "STS24C",
              "STS48C",
              "DS0",
              "DS1",
              "DS3",
              "VT15",
              "VT2",
              "NOT_APPLICABLE",
              "ODUFLEX",
              "OTUg",
              "ODUg",
              "BGP",
              "G8032",
              "VC3",
              "VC4",
              "VC4_4C",
              "VC4_8C",
              "VC4_16C",
              "VC4_64C",
              "VC11",
              "VC12",
              "IP",
              "ES"
            ]
          }
        },
        "edges": {
          "type": "array",
          "description": "hold the pairs of ID of the CTPs from the physical view and its client PTP ID, for the eFRE endpoints.",
          "items": {
            "$ref": "#/definitions/ResiliencyHandlingEdgeRO"
          }
        },
        "commonEdgeTpeId": {
          "type": "string",
          "description": "the ID of the common CTP in the physical view"
        },
        "direction": {
          "type": "string",
          "description": "the direction of the resiliency service",
          "enum": ["Tx", "Rx"]
        }
      }
    },
    "ResiliencyTopologyPackageRO": {
      "type": "object",
      "properties": {
        "switchTpeId": {
          "type": "string",
          "description": "Switch port client TPE"
        },
        "resilientFreId": {
          "type": "string",
          "description": "Resilient nodal fre id"
        }
      }
    },
    "ResourceMetaDataRO": {
      "type": "object",
      "properties": {
        "partiallyPopulated": {
          "type": "boolean",
          "description": "Flags whether the current object is partially populated or not",
          "default": false
        }
      }
    },
    "RouteConstraintsRO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The route type i.e. photonic. In the future, other types may be supported.",
          "enum": ["photonic"]
        },
        "numberOfRoutes": {
          "type": "string",
          "description": "Number of routes defined by the configuration. For example, a PRIME/MEMBER configuration.  Could be a number, or could be a number evident from the model i.e. inverseMux. Generally, should only be specified if the configuration implies more than 1 route."
        },
        "sizeOfEachRoute": {
          "type": "string",
          "description": "For each route, what is the required size of each route. For example, '200G' in the case of 400G WLAi OTR 2xOTSi."
        },
        "maxInCpGroup": {
          "type": "string",
          "description": "Maximum number of routes that can be present in a control plane group. Could be a number, or could be a number evident n the model i.e. inverseMux."
        },
        "routeCharacteristic": {
          "type": "string",
          "description": "If multiple routes need to be defined, what's the relationship between the routes.",
          "enum": ["coRouted", "maximumDiversity"]
        },
        "signalPattern": {
          "type": "string",
          "description": "If photonic route type, specifies the frequency or wavelength pattern to choose for the routes.",
          "enum": ["adjacent"]
        }
      }
    },
    "SignalIndexRO": {
      "type": "object",
      "properties": {
        "wavelength": {
          "type": "string",
          "description": "The signal wavelength (nm)."
        },
        "wavelengthMin": {
          "type": "string",
          "description": "The minimum signal wavelength."
        },
        "wavelengthMax": {
          "type": "string",
          "description": "The maximum signal wavelength."
        },
        "index": {
          "type": "string",
          "description": "The signal index. Indicates a time slot."
        },
        "odu2_index": {
          "type": "string",
          "description": "The odu2 index. Indicates a time slot or tributary port number."
        },
        "odu3_index": {
          "type": "string",
          "description": "The odu3 index. Indicates a time slot or tributary port number."
        },
        "odu4_index": {
          "type": "string",
          "description": "The odu4 index. Indicates a time slot or tributary port number."
        },
        "oduCn_index": {
          "type": "string",
          "description": "The oduCn index. Indicates a time slot or tributary port number."
        },
        "eth_index": {
          "type": "string",
          "description": "The eth index."
        },
        "indexes": {
          "description": "Map of index attributes to represent more than one indexes per LT. Plan is to remove above odu2_index, odu4_index & oduCn_index signal attributes in future and use this one",
          "$ref": "#/definitions/IndexesRO"
        },
        "channels": {
          "type": "array",
          "description": "Indicates the list of discrete channels utilized e.g. tributary slots on broadband cards. Plans are to utilize this generically for any list of discrete list of signals.",
          "items": {
            "type": "string"
          }
        },
        "ots_index": {
          "type": "string",
          "description": "The ots index. Indicates a time slot."
        },
        "phy_index": {
          "type": "string",
          "description": "The physical index. Indicates a time slot."
        },
        "mappingTable": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MappingTableEntryRO"
          }
        },
        "frequency": {
          "type": "string",
          "description": "The central signal frequency."
        },
        "minFreq": {
          "type": "string",
          "description": "The minimum signal frequency."
        },
        "maxFreq": {
          "type": "string",
          "description": "The maximum signal frequency."
        },
        "width": {
          "type": "string",
          "description": "The signal width."
        },
        "mgmtMcId": {
          "type": "string",
          "description": "The management identifier of the media channel"
        }
      }
    },
    "StitchingTriggersRO": {
      "type": "object",
      "properties": {
        "partitioningFreConcreteIds": {
          "type": "array",
          "description": "List of physical FRE IDs for which stitcher should add a concrete relationship to on the stitched FRE",
          "items": {
            "type": "string"
          }
        },
        "protectingFreConcreteIds": {
          "type": "array",
          "description": "List of physical FRE IDs for which stitcher should add a concrete relationship to on the stitched resiliency FRE, where there is an EncapsulatedResiliency with a protectionScheme defined.",
          "items": {
            "type": "string"
          }
        },
        "backpropagateTpeId": {
          "type": "string",
          "description": "Stitcher uses backpropagte TPE id while creating FRE in physical view"
        }
      }
    },
    "SyncScopeRO": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "The synchronization scope context"
        },
        "name": {
          "type": "array",
          "description": "The synchronization scope name",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TandemConnectionMonitoringRO": {
      "type": "object",
      "properties": {
        "nativeName": {
          "type": "string",
          "description": "The name of the TCM TPE that is native to the network element."
        },
        "userLabel": {
          "type": "string",
          "description": "The label given to the TCM TPE by an user"
        },
        "owner": {
          "type": "string",
          "description": "Identifies who created the TCM facility"
        },
        "suppTpeNativeName": {
          "type": "string",
          "description": "The supporting Termination Point"
        },
        "mode": {
          "type": "string",
          "description": "Identifies the mode of the TCM"
        },
        "state": {
          "type": "string",
          "description": "Primary State of TCM CTP"
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        }
      }
    },
    "TerminationRO": {
      "type": "object",
      "properties": {
        "connectionRulesInOwnLayer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionRuleRO"
          }
        }
      }
    },
    "TpeAttributesRO": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "State of the TPE.",
          "enum": ["IS", "OOS", "OOS_AUMA"]
        },
        "userData": {
          "description": "User data",
          "$ref": "#/definitions/UserDataRO"
        },
        "identifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierRO"
          }
        },
        "displayData": {
          "$ref": "#/definitions/TpeDisplayDataRO"
        },
        "resourceState": {
          "type": "string",
          "description": "Nsi Resource State.",
          "enum": [
            "root",
            "planned",
            "discovered",
            "plannedAndDiscovered",
            "unknown"
          ]
        },
        "bookingData": {
          "description": "Bandwidth booking data",
          "$ref": "#/definitions/BookingDataRO"
        },
        "policies": {
          "description": "Policies for attributes.",
          "$ref": "#/definitions/AttributePoliciesRO"
        },
        "structureType": {
          "type": "string",
          "enum": [
            "PTP",
            "FTP",
            "CTP_SERVER_TO_CLIENT",
            "CTP_CLIENT_TO_SERVER",
            "CTP_CLIENT_TO_CLIENT",
            "CTP_SERVER_TO_DOMAIN"
          ]
        },
        "structureSubType": {
          "type": "string",
          "enum": ["osrpLink", "osrpLine", "regen"]
        },
        "tpeSpec": {
          "type": "string",
          "description": "Name of TPESpec describing this TPE instance. FUTURE: enumerated value, part of TPESpec catalog."
        },
        "tpeGroupSpecs": {
          "type": "array",
          "description": "Names of TPEGSpec-s this TPE belongs to. FUTURE: enumerated value, part of TPEGSpec catalog.",
          "items": {
            "type": "string"
          }
        },
        "nativeName": {
          "type": "string",
          "description": "The name of the TPE that is native to the network element"
        },
        "userLabel": {
          "type": "string",
          "description": "The label given to the TPE by an user"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationRO"
          }
        },
        "layerTerminations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayerTerminationRO"
          }
        },
        "stackDirection": {
          "type": "string",
          "enum": [
            "client_to_server",
            "server_to_client",
            "bidirectional",
            "horizontal_unidirectional",
            "unknown"
          ]
        },
        "displayAlias": {
          "type": "string",
          "description": "The displayAlias of the TPE"
        },
        "dynamicFgiSpecificationRefList": {
          "type": "array",
          "description": "A list of dynamic Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "fgiSpecificationRefList": {
          "type": "array",
          "description": "A list of Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "availableCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "capacityReservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityReservationRO"
          }
        },
        "cardType": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["CHANNEL_TX", "CHANNEL_RX", "OTN_ACCESS"]
        },
        "roadmLine": {
          "type": "string"
        },
        "syncScopes": {
          "type": "array",
          "description": "The sync scope for the TPE",
          "items": {
            "$ref": "#/definitions/SyncScopeRO"
          }
        },
        "modelType": {
          "type": "string",
          "description": "The model type of network construct, TPE, FRE.",
          "enum": ["controlPlane", "regenService", "resiliency"]
        },
        "active": {
          "type": "boolean",
          "description": "An indicator to flag when a TPE is active, or simply a potential.",
          "default": false
        },
        "lifeCycleRules": {
          "description": "Indicates the life cycle rules for an entity.",
          "$ref": "#/definitions/LifeCycleRuleRO"
        },
        "lifeCycleOwner": {
          "type": "string",
          "description": "Specifies who owns the lifecycle of a TPE"
        },
        "provisioningAttributes": {
          "description": "Indicates attributes that are used solely in the provisioning workflow. These attributes would not be reported on discovery, but aid in the provisioning workflow.",
          "$ref": "#/definitions/ProvisioningAttributesRO"
        },
        "capabilitySpecification": {
          "description": "Defines a capability specification; normally for a TPE but can be utilized elsewhere in the future.",
          "$ref": "#/definitions/CapabilitySpecRO"
        },
        "cardMode": {
          "type": "string",
          "description": "Provides a means to differentiate different configurations of the card setup. For example, WLAi 400G OTR has several configuration options for 400G line service rate.",
          "enum": ["maxReach", "maxCapacity", "undetermined"]
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "resourcePartitionInfo": {
          "type": "array",
          "description": "It represents which partition the associated NE belongs to.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customerCode": {
          "type": "string",
          "description": "Customer code"
        },
        "owningServerTpeListType": {
          "type": "string",
          "description": "Owning server tpe list type.",
          "enum": ["uniDecomposed", "inverseMux", "none"]
        },
        "resiliencyHandlingPackage": {
          "type": "array",
          "description": " triggers stitcher building resiliency view and NSI updating layerRate in resiliency view",
          "items": {
            "$ref": "#/definitions/ResiliencyHandlingPackageRO"
          }
        },
        "resiliencyPackage": {
          "description": "The resiliency package contains attributes only appear in resiliency view.",
          "$ref": "#/definitions/TpeResiliencyPackageRO"
        },
        "parentEBBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBFREBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as BW constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "parentEBFREBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as FRE constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "stitchingTriggers": {
          "$ref": "#/definitions/StitchingTriggersRO"
        },
        "plannedEndpointRole": {
          "type": "string",
          "description": "The role that this end point plays for multicast FRE.",
          "enum": ["drop", "source"]
        },
        "gneSubnetName": {
          "type": "string",
          "description": "The GNE Subnet Name of the TPE"
        },
        "displayRate": {
          "type": "string",
          "description": "DisplayRate of TPE, for instance BITRATE of ODUTTP in case of ODUFLEX/ETHFLEX rate TPE"
        },
        "referencedByAssociations": {
          "type": "array",
          "description": "A list of associations of fres that would refer to this tpe",
          "items": {
            "$ref": "#/definitions/AssociationRO"
          }
        }
      }
    },
    "TpeCfmPackageRO": {
      "type": "object",
      "properties": {
        "cfmServiceName": {
          "type": "string",
          "description": "The name of the CFM service"
        },
        "mep": {
          "type": "array",
          "description": "Each entry holds information about one Maintenance Endpoint configured on this TPE",
          "items": {
            "$ref": "#/definitions/MepEntryRO"
          }
        }
      }
    },
    "TpeDataRO": {
      "type": "object",
      "properties": {
        "meta": {
          "description": "A metadata object that contains non-standard meta information",
          "$ref": "#/definitions/ResourceMetaDataRO"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the TPE resource"
        },
        "type": {
          "type": "string",
          "description": "The TPE resource type",
          "enum": ["tpes"]
        },
        "attributes": {
          "$ref": "#/definitions/TpeAttributesRO"
        },
        "relationships": {
          "$ref": "#/definitions/TpeRelationshipsRO"
        }
      }
    },
    "TpeDisplayDataRO": {
      "type": "object",
      "properties": {
        "displayNativeName": {
          "type": "string",
          "description": "The name of the TPE that we want UI to display if it is different than nativeName"
        }
      }
    },
    "TpeExpectationAttributesRO": {
      "type": "object",
      "properties": {
        "validateParameters": {
          "description": "Attribute containing the list of parameters (if any) to be validated against the expectation",
          "$ref": "#/definitions/ValidateParametersRO"
        },
        "startDate": {
          "type": "string",
          "description": "The scheduled start date and time of the expectation, with RFC 3339 date-time format"
        },
        "endDate": {
          "type": "string",
          "description": "The scheduled end date and time of the expectation, with RFC 3339 date-time format"
        },
        "structureType": {
          "type": "string",
          "enum": [
            "PTP",
            "FTP",
            "CTP_SERVER_TO_CLIENT",
            "CTP_CLIENT_TO_SERVER",
            "CTP_CLIENT_TO_CLIENT",
            "CTP_SERVER_TO_DOMAIN"
          ]
        },
        "structureSubType": {
          "type": "string",
          "enum": ["osrpLink", "osrpLine", "regen"]
        },
        "tpeSpec": {
          "type": "string",
          "description": "Name of TPESpec describing this TPE instance. FUTURE: enumerated value, part of TPESpec catalog."
        },
        "tpeGroupSpecs": {
          "type": "array",
          "description": "Names of TPEGSpec-s this TPE belongs to. FUTURE: enumerated value, part of TPEGSpec catalog.",
          "items": {
            "type": "string"
          }
        },
        "nativeName": {
          "type": "string",
          "description": "The name of the TPE that is native to the network element"
        },
        "userLabel": {
          "type": "string",
          "description": "The label given to the TPE by an user"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationRO"
          }
        },
        "layerTerminations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayerTerminationRO"
          }
        },
        "stackDirection": {
          "type": "string",
          "enum": [
            "client_to_server",
            "server_to_client",
            "bidirectional",
            "horizontal_unidirectional",
            "unknown"
          ]
        },
        "displayAlias": {
          "type": "string",
          "description": "The displayAlias of the TPE"
        },
        "dynamicFgiSpecificationRefList": {
          "type": "array",
          "description": "A list of dynamic Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "fgiSpecificationRefList": {
          "type": "array",
          "description": "A list of Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "availableCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "capacityReservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityReservationRO"
          }
        },
        "cardType": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["CHANNEL_TX", "CHANNEL_RX", "OTN_ACCESS"]
        },
        "roadmLine": {
          "type": "string"
        },
        "syncScopes": {
          "type": "array",
          "description": "The sync scope for the TPE",
          "items": {
            "$ref": "#/definitions/SyncScopeRO"
          }
        },
        "modelType": {
          "type": "string",
          "description": "The model type of network construct, TPE, FRE.",
          "enum": ["controlPlane", "regenService", "resiliency"]
        },
        "active": {
          "type": "boolean",
          "description": "An indicator to flag when a TPE is active, or simply a potential.",
          "default": false
        },
        "lifeCycleRules": {
          "description": "Indicates the life cycle rules for an entity.",
          "$ref": "#/definitions/LifeCycleRuleRO"
        },
        "lifeCycleOwner": {
          "type": "string",
          "description": "Specifies who owns the lifecycle of a TPE"
        },
        "provisioningAttributes": {
          "description": "Indicates attributes that are used solely in the provisioning workflow. These attributes would not be reported on discovery, but aid in the provisioning workflow.",
          "$ref": "#/definitions/ProvisioningAttributesRO"
        },
        "capabilitySpecification": {
          "description": "Defines a capability specification; normally for a TPE but can be utilized elsewhere in the future.",
          "$ref": "#/definitions/CapabilitySpecRO"
        },
        "cardMode": {
          "type": "string",
          "description": "Provides a means to differentiate different configurations of the card setup. For example, WLAi 400G OTR has several configuration options for 400G line service rate.",
          "enum": ["maxReach", "maxCapacity", "undetermined"]
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "resourcePartitionInfo": {
          "type": "array",
          "description": "It represents which partition the associated NE belongs to.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customerCode": {
          "type": "string",
          "description": "Customer code"
        },
        "owningServerTpeListType": {
          "type": "string",
          "description": "Owning server tpe list type.",
          "enum": ["uniDecomposed", "inverseMux", "none"]
        },
        "resiliencyHandlingPackage": {
          "type": "array",
          "description": " triggers stitcher building resiliency view and NSI updating layerRate in resiliency view",
          "items": {
            "$ref": "#/definitions/ResiliencyHandlingPackageRO"
          }
        },
        "resiliencyPackage": {
          "description": "The resiliency package contains attributes only appear in resiliency view.",
          "$ref": "#/definitions/TpeResiliencyPackageRO"
        },
        "parentEBBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBFREBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as BW constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "parentEBFREBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as FRE constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "stitchingTriggers": {
          "$ref": "#/definitions/StitchingTriggersRO"
        },
        "plannedEndpointRole": {
          "type": "string",
          "description": "The role that this end point plays for multicast FRE.",
          "enum": ["drop", "source"]
        },
        "gneSubnetName": {
          "type": "string",
          "description": "The GNE Subnet Name of the TPE"
        },
        "displayRate": {
          "type": "string",
          "description": "DisplayRate of TPE, for instance BITRATE of ODUTTP in case of ODUFLEX/ETHFLEX rate TPE"
        },
        "referencedByAssociations": {
          "type": "array",
          "description": "A list of associations of fres that would refer to this tpe",
          "items": {
            "$ref": "#/definitions/AssociationRO"
          }
        }
      }
    },
    "TpeExpectationDataRO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the tpe expectation"
        },
        "type": {
          "type": "string",
          "description": "The tpe expectation type",
          "enum": ["tpeExpectations"]
        },
        "attributes": {
          "description": "Expectation attributes to be kept by NSI.",
          "$ref": "#/definitions/TpeExpectationAttributesRO"
        },
        "relationships": {
          "$ref": "#/definitions/TpeExpectationRelationshipsRO"
        }
      }
    },
    "TpeExpectationListRO": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TpeExpectationDataRO"
          }
        }
      }
    },
    "TpeExpectationRO": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TpeExpectationDataRO"
        }
      }
    },
    "TpeExpectationRelationshipsRO": {
      "type": "object",
      "properties": {
        "serviceIntent": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "equipmentIntent": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "intent": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstruct": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstructAssociation": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "equipment": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningServerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "clientTpes": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningServerTpeList": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "ownedPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "partnerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningClientTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "concrete": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "controller": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "configurationAndSwitchControl": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        }
      }
    },
    "TpeListRO": {
      "type": "object",
      "properties": {
        "meta": {
          "description": "A metadata object that contains non-standard meta information",
          "$ref": "#/definitions/MetaDataRO"
        },
        "links": {
          "description": "Links related to the resource",
          "$ref": "#/definitions/LinksRO"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TpeDataRO"
          }
        },
        "included": {
          "type": "array",
          "description": "Referenced sub-resources",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "TpePlannedAttributesRO": {
      "type": "object",
      "properties": {
        "structureType": {
          "type": "string",
          "enum": [
            "PTP",
            "FTP",
            "CTP_SERVER_TO_CLIENT",
            "CTP_CLIENT_TO_SERVER",
            "CTP_CLIENT_TO_CLIENT",
            "CTP_SERVER_TO_DOMAIN"
          ]
        },
        "structureSubType": {
          "type": "string",
          "enum": ["osrpLink", "osrpLine", "regen"]
        },
        "tpeSpec": {
          "type": "string",
          "description": "Name of TPESpec describing this TPE instance. FUTURE: enumerated value, part of TPESpec catalog."
        },
        "tpeGroupSpecs": {
          "type": "array",
          "description": "Names of TPEGSpec-s this TPE belongs to. FUTURE: enumerated value, part of TPEGSpec catalog.",
          "items": {
            "type": "string"
          }
        },
        "nativeName": {
          "type": "string",
          "description": "The name of the TPE that is native to the network element"
        },
        "userLabel": {
          "type": "string",
          "description": "The label given to the TPE by an user"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationRO"
          }
        },
        "layerTerminations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayerTerminationRO"
          }
        },
        "stackDirection": {
          "type": "string",
          "enum": [
            "client_to_server",
            "server_to_client",
            "bidirectional",
            "horizontal_unidirectional",
            "unknown"
          ]
        },
        "displayAlias": {
          "type": "string",
          "description": "The displayAlias of the TPE"
        },
        "dynamicFgiSpecificationRefList": {
          "type": "array",
          "description": "A list of dynamic Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "fgiSpecificationRefList": {
          "type": "array",
          "description": "A list of Forwarding Group assignments.  Each assignment costs of the fGNane, FGVersion, and FGInstance.  E.g 'May_Comment:1.0.0:1234'",
          "items": {
            "type": "string"
          }
        },
        "totalCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "availableCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "usedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "plannedCapacity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityRO"
          }
        },
        "capacityReservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityReservationRO"
          }
        },
        "cardType": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["CHANNEL_TX", "CHANNEL_RX", "OTN_ACCESS"]
        },
        "roadmLine": {
          "type": "string"
        },
        "syncScopes": {
          "type": "array",
          "description": "The sync scope for the TPE",
          "items": {
            "$ref": "#/definitions/SyncScopeRO"
          }
        },
        "modelType": {
          "type": "string",
          "description": "The model type of network construct, TPE, FRE.",
          "enum": ["controlPlane", "regenService", "resiliency"]
        },
        "active": {
          "type": "boolean",
          "description": "An indicator to flag when a TPE is active, or simply a potential.",
          "default": false
        },
        "lifeCycleRules": {
          "description": "Indicates the life cycle rules for an entity.",
          "$ref": "#/definitions/LifeCycleRuleRO"
        },
        "lifeCycleOwner": {
          "type": "string",
          "description": "Specifies who owns the lifecycle of a TPE"
        },
        "provisioningAttributes": {
          "description": "Indicates attributes that are used solely in the provisioning workflow. These attributes would not be reported on discovery, but aid in the provisioning workflow.",
          "$ref": "#/definitions/ProvisioningAttributesRO"
        },
        "capabilitySpecification": {
          "description": "Defines a capability specification; normally for a TPE but can be utilized elsewhere in the future.",
          "$ref": "#/definitions/CapabilitySpecRO"
        },
        "cardMode": {
          "type": "string",
          "description": "Provides a means to differentiate different configurations of the card setup. For example, WLAi 400G OTR has several configuration options for 400G line service rate.",
          "enum": ["maxReach", "maxCapacity", "undetermined"]
        },
        "additionalAttributes": {
          "description": "Various miscellaneous attributes that do not necessarily belong in the parent resource. Attributes are populated dynamically and therefore cannot be documented here.",
          "$ref": "#/definitions/AdditionalAttributesRO"
        },
        "resourcePartitionInfo": {
          "type": "array",
          "description": "It represents which partition the associated NE belongs to.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customerCode": {
          "type": "string",
          "description": "Customer code"
        },
        "owningServerTpeListType": {
          "type": "string",
          "description": "Owning server tpe list type.",
          "enum": ["uniDecomposed", "inverseMux", "none"]
        },
        "resiliencyHandlingPackage": {
          "type": "array",
          "description": " triggers stitcher building resiliency view and NSI updating layerRate in resiliency view",
          "items": {
            "$ref": "#/definitions/ResiliencyHandlingPackageRO"
          }
        },
        "resiliencyPackage": {
          "description": "The resiliency package contains attributes only appear in resiliency view.",
          "$ref": "#/definitions/TpeResiliencyPackageRO"
        },
        "parentEBBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBFREBWConstraint": {
          "description": "Virtual TPe reference for constraints update",
          "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
        },
        "parentEBBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as BW constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "parentEBFREBWConstraintList": {
          "type": "array",
          "description": "A list of Virtual TPEs as FRE constraint.",
          "items": {
            "$ref": "#/definitions/VirtualTpeBWConstraintsRO"
          }
        },
        "stitchingTriggers": {
          "$ref": "#/definitions/StitchingTriggersRO"
        },
        "plannedEndpointRole": {
          "type": "string",
          "description": "The role that this end point plays for multicast FRE.",
          "enum": ["drop", "source"]
        },
        "gneSubnetName": {
          "type": "string",
          "description": "The GNE Subnet Name of the TPE"
        },
        "displayRate": {
          "type": "string",
          "description": "DisplayRate of TPE, for instance BITRATE of ODUTTP in case of ODUFLEX/ETHFLEX rate TPE"
        },
        "referencedByAssociations": {
          "type": "array",
          "description": "A list of associations of fres that would refer to this tpe",
          "items": {
            "$ref": "#/definitions/AssociationRO"
          }
        }
      }
    },
    "TpePlannedDataRO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the planned tpe"
        },
        "type": {
          "type": "string",
          "description": "The tpe planned type",
          "enum": ["tpePlanned"]
        },
        "attributes": {
          "description": "These attributes are set by REST API to be used to validate the expectation.",
          "$ref": "#/definitions/TpePlannedAttributesRO"
        },
        "relationships": {
          "$ref": "#/definitions/TpePlannedRelationshipsRO"
        }
      }
    },
    "TpePlannedRO": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TpePlannedDataRO"
        }
      }
    },
    "TpePlannedRelationshipsRO": {
      "type": "object",
      "properties": {
        "serviceIntent": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "equipmentIntent": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstruct": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstructAssociation": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "equipment": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningServerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "clientTpes": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningServerTpeList": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "ownedPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "partnerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningClientTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "concrete": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "controller": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "configurationAndSwitchControl": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        }
      }
    },
    "TpeRO": {
      "type": "object",
      "properties": {
        "meta": {
          "description": "A metadata object that contains non-standard meta information",
          "$ref": "#/definitions/MetaDataRO"
        },
        "data": {
          "$ref": "#/definitions/TpeDataRO"
        },
        "included": {
          "type": "array",
          "description": "Referenced sub-resources",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "TpeRelationshipsRO": {
      "type": "object",
      "properties": {
        "tpePlanned": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "tpeExpectations": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "tpeDiscovered": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstruct": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "networkConstructAssociation": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "equipment": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningServerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "clientTpes": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningServerTpeList": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "owningPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "ownedPeerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "partnerTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "owningClientTpe": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "concrete": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        },
        "controller": {
          "description": "The one-to-one relationship",
          "$ref": "#/definitions/OneToOneRelationshipRO"
        },
        "configurationAndSwitchControl": {
          "description": "The one-to-many relationship",
          "$ref": "#/definitions/OneToManyRelationshipRO"
        }
      }
    },
    "TpeResiliencyPackageRO": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "the role of the tpe",
          "enum": ["Protected", "Working", "Protecting"]
        },
        "resiliencyType": {
          "type": "string",
          "description": "resiliencyType",
          "enum": ["TPT", "OPS"]
        }
      }
    },
    "TrafficProfileParamRO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of attribute."
        },
        "value": {
          "type": "string",
          "description": "Value of attribute."
        },
        "selectFrom": {
          "type": "array",
          "description": "Alternate form of value attribute that permits a comma separated list of the choices available for selection.",
          "items": {
            "type": "string"
          }
        },
        "layerRate": {
          "type": "string",
          "description": "The transmission layer rate.",
          "enum": [
            "ETHERNET",
            "OTU1",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "OTUCn",
            "OTSi",
            "OMS",
            "OS",
            "PHY",
            "OTS",
            "FICON",
            "FC",
            "ODU",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "ODUCn",
            "DSR",
            "DSR_10GE",
            "DSR_100GE",
            "DSR_ETHERNET",
            "ENCAPSULATION",
            "MPLS",
            "MPLS_PROTECTION",
            "MEDIA",
            "LAG",
            "RS",
            "E0",
            "E1",
            "E3",
            "E1_2M",
            "EC1",
            "DSR_2M",
            "LINE_OC3_STS3_AND_MS_STM1",
            "SECTION_OC3_STS3_AND_RS_STM1",
            "DSR_OC3_STM1",
            "DSR_OC12_STM4",
            "DSR_OC48_STM16",
            "DSR_OC192_STM64",
            "CES_IWF",
            "T1",
            "DSR_1_5M",
            "STS1",
            "STS3C",
            "STS12C",
            "STS24C",
            "STS48C",
            "DS0",
            "DS1",
            "DS3",
            "VT15",
            "VT2",
            "NOT_APPLICABLE",
            "ODUFLEX",
            "OTUg",
            "ODUg",
            "BGP",
            "G8032",
            "VC3",
            "VC4",
            "VC4_4C",
            "VC4_8C",
            "VC4_16C",
            "VC4_64C",
            "VC11",
            "VC12",
            "IP",
            "ES"
          ]
        },
        "location": {
          "type": "string",
          "description": "If an input, where to find the attribute. If an output, where to set the attribute.",
          "enum": ["self", "intent", "farEnd", "immediateClientTpe"]
        }
      }
    },
    "TrafficProfileRO": {
      "type": "object",
      "properties": {
        "inputParams": {
          "type": "array",
          "description": "List of input parameters to be matched to derive the correct trafficProfile for the use-case.",
          "items": {
            "$ref": "#/definitions/TrafficProfileParamRO"
          }
        },
        "trafficParams": {
          "type": "array",
          "description": "List of traffic parameters that must be used as input in the use-case.",
          "items": {
            "$ref": "#/definitions/TrafficProfileParamRO"
          }
        },
        "routeConstraints": {
          "description": "Defines the traffic profile route characteristics used to data-drive provisioning workflows.",
          "$ref": "#/definitions/RouteConstraintsRO"
        },
        "outputs": {
          "type": "array",
          "description": "List of outputs that are expected in the use-case.",
          "items": {
            "$ref": "#/definitions/TrafficProfileParamRO"
          }
        }
      }
    },
    "TtiAttributeRO": {
      "type": "object",
      "properties": {
        "sapi": {
          "type": "string",
          "description": "String to hold 'sapi' attribute"
        },
        "dapi": {
          "type": "string",
          "description": "String to hold 'dapi' attribute"
        },
        "operator": {
          "type": "string",
          "description": "String to hold 'operator' attribute"
        }
      }
    },
    "TtiPackageRO": {
      "type": "object",
      "properties": {
        "ttiTx": {
          "description": "This package stores tti Attribute information.",
          "$ref": "#/definitions/TtiAttributeRO"
        },
        "ttiRx": {
          "description": "This package stores tti Attribute information.",
          "$ref": "#/definitions/TtiAttributeRO"
        },
        "ttiExpectedRx": {
          "description": "This package stores tti Attribute information.",
          "$ref": "#/definitions/TtiAttributeRO"
        },
        "traceFailedMode": {
          "type": "string",
          "enum": ["NULL", "ALARM", "ALARM_FAIL_LINE"]
        }
      }
    },
    "TunnelPathRO": {
      "type": "object",
      "properties": {
        "pathName": {
          "type": "string",
          "description": "The name of this explicit tunnel path"
        },
        "hops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HopEntryRO"
          }
        }
      }
    },
    "TxInfoRO": {
      "type": "object",
      "properties": {
        "dropPort": {
          "type": "string",
          "description": "dropPort Info"
        },
        "transMode": {
          "type": "string",
          "description": "transMode Info"
        },
        "frequency": {
          "type": "string",
          "description": "frequency Info"
        },
        "minDispersion": {
          "type": "string",
          "description": "minDispersion Info"
        },
        "maxDispersion": {
          "type": "string",
          "description": "maxDispersion Info"
        },
        "lowFrequencyGuardband": {
          "type": "string",
          "description": "lowFrequencyGuardband Info"
        },
        "highFrequencyGuardband": {
          "type": "string",
          "description": "highFrequencyGuardband Info"
        },
        "expectedRestorationTime": {
          "type": "string",
          "description": "expectedRestorationTime Info"
        },
        "linkOptimizationMode": {
          "type": "string",
          "description": "linkOptimizationMode Info"
        },
        "egressRegenPort": {
          "type": "string",
          "description": "egressRegenPort"
        }
      }
    },
    "UserDataRO": {
      "type": "object"
    },
    "ValidateParametersRO": {
      "type": "object",
      "properties": {
        "include": {
          "type": "string",
          "description": "The list of comma separated parameters (if any) to be validated against the expectation"
        }
      }
    },
    "VirtualTpeBWConstraintsRO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owningPoolAdapterType": {
          "type": "string"
        },
        "unitsToConsume": {
          "type": "string"
        },
        "adaptsToLayerRateQualifier": {
          "type": "string",
          "description": "Provides a means to provide additional qualification attributes for a Layer Rate. For example, for beyond 100G rates OTUCn and ODUCn, the value of n, where n is a multiple of 100. For example, for beyond 100G rates with sub rate potential (i.e. OTUCn-M), this includes the n-M options where n is the number of OxUC overhead instances and M is the number of 5G tributary slots. For example, OTUC4-60 implies 4 instances of OxUC overhead, and 300G capacity (5G x 60).",
          "enum": [
            "ODUC1",
            "ODUC2",
            "ODUC2_25",
            "ODUC2_30",
            "ODUC3",
            "ODUC4",
            "ODUC4_60",
            "ODUC4_70",
            "ODUC5",
            "ODUC5_90",
            "ODUC6",
            "ODUC6_110",
            "ODUC7",
            "ODUC8",
            "OTUC1",
            "OTUC2",
            "OTUC2_25",
            "OTUC2_30",
            "OTUC3",
            "OTUC3_50",
            "OTUC4",
            "OTUC4_60",
            "OTUC4_70",
            "OTUC5",
            "OTUC5_90",
            "OTUC6",
            "OTUC6_110",
            "OTUC7",
            "OTUC8",
            "OC3",
            "OC12",
            "OC48",
            "OC192",
            "OC768",
            "STM1",
            "STM4",
            "STM16",
            "STM64",
            "STM256",
            "ODU0",
            "ODU1",
            "ODU2",
            "ODU2e",
            "ODU3",
            "ODU4",
            "OTU2",
            "OTU2e",
            "OTU3",
            "OTU4",
            "_1GE",
            "_10GE",
            "_40GE",
            "_100GE",
            "_400GE",
            "_2G5",
            "_1G25",
            "_10G",
            "_40G",
            "_100G",
            "_150G",
            "_200G",
            "_250G",
            "_300G",
            "_350G",
            "_400G",
            "_450G",
            "_500G",
            "_550G",
            "_600G",
            "_700G",
            "_800G",
            "ETHFLEX",
            "FICON1G",
            "FICONEXPRESS2G",
            "FICON4G",
            "FICON8G",
            "FICON16G",
            "FC100",
            "FC200",
            "FC400",
            "FC800",
            "FC1200",
            "FC1600",
            "FC3200",
            "UNKNOWN"
          ]
        },
        "isFre": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Y1731AttributesRO": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True when the particular measurement is enabled",
          "default": false
        },
        "interval": {
          "type": "string",
          "description": "The interval between transmitting each message (e.g.: 1)"
        },
        "intervalUnit": {
          "type": "string",
          "description": "The unit of interval between transmitting each message (e.g.: seconds)"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the messages being transmitted (0-7)"
        },
        "frameSize": {
          "type": "string",
          "description": "The frame size of the messages being transmitted (numeric), if applicable to this measurement"
        },
        "repeatDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The repeat delay of the message being transmitted"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The count of the message being transmitted"
        },
        "iterate": {
          "type": "integer",
          "format": "int32",
          "description": "The iteration number of the message being transmitted"
        },
        "remoteMepId": {
          "type": "string",
          "description": "The ID of the remote MEP"
        },
        "remoteMepMacAddress": {
          "type": "string",
          "description": "The MAC address of the remote MEP"
        }
      }
    }
  }
}
