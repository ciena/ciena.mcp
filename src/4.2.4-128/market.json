{
  "swagger": "2.0",
  "info": {
    "description": "APIs for the Market component",
    "version": "v1",
    "title": "Market",
    "termsOfService": "",
    "contact": {
      "name": ""
    },
    "license": {
      "name": "",
      "url": ""
    }
  },
  "host": "10.78.105.17",
  "basePath": "/bpocore/market/api/v1",
  "tags": [
    {
      "name": "application-slices",
      "description": "Application slices that subdomains can associate with"
    },
    {
      "name": "domain-types",
      "description": "Types of domains or systems exposing orchestration entities"
    },
    {
      "name": "domains",
      "description": "Organizational units managing products and resources"
    },
    {
      "name": "ping",
      "description": "Interface to check Market readiness"
    },
    {
      "name": "products",
      "description": "Offerings to instantiate a resource type in a domain"
    },
    {
      "name": "relationships",
      "description": "Relationships are connections between resources"
    },
    {
      "name": "resource-providers",
      "description": "Providers of domains and resources"
    },
    {
      "name": "resource-types",
      "description": "Resource type schema definitions"
    },
    {
      "name": "resources",
      "description": "Resource instances"
    },
    {
      "name": "resyncs",
      "description": "Resync calls to the southbound"
    },
    {
      "name": "sharing-permissions",
      "description": "Sharing permissions"
    },
    {
      "name": "sub-domains",
      "description": "Subdomain instances that associate resources with application-slices"
    },
    {
      "name": "tag-keys",
      "description": "Tag key/values used to label resources"
    },
    {
      "name": "tenants",
      "description": "Tenants for managing resources"
    },
    {
      "name": "type-artifacts",
      "description": "All schema information including resource types and service templates"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/application-slices/{applicationSliceId}/add-sub-domains": {
      "post": {
        "tags": ["application-slices"],
        "summary": "Add subdomains to the specified application slice",
        "description": "",
        "operationId": "AddSubDomainsToApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice for which subdomains are to be added",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "sub-domains",
            "description": "Specifies the IDs of the subdomains to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppSliceSubDomains"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateApplicationSliceSubDomainsReport"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/remove-sub-domains": {
      "post": {
        "tags": ["application-slices"],
        "summary": "Remove subdomains from the specified application slice",
        "description": "",
        "operationId": "RemoveSubDomainsFromApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice for which subdomains are to be removed",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "sub-domains",
            "description": "Specifies the IDs of the subdomains to be removed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppSliceSubDomains"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateApplicationSliceSubDomainsReport"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/application-slices": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Get all of the application slices in the market",
        "description": "",
        "operationId": "ListApplicationSlices",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ApplicationSlice]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Get all of the application slices in the market",
        "description": "",
        "operationId": "HeadListApplicationSlices",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["application-slices"],
        "summary": "Create an application slice in the market",
        "description": "Create an application slice using the information in the provided application slice object",
        "operationId": "CreateApplicationSlice",
        "parameters": [
          {
            "in": "body",
            "name": "applicationSliceRequest",
            "description": "Specification defining a application slice",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationSliceProp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Get a specific application slice from the market",
        "description": "",
        "operationId": "GetApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifier of the requested application slice",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Get a specific application slice from the market",
        "description": "",
        "operationId": "HeadGetApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifier of the requested application slice",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["application-slices"],
        "summary": "Update an application slice in the market based on the data in the provided instance",
        "description": "",
        "operationId": "UpdateApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifier of the application slice to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "applicationSliceRequest",
            "description": "Specification defining an application slice",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["application-slices"],
        "summary": "Delete an application slice from the market",
        "description": "",
        "operationId": "DeleteApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifier of the application slice to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["application-slices"],
        "summary": "Patch update an application slice in the market based on the data in the provided instance",
        "description": "",
        "operationId": "PatchApplicationSlice",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifier of the application slice to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "applicationSliceRequest",
            "description": "Partial application slice object specifying the data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationSlice"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/parents": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Lists parent slices of the given application slice id",
        "description": "",
        "operationId": "ListParentApplicationSlices",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose parent slices are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect parent application-slices as well, i.e., parent of the parent, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SubDomain]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Lists parent slices of the given application slice id",
        "description": "",
        "operationId": "HeadListParentApplicationSlices",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose parent slices are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect parent application-slices as well, i.e., parent of the parent, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/children": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Lists all children slices of the given application slice id",
        "description": "",
        "operationId": "ListChildrenApplicationSlices",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose children slices are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect children application slices as well, i.e., children of the children, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ApplicationSlice]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Lists all children slices of the given application slice id",
        "description": "",
        "operationId": "HeadListChildrenApplicationSlices",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose children slices are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect children application slices as well, i.e., children of the children, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/sub-domains": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Lists all non-extended subdomains of the given application slice",
        "description": "",
        "operationId": "ListApplicationSliceSubDomains",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose subdomains are to be listed",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SubDomain]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Lists all non-extended subdomains of the given application slice",
        "description": "",
        "operationId": "HeadListApplicationSliceSubDomains",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose subdomains are to be listed",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/extended-sub-domains": {
      "get": {
        "tags": ["application-slices"],
        "summary": "Lists all extended subdomains of the given application slice by id",
        "description": "",
        "operationId": "ListApplicationSliceExtendedSubDomains",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose extended subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ApplicationSlice]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["application-slices"],
        "summary": "Lists all extended subdomains of the given application slice by id",
        "description": "",
        "operationId": "HeadListApplicationSliceExtendedSubDomains",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice whose extended subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/add-extended-sub-domains": {
      "post": {
        "tags": ["application-slices"],
        "summary": "Add extended subdomains to the specified application slice",
        "description": "",
        "operationId": "AddExtendedSubDomainsToApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice for which extended subdomains are to be added",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "sub-domains",
            "description": "Specifies the IDs of the extended subdomains to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppSliceSubDomains"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateApplicationSliceSubDomainsReport"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/application-slices/{applicationSliceId}/remove-extended-sub-domains": {
      "post": {
        "tags": ["application-slices"],
        "summary": "Remove extended subdomains from the specified application slice",
        "description": "",
        "operationId": "RemoveExtendedSubDomainsFromApplicationSlice",
        "parameters": [
          {
            "name": "applicationSliceId",
            "in": "path",
            "description": "Identifies the application slice for which subdomains are to be added and/or removed",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "sub-domains",
            "description": "Specifies the IDs of the subdomains to be removed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppSliceSubDomains"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateApplicationSliceSubDomainsReport"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/domain-types": {
      "get": {
        "tags": ["domain-types"],
        "summary": "Get all of the domain types in the market",
        "description": "",
        "operationId": "ListDomainTypes",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[DomainType]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["domain-types"],
        "summary": "Get all of the domain types in the market",
        "description": "",
        "operationId": "HeadListDomainTypes",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": ["domains"],
        "summary": "Get all of the domains in the market",
        "description": "",
        "operationId": "ListDomains",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Domain]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["domains"],
        "summary": "Get all of the domains in the market",
        "description": "",
        "operationId": "HeadListDomains",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["domains"],
        "summary": "Create a domain in the market using the provided properties",
        "description": "",
        "operationId": "CreateDomain",
        "parameters": [
          {
            "in": "body",
            "name": "domainRequest",
            "description": "Properties defining a domain",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainProps"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to use a custom validator",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/domains/validate": {
      "post": {
        "tags": ["domains"],
        "summary": "Validate domain creation in market using the provided properties",
        "description": "",
        "operationId": "ValidateDomainCreate",
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Whether to perform a full validation request",
            "required": true,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "domainRequest",
            "description": "Properties defining a domain",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainProps"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/domains/{domainId}": {
      "get": {
        "tags": ["domains"],
        "summary": "Get a specific domain from the market",
        "description": "",
        "operationId": "GetDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["domains"],
        "summary": "Get a specific domain from the market",
        "description": "",
        "operationId": "HeadGetDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["domains"],
        "summary": "Update a domain in the market based on the data in the provided instance",
        "description": "The id from the Domain object parameter is optional and ignored on update.",
        "operationId": "UpdateDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "domainRequest",
            "description": "Specification defining a domain",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["domains"],
        "summary": "Delete a domain from the market",
        "description": "",
        "operationId": "DeleteDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["domains"],
        "summary": "Patch update a domain in the market based on the (partial) data in the provided instance",
        "description": "The id from the Domain object parameter is optional and ignored on update.",
        "operationId": "PatchDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "domainRequest",
            "description": "The partial domain data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/domains/{domainId}/products": {
      "get": {
        "tags": ["domains"],
        "summary": "List all of the products offered by a specific domain",
        "description": "",
        "operationId": "ListProductsByDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain whose product offerings are being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Product]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["domains"],
        "summary": "List all of the products offered by a specific domain",
        "description": "",
        "operationId": "HeadListProductsByDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain whose product offerings are being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/domains/{domainId}/resync": {
      "post": {
        "tags": ["domains"],
        "summary": "Execute a resync request for the specified domain",
        "description": "",
        "operationId": "ResyncDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Identifier of the domain to be resynced",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "Whether the requeset is for a full resync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ResyncReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": ["ping"],
        "summary": "Ping the system to see whether the component is ready to handle requests or not",
        "description": "",
        "operationId": "GetPing",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["ping"],
        "summary": "Ping the system to see whether the component is ready to handle requests or not",
        "description": "",
        "operationId": "HeadGetPing",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "Get all of the products in the market",
        "description": "",
        "operationId": "ListProducts",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Product]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["products"],
        "summary": "Get all of the products in the market",
        "description": "",
        "operationId": "HeadListProducts",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["products"],
        "summary": "Create a new product in Market",
        "description": "Returns the created product object",
        "operationId": "CreateProduct",
        "parameters": [
          {
            "in": "body",
            "name": "product",
            "description": "Specification defining a product",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["products"],
        "summary": "Get the product from the market based on its product identifier",
        "description": "",
        "operationId": "GetProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["products"],
        "summary": "Get the product from the market based on its product identifier",
        "description": "",
        "operationId": "HeadGetProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["products"],
        "summary": "Update a product based on the complete data in the provided instance",
        "description": "The id from the Product object is optional and ignored on update.",
        "operationId": "UpdateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "product",
            "description": "The complete product data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["products"],
        "summary": "Delete the product from the market based on its product identifier",
        "description": "A product that is in use (pending orders or active resources refer to it) cannot be deleted.",
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product being delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["products"],
        "summary": "Patch update a product based on the (partial) data in the provided instance",
        "description": "The id from the Product object is optional and ignored on update.",
        "operationId": "PatchProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "product",
            "description": "The partial product data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/products/{productId}/resync": {
      "post": {
        "tags": ["products"],
        "summary": "Execute a resync request for the specified product",
        "description": "",
        "operationId": "ResyncProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Identifier of the product to be resynced",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "Whether the requeset is for a full resync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ResyncReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/relationships": {
      "get": {
        "tags": ["relationships"],
        "summary": "List all of the relationships registered with the Market",
        "description": "",
        "operationId": "ListRelationships",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "relationshipTypeId",
            "in": "query",
            "description": "Optional query to limit relationships by the relationship type (including derived types)",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactRelationshipTypeId",
            "in": "query",
            "description": "Optional query to limit relationships by an exact relationship type",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Relationship]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["relationships"],
        "summary": "List all of the relationships registered with the Market",
        "description": "",
        "operationId": "HeadListRelationships",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "relationshipTypeId",
            "in": "query",
            "description": "Optional query to limit relationships by the relationship type (including derived types)",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactRelationshipTypeId",
            "in": "query",
            "description": "Optional query to limit relationships by an exact relationship type",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["relationships"],
        "summary": "Create a new relationship in Market",
        "description": "",
        "operationId": "CreateRelationship",
        "parameters": [
          {
            "in": "body",
            "name": "relationship",
            "description": "Specification defining a relationship",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/relationships/unresolved": {
      "get": {
        "tags": ["relationships"],
        "summary": "List all unresolved relationships in Market",
        "description": "List all unresolved relationships in Market",
        "operationId": "ListUnresolvedRelationships",
        "parameters": [
          {
            "name": "resourceId",
            "in": "query",
            "description": "Identifier of the resource whose unresolved relationships to be listed",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[UnresolvedRelationship]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["relationships"],
        "summary": "List all unresolved relationships in Market",
        "description": "List all unresolved relationships in Market",
        "operationId": "HeadListUnresolvedRelationships",
        "parameters": [
          {
            "name": "resourceId",
            "in": "query",
            "description": "Identifier of the resource whose unresolved relationships to be listed",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/relationships/{relationshipId}": {
      "get": {
        "tags": ["relationships"],
        "summary": "Get the relationship from the market",
        "description": "",
        "operationId": "GetRelationship",
        "parameters": [
          {
            "name": "relationshipId",
            "in": "path",
            "description": "Identifier of the relationship being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["relationships"],
        "summary": "Get the relationship from the market",
        "description": "",
        "operationId": "HeadGetRelationship",
        "parameters": [
          {
            "name": "relationshipId",
            "in": "path",
            "description": "Identifier of the relationship being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["relationships"],
        "summary": "Delete a relationship",
        "description": "",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "name": "relationshipId",
            "in": "path",
            "description": "Identifier of the relationship",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resource-providers": {
      "get": {
        "tags": ["resource-providers"],
        "summary": "Get all of the resource providers in the market",
        "description": "",
        "operationId": "ListResourceProviders",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ResourceProvider]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-providers"],
        "summary": "Get all of the resource providers in the market",
        "description": "",
        "operationId": "HeadListResourceProviders",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["resource-providers"],
        "summary": "Create a resource provider for a domain in the market",
        "description": "Create a resource provider using the information in the provided resource provider object",
        "operationId": "CreateResourceProvider",
        "parameters": [
          {
            "in": "body",
            "name": "resourceProviderRequest",
            "description": "Specification defining a resource provider (id is ignored in creation request)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/resource-providers/{resourceProviderId}": {
      "get": {
        "tags": ["resource-providers"],
        "summary": "Get a specific resource provider from the market",
        "description": "",
        "operationId": "GetResourceProvider",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the requested resource provider",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-providers"],
        "summary": "Get a specific resource provider from the market",
        "description": "",
        "operationId": "HeadGetResourceProvider",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the requested resource provider",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["resource-providers"],
        "summary": "Update a resource provider in the market based on the data in the provided instance",
        "description": "The id from the ResourceProvider object parameter is ignored on update.",
        "operationId": "UpdateResourceProvider",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the resource provider to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resourceProviderRequest",
            "description": "Specification defining a resource provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["resource-providers"],
        "summary": "Delete a resource provider from the market",
        "description": "",
        "operationId": "DeleteResourceProvider",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the resource provider to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["resource-providers"],
        "summary": "Patch update a resource provider in the market based on the data in the provided instance",
        "description": "The id from the ResourceProvider object parameter is ignored on update.",
        "operationId": "PatchResourceProvider",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the resource provider to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resourceProviderRequest",
            "description": "Partial resource provider object specifying the data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceProvider"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resource-providers/{resourceProviderId}/domains": {
      "get": {
        "tags": ["resource-providers"],
        "summary": "List all of the domains for a given resource provider",
        "description": "",
        "operationId": "ListDomainsByRp",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the resource provuder whose domains are being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Domain]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-providers"],
        "summary": "List all of the domains for a given resource provider",
        "description": "",
        "operationId": "HeadListDomainsByRp",
        "parameters": [
          {
            "name": "resourceProviderId",
            "in": "path",
            "description": "Identifier of the resource provuder whose domains are being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resource-types": {
      "get": {
        "tags": ["resource-types"],
        "summary": "List all of the resource types in the Market",
        "description": "",
        "operationId": "ListResourceTypes",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeAbstract",
            "in": "query",
            "description": "If true, also includes abstract resource types",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ResourceTypeDescriptor]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-types"],
        "summary": "List all of the resource types in the Market",
        "description": "",
        "operationId": "HeadListResourceTypes",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeAbstract",
            "in": "query",
            "description": "If true, also includes abstract resource types",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resource-types/{resourceTypeId}": {
      "get": {
        "tags": ["resource-types"],
        "summary": "Get a resource type by Id",
        "description": "",
        "operationId": "GetResourceType",
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "description": "Identifier of the resource type being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceTypeDefinition"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-types"],
        "summary": "Get a resource type by Id",
        "description": "",
        "operationId": "HeadGetResourceType",
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "description": "Identifier of the resource type being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resource-types/{resourceTypeId}/products": {
      "get": {
        "tags": ["resource-types"],
        "summary": "List all of the products offered for the specific resource type",
        "description": "",
        "operationId": "ListProductsByResourceType",
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "description": "Products are filtered to those that are of this resource type",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Product]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resource-types"],
        "summary": "List all of the products offered for the specific resource type",
        "description": "",
        "operationId": "HeadListProductsByResourceType",
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "description": "Products are filtered to those that are of this resource type",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If false, returns only products that are actively offered; if true, returns all products",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": ["resources"],
        "summary": "Get a resource by Id",
        "description": "",
        "operationId": "GetResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "If true, returns volatile status attributes from the provider that are not stored in the database",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get a resource by Id",
        "description": "",
        "operationId": "HeadGetResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "If true, returns volatile status attributes from the provider that are not stored in the database",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["resources"],
        "summary": "Update a resource based on the data in the provided instance",
        "description": "The id from the Resource object is optional and ignored on update.",
        "operationId": "UpdateResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resource",
            "description": "The resource data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutResourceProp"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["resources"],
        "summary": "Delete a resource",
        "description": "",
        "operationId": "DeleteResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["resources"],
        "summary": "Patch update a resource based on the (partial) data in the provided instance",
        "description": "The id from the Resource object is optional and ignored on update.",
        "operationId": "PatchResource",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resource",
            "description": "The partial resource data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources": {
      "get": {
        "tags": ["resources"],
        "summary": "List all of the resources created within the Market",
        "description": "One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.\nThe Resource `differences` attribute supports q filtering whether any differences exist or not via `q=differences:empty` or `q=differences:nonEmpty` respectively.",
        "operationId": "ListResources",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "providerResourceId",
            "in": "query",
            "description": "Optional query to identify resource by provider resource ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter. May use whitespace-separated AND/OR query (e.g. (one:1) OR (two:2) AND (three:3)) syntax or tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Resource]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "List all of the resources created within the Market",
        "description": "One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.\nThe Resource `differences` attribute supports q filtering whether any differences exist or not via `q=differences:empty` or `q=differences:nonEmpty` respectively.",
        "operationId": "HeadListResources",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "providerResourceId",
            "in": "query",
            "description": "Optional query to identify resource by provider resource ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter. May use whitespace-separated AND/OR query (e.g. (one:1) OR (two:2) AND (three:3)) syntax or tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["resources"],
        "summary": "Create a new resource in the market",
        "description": "Initial orchestration state is requested.  Poll resource until state is active or failed.",
        "operationId": "CreateResource",
        "parameters": [
          {
            "in": "body",
            "name": "resource",
            "description": "Specification defining a resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceProp"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/resources/{resourceId}/operations": {
      "get": {
        "tags": ["resources"],
        "summary": "Get all custom operations invoked for a given resource",
        "description": "Resource types may define custom operations in addition to activate, update and terminate lifecycle plans.\n          This endpoint shows the history of these custom operations invoked on the specified resource.",
        "operationId": "ListResourceOperations",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operations will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ResourceOperation]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get all custom operations invoked for a given resource",
        "description": "Resource types may define custom operations in addition to activate, update and terminate lifecycle plans.\n          This endpoint shows the history of these custom operations invoked on the specified resource.",
        "operationId": "HeadListResourceOperations",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operations will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["resources"],
        "summary": "Create an operation for a specific resource",
        "description": "Instantiate an operation as defined by the resource's type which is executed asynchronously.\n           The current status can be retrieved via GET while valid operation definitions can be found under the /interfaces API",
        "operationId": "CreateResourceOperation",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource for whom the operation is being created",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "operation",
            "description": "Specification defining a resource operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOperationProp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/resources/{resourceId}/operations/{operationId}": {
      "get": {
        "tags": ["resources"],
        "summary": "Get details of a specific operation for a given resource",
        "description": "",
        "operationId": "GetResourceOperation",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operations will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Identifier of the operation to be queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get details of a specific operation for a given resource",
        "description": "",
        "operationId": "HeadGetResourceOperation",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operations will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Identifier of the operation to be queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["resources"],
        "summary": "Update attributes of a specific operation for a given resource",
        "description": "",
        "operationId": "UpdateResourceOperation",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operation will be changed",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Identifier of the operation to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "operation",
            "description": "Specification defining a resource operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["resources"],
        "summary": "Patch the attributes of a specific operation for a given resource",
        "description": "",
        "operationId": "PatchResourceOperation",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose operations will be changed",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Identifier of the operation to be patched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "operation",
            "description": "Specification defining a resource operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/audit": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute audit requests for all resources in the scope",
        "description": "Audit the resources by calling a GET asynchronously to the provider for each resource that matches the criteria.\n        One of productId, domainId, or resourceProviderId must be specified.\n        When using the q or p filters on properties, one (and only one) of productId, resourceTypeId or exactTypeId must be specified.",
        "operationId": "AuditResources",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Identifier of the product whose resources should be audited",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Identifier of the domain whose resources should be audited",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Identifier of the provider whose resources should be audited",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Option to limit the audit to one or more resource types specified and their derived types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Option to limit the audit to one or more resource types specified (takes precedence over resourceTypeId). Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter using tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AuditReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/count": {
      "get": {
        "tags": ["resources"],
        "summary": "Count resources",
        "description": "Count resources with filter. At most one filter can be specified. Only master tenant can issue a count\n           without any filter or by exactTypeId",
        "operationId": "CountResources",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Identifier of the product whose resources should be counted",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Identifier of the domain whose resources should be counted",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Identifier of the exact resource type whose resources should be counted. This can only be specified by master tenant.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional parameter indicating maximum number to count. If the actual number is greater than the specified limit, the result will be shown as bounded.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountReply"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Count resources",
        "description": "Count resources with filter. At most one filter can be specified. Only master tenant can issue a count\n           without any filter or by exactTypeId",
        "operationId": "HeadCountResources",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Identifier of the product whose resources should be counted",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Identifier of the domain whose resources should be counted",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Identifier of the exact resource type whose resources should be counted. This can only be specified by master tenant.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional parameter indicating maximum number to count. If the actual number is greater than the specified limit, the result will be shown as bounded.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/history": {
      "get": {
        "tags": ["resources"],
        "summary": "Get all history of given resource",
        "description": "Enter date/time values in UTC (Zulu time) ISO-8601 format e.g., 2014-10-24T16:29:56.640Z",
        "operationId": "ListResourceHistory",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose history will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Consider create/delete event since this time only",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Consider create/delete event before this time only",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ResourceHistoryEvent]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get all history of given resource",
        "description": "Enter date/time values in UTC (Zulu time) ISO-8601 format e.g., 2014-10-24T16:29:56.640Z",
        "operationId": "HeadListResourceHistory",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose history will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Consider create/delete event since this time only",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Consider create/delete event before this time only",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/sub-domain": {
      "put": {
        "tags": ["resources"],
        "summary": "Assign the resource to a subdomain",
        "description": "Assign the resource to a specific subdomain",
        "operationId": "AssignResourceToSubDomain",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to be assigned to the subdomain",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "subDomainInfo",
            "description": "Specification defining subdomain information to set the resource to",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceSubDomainInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/resources/{resourceId}/promote": {
      "post": {
        "tags": ["resources"],
        "summary": "Promote the Assembly to a managed service",
        "description": "Given the id of a top-level resource whose assembly is in the Assembled state, promote the entire assembly\n           to a managed service",
        "operationId": "PromoteResourceAssembly",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to promote",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resource",
            "description": "The partial resource data to patch during promotion",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/operations/validate": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute a validation request for a proposed resource operation creation",
        "description": "",
        "operationId": "ValidateResourceOperationCreation",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource for which the operation will be created against",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "Whether the request body represents a full resource operation",
            "required": true,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "operation",
            "description": "Specification defining a resource operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOperationProp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationReport"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/resources/{resourceId}/operations/{operationId}/validate": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute a change validation request for the specified resource operation",
        "description": "",
        "operationId": "ValidateResourceOperationChange",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource being validated against",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Identifier of the operation to be changed",
            "required": true,
            "type": "string"
          },
          {
            "name": "method",
            "in": "query",
            "description": "The HTTP method for the resource operation to be validated against",
            "required": true,
            "type": "string",
            "default": "PATCH",
            "enum": ["PATCH", "PUT"]
          },
          {
            "in": "body",
            "name": "operation",
            "description": "Specification defining a resource operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationReport"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/resources/{resourceId}/interfaces": {
      "get": {
        "tags": ["resources"],
        "summary": "Get all interfaces of given resource",
        "description": "List all implemented interfaces which define how to create resource operations.",
        "operationId": "ListResourceInterfaces",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose interfaces will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[ResourceInterface]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get all interfaces of given resource",
        "description": "List all implemented interfaces which define how to create resource operations.",
        "operationId": "HeadListResourceInterfaces",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource whose interfaces will be queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/reassemble": {
      "post": {
        "tags": ["resources"],
        "summary": "Reassemble an Assembly",
        "description": "Given the id of a assembling resource, reevaluate the discovery template",
        "operationId": "ReassembleResourceAssembly",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource who needs to be reassembled",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/dependencies": {
      "get": {
        "tags": ["resources"],
        "summary": "List all dependencies of the resource",
        "description": "Dependencies are resources that this resource depends upon. One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.",
        "operationId": "ListDependenciesOfResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource for which dependency resources are searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect dependencies as well, i.e., dependencies of the dependencies, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter using tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Resource]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "List all dependencies of the resource",
        "description": "Dependencies are resources that this resource depends upon. One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.",
        "operationId": "HeadListDependenciesOfResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource for which dependency resources are searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect dependencies as well, i.e., dependencies of the dependencies, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter using tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/dependents": {
      "get": {
        "tags": ["resources"],
        "summary": "List all dependents of the resource",
        "description": "Dependents are those resources that depend upon this resource. One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.",
        "operationId": "ListDependentsOfResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource for which dependent resources are searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect dependents as well, i.e., dependents of the dependents, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter using tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[Resource]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "List all dependents of the resource",
        "description": "Dependents are those resources that depend upon this resource. One (and only one) of productId, resourceTypeId or exactTypeId must be specified when using the q or p filters on properties.",
        "operationId": "HeadListDependentsOfResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource for which dependent resources are searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect dependents as well, i.e., dependents of the dependents, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Optional query to limit resources by product type",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit resources by domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceProviderId",
            "in": "query",
            "description": "Optional query to limit resources by resource provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more resource types. Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exactTypeId",
            "in": "query",
            "description": "Optional query to limit resources by one or more exact resource types (takes precedence over resourceTypeId). Use a comma-separated string to specify multiple resource types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subDomainId",
            "in": "query",
            "description": "Optional query to limit resources by one or more subdomain ids. Use a comma-separated string to specify multiple subdomain ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationSliceId",
            "in": "query",
            "description": "Optional query to limit resources by the application slice id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional query parameter to define a tag filter using tagKey:tagValue syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/observed": {
      "get": {
        "tags": ["resources"],
        "summary": "Get the observed state of the resource",
        "description": "Observed state is the state of the resource as seen by the provider",
        "operationId": "GetResourceObserved",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resources"],
        "summary": "Get the observed state of the resource",
        "description": "Observed state is the state of the resource as seen by the provider",
        "operationId": "HeadGetResourceObserved",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["resources"],
        "summary": "Update the resource to reflect it's observed state",
        "description": "Observed state is the state of the resource as seen by the provider",
        "operationId": "PutResourceObserved",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "resource",
            "description": "The resource data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutResourceProp"
            }
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["resources"],
        "summary": "Update the resource to reflect it's observed state",
        "description": "Observed state is the state of the resource as seen by the provider",
        "operationId": "PatchResourceObserved",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifies the resource to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "resource",
            "description": "The partial resource data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          {
            "name": "obfuscate",
            "in": "query",
            "description": "If true, schema obfuscated values will be replaced with a fixed string in the response.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/validate": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute a validation request for a proposed resource creation",
        "description": "",
        "operationId": "ValidateResourceCreation",
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Whether the request body represents a full resource",
            "required": true,
            "type": "boolean",
            "default": true
          },
          {
            "name": "custom",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "resource",
            "description": "Specification defining a resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceProp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationReport"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/resources/{resourceId}/validate": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute a change validation request for the specified resource",
        "description": "",
        "operationId": "ValidateResourceChange",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource being validated against",
            "required": true,
            "type": "string"
          },
          {
            "name": "method",
            "in": "query",
            "description": "The HTTP method for the resource to be validated against",
            "required": true,
            "type": "string",
            "default": "PATCH",
            "enum": ["PATCH", "PUT", "DELETE"]
          },
          {
            "name": "custom",
            "in": "query",
            "description": "Whether to perform custom validation in addition to built-in schema and accessor validations",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "resource",
            "description": "Specification defining a resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationReport"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/resources/{resourceId}/resync": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute a resync request for the specified resource",
        "description": "",
        "operationId": "ResyncResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to be resynced",
            "required": true,
            "type": "string"
          },
          {
            "name": "full",
            "in": "query",
            "description": "Whether the requeset is for a full resync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ResyncReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resources/{resourceId}/audit": {
      "post": {
        "tags": ["resources"],
        "summary": "Execute an audit request for the specified resource",
        "description": "",
        "operationId": "AuditResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Identifier of the resource to be audited",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AuditReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/resyncs/{resyncId}": {
      "get": {
        "tags": ["resyncs"],
        "summary": "Get the status of a resync request",
        "description": "",
        "operationId": "GetResyncStatus",
        "parameters": [
          {
            "name": "resyncId",
            "in": "path",
            "description": "ID of the resync being requested",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResyncStatus"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["resyncs"],
        "summary": "Get the status of a resync request",
        "description": "",
        "operationId": "HeadGetResyncStatus",
        "parameters": [
          {
            "name": "resyncId",
            "in": "path",
            "description": "ID of the resync being requested",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/sharing-permissions": {
      "get": {
        "tags": ["sharing-permissions"],
        "summary": "Get all of the sharing permissions in the market",
        "description": "",
        "operationId": "ListSharingPermissions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SharingPermission]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sharing-permissions"],
        "summary": "Get all of the sharing permissions in the market",
        "description": "",
        "operationId": "HeadListSharingPermissions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["sharing-permissions"],
        "summary": "Create a sharing permission in the market",
        "description": "Create a sharing permission using the information in the provided sharing permission object",
        "operationId": "CreateSharingPermission",
        "parameters": [
          {
            "in": "body",
            "name": "sharingPermissionRequest",
            "description": "Specification defining a sharing permission (id is honored in creation request)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharingPermissionProp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/sharing-permissions/{sharingPermissionId}": {
      "get": {
        "tags": ["sharing-permissions"],
        "summary": "Get a specific sharing permission from the market",
        "description": "",
        "operationId": "GetSharingPermission",
        "parameters": [
          {
            "name": "sharingPermissionId",
            "in": "path",
            "description": "Identifier of the requested sharing permission",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sharing-permissions"],
        "summary": "Get a specific sharing permission from the market",
        "description": "",
        "operationId": "HeadGetSharingPermission",
        "parameters": [
          {
            "name": "sharingPermissionId",
            "in": "path",
            "description": "Identifier of the requested sharing permission",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["sharing-permissions"],
        "summary": "Update a sharing permission in the market based on the data in the provided instance",
        "description": "The id from the SharingPermission object parameter is ignored on update.",
        "operationId": "UpdateSharingPermission",
        "parameters": [
          {
            "name": "sharingPermissionId",
            "in": "path",
            "description": "Identifier of the sharing permission to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sharingPermissionRequest",
            "description": "Specification defining a sharing permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["sharing-permissions"],
        "summary": "Delete a sharing permission from the market",
        "description": "",
        "operationId": "DeleteSharingPermission",
        "parameters": [
          {
            "name": "sharingPermissionId",
            "in": "path",
            "description": "Identifier of the sharing permission to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["sharing-permissions"],
        "summary": "Patch update a sharing permission in the market based on the data in the provided instance",
        "description": "The id from the SharingPermission object parameter is ignored on update.",
        "operationId": "PatchSharingPermission",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "sharingPermissionId",
            "in": "path",
            "description": "Identifier of the sharing permission to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sharingPermissionRequest",
            "description": "Partial sharing permission object specifying the data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharingPermission"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/sub-domains/{subDomainId}": {
      "get": {
        "tags": ["sub-domains"],
        "summary": "Get a specific subdomain from the market",
        "description": "",
        "operationId": "GetSubDomain",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the requested subdomain",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sub-domains"],
        "summary": "Get a specific subdomain from the market",
        "description": "",
        "operationId": "HeadGetSubDomain",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the requested subdomain",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["sub-domains"],
        "summary": "Update a subdomain in the market based on the data in the provided instance",
        "description": "",
        "operationId": "UpdateSubDomain",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the subdomain to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "subDomainRequest",
            "description": "Specification defining a subdomain",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["sub-domains"],
        "summary": "Delete a subdomain from the market",
        "description": "",
        "operationId": "DeleteSubDomain",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the subdomain to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["sub-domains"],
        "summary": "Patch update a subdomain in the market based on the data in the provided instance",
        "description": "",
        "operationId": "PatchSubDomain",
        "consumes": ["application/json", "application/json-patch+json"],
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the subdomain to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "subDomainRequest",
            "description": "Partial subdomain object specifying the data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/sub-domains": {
      "get": {
        "tags": ["sub-domains"],
        "summary": "Get all of the subdomains in the market",
        "description": "",
        "operationId": "ListSubDomains",
        "parameters": [
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit subdomains by domain ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SubDomain]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sub-domains"],
        "summary": "Get all of the subdomains in the market",
        "description": "",
        "operationId": "HeadListSubDomains",
        "parameters": [
          {
            "name": "domainId",
            "in": "query",
            "description": "Optional query to limit subdomains by domain ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["sub-domains"],
        "summary": "Create a subdomain in the market",
        "description": "Create a subdomain using the information in the provided subdomain object",
        "operationId": "CreateSubDomain",
        "parameters": [
          {
            "in": "body",
            "name": "subDomainRequest",
            "description": "Specification defining a subdomain",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubDomainProp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubDomain"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/sub-domains/{subDomainId}/containers": {
      "get": {
        "tags": ["sub-domains"],
        "summary": "Lists all container subdomains of the given subdomain id",
        "description": "",
        "operationId": "ListContainers",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifies the subdomain whose container subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect container subdomains as well, i.e., container of the container, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SubDomain]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sub-domains"],
        "summary": "Lists all container subdomains of the given subdomain id",
        "description": "",
        "operationId": "HeadListContainers",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifies the subdomain whose container subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect container subdomains as well, i.e., container of the container, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/sub-domains/{subDomainId}/containees": {
      "get": {
        "tags": ["sub-domains"],
        "summary": "Lists all containee subdomains of the given subdomain id",
        "description": "",
        "operationId": "ListContainees",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifies the subdomain whose containee subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect containee subdomains as well, i.e., containees of the containees, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[SubDomain]"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["sub-domains"],
        "summary": "Lists all containee subdomains of the given subdomain id",
        "description": "",
        "operationId": "HeadListContainees",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifies the subdomain whose containee subdomains are to be listed",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, returns indirect containee subdomains as well, i.e., containees of the containees, etc.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/sub-domains/{subDomainId}/add-resources": {
      "post": {
        "tags": ["sub-domains"],
        "summary": "Add resources to a subdomain",
        "description": "All resources should belong to the same domain as the subdomain",
        "operationId": "AddResourcesToSubDomain",
        "parameters": [
          {
            "name": "subDomainId",
            "in": "path",
            "description": "Identifier of the subdomain to add the resources",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "resources",
            "description": "Specify IDs of the resources to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubDomainResourceSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddResourcesToSubDomainReport"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/tag-keys/{tagKey}/tag-values": {
      "get": {
        "tags": ["tag-keys"],
        "summary": "Get all of the tag values for a given tag key",
        "description": "",
        "operationId": "ListTagValues",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key whose tag values are being requested",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[TagValue]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["tag-keys"],
        "summary": "Get all of the tag values for a given tag key",
        "description": "",
        "operationId": "HeadListTagValues",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key whose tag values are being requested",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["tag-keys"],
        "summary": "Create a tag value for a specific tag key",
        "description": "The key in the TagValue object is optional and ignored on create",
        "operationId": "CreateTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key for the tag value being created",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tagValueObject",
            "description": "Specification defining a tag value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/tag-keys/{tagKey}/tag-values/{tagValue}": {
      "get": {
        "tags": ["tag-keys"],
        "summary": "Get a specific tag value from the market",
        "description": "",
        "operationId": "GetTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key whose tag value is being requested",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag value to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["tag-keys"],
        "summary": "Get a specific tag value from the market",
        "description": "",
        "operationId": "HeadGetTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key whose tag value is being requested",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag value to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["tag-keys"],
        "summary": "Update a tag value based on the data in the provided instance",
        "description": "",
        "operationId": "UpdateTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key for the tag value being updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag value being updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tagValueObject",
            "description": "Specification defining a tag value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["tag-keys"],
        "summary": "Delete a tag value",
        "description": "",
        "operationId": "DeleteTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key for the tag value being deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag value being deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["tag-keys"],
        "summary": "Patch update a tag value based on the data in the provided instance",
        "description": "",
        "operationId": "PatchTagValue",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key for the tag value being updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag value being updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tagValueObject",
            "description": "Partial tag value defining the fields to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagValue"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/tag-keys/{tagKey}": {
      "get": {
        "tags": ["tag-keys"],
        "summary": "Get a specific tag key from the market",
        "description": "",
        "operationId": "GetTagKey",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": " Requested tag key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["tag-keys"],
        "summary": "Get a specific tag key from the market",
        "description": "",
        "operationId": "HeadGetTagKey",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": " Requested tag key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": ["tag-keys"],
        "summary": "Update a tag key in the market based on the data in the provided instance",
        "description": "",
        "operationId": "UpdateTagKey",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tagKeyObject",
            "description": "Specification defining a tag key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": ["tag-keys"],
        "summary": "Delete a tag key from the market",
        "description": "",
        "operationId": "DeleteTagKey",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "patch": {
        "tags": ["tag-keys"],
        "summary": "Patch update a tag key in the market based on the data in the provided instance",
        "description": "",
        "operationId": "PatchTagKey",
        "parameters": [
          {
            "name": "tagKey",
            "in": "path",
            "description": "Tag key to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tagKeyObject",
            "description": "Partial tag key object specifying data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/tag-keys": {
      "get": {
        "tags": ["tag-keys"],
        "summary": "Get all of the tag keys in the market",
        "description": "",
        "operationId": "ListTagKeys",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[TagKey]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["tag-keys"],
        "summary": "Get all of the tag keys in the market",
        "description": "",
        "operationId": "HeadListTagKeys",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "post": {
        "tags": ["tag-keys"],
        "summary": "Create a tag key in the market using the information in the provided tag key object",
        "description": "",
        "operationId": "CreateTagKey",
        "parameters": [
          {
            "in": "body",
            "name": "tagKeyObject",
            "description": "Specification defining a tag key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TagKey"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/tenants/resync": {
      "post": {
        "tags": ["tenants"],
        "summary": "Do a full reset of the tenants in bpocore to mirror the current state of Tron",
        "description": "",
        "operationId": "ResyncTenants",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "202": {
            "description": "Accepted"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/type-artifacts/realm": {
      "get": {
        "tags": ["type-artifacts"],
        "summary": "Get information on the type layer itself",
        "description": "This resource contains metadata on the type layer itself. This metadata can be used to determine the\n      status of pending type definition on-boarding operations. Specifically, the content of the response can be\n      compared against the result of an accepted pull request to determine whether the changes have finished propagating\n      into market. The version represents the latest commit fully incorporated into the type layer. The headCommit is\n      the latest accepted commit in the asset area. The property current is set to true when those values match.",
        "operationId": "GetTypeLayerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TypeLayerCurrentReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["type-artifacts"],
        "summary": "Get information on the type layer itself",
        "description": "This resource contains metadata on the type layer itself. This metadata can be used to determine the\n      status of pending type definition on-boarding operations. Specifically, the content of the response can be\n      compared against the result of an accepted pull request to determine whether the changes have finished propagating\n      into market. The version represents the latest commit fully incorporated into the type layer. The headCommit is\n      the latest accepted commit in the asset area. The property current is set to true when those values match.",
        "operationId": "HeadGetTypeLayerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/type-artifacts": {
      "get": {
        "tags": ["type-artifacts"],
        "summary": "Get all of the type artifacts in the market",
        "description": "",
        "operationId": "ListTypeArtifacts",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReply[TypeArtifactDescriptor]"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["type-artifacts"],
        "summary": "Get all of the type artifacts in the market",
        "description": "",
        "operationId": "HeadListTypeArtifacts",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Optional query parameter to define a query filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "p",
            "in": "query",
            "description": "Optional query parameter to define a partial string match filter using property:value syntax",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested offset within the total result set to be the first element in the paged response",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of elements to return in a single paged request",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "String pagination token returned from a previous query that encodes query information in order to optimize a\nsubsequent request for a page of results. The token includes the limit and offset parameters for the next page, but one or\nboth can be included to override the encoded values",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/type-artifacts/realm/validate": {
      "post": {
        "tags": ["type-artifacts"],
        "summary": "Validate the current model in the definition realm",
        "description": "Verifies that the currently used model in the definition realm is fully compliant",
        "operationId": "ValidateDefinitionRealm",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateDefinitionRealmReply"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/type-artifacts/{typeArtifactUri}": {
      "get": {
        "tags": ["type-artifacts"],
        "summary": "Get a type artifact by Id",
        "description": "",
        "operationId": "GetTypeArtifact",
        "parameters": [
          {
            "name": "typeArtifactUri",
            "in": "path",
            "description": "Identifier of the type artifact being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TypeArtifactDefinition"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "head": {
        "tags": ["type-artifacts"],
        "summary": "Get a type artifact by Id",
        "description": "",
        "operationId": "HeadGetTypeArtifact",
        "parameters": [
          {
            "name": "typeArtifactUri",
            "in": "path",
            "description": "Identifier of the type artifact being queried",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    }
  },
  "securityDefinitions": {},
  "definitions": {
    "RelationshipSetting": {
      "type": "object",
      "properties": {
        "sourceTypeId": {
          "type": "string",
          "description": "Resource type of the relationship source"
        },
        "targetTypeId": {
          "type": "string",
          "description": "Resource type of the relationship target"
        },
        "capabilityName": {
          "type": "string",
          "description": "Identifies the relationship capability name"
        },
        "requirementName": {
          "type": "string",
          "description": "Identifies the relationship requirement name"
        },
        "relationshipTypeId": {
          "type": "string",
          "description": "Identifies the relationship type"
        },
        "fieldKind": {
          "type": "string",
          "description": "Indicates what the identifying property field points to",
          "enum": ["provider", "user"]
        },
        "fieldLocator": {
          "type": "string",
          "description": "JSON path expression identifying the property field to use for relationship identification"
        },
        "multiFieldLocator": {
          "type": "array",
          "description": "Multiple JSON path expresssion to be used identifying property fields to use in relationship identification",
          "items": {
            "type": "string"
          }
        },
        "isDomainMangled": {
          "type": "boolean",
          "description": "Whether the remote providerResourceId specified in this property is domain-mangled when receiving from and sending to the provider"
        },
        "translate": {
          "type": "boolean",
          "description": "Whether translation between providerResourceIds and Market Ids should be done"
        },
        "namespaceProperty": {
          "type": "string",
          "description": "JSON path expression identifying the property field to be prepended to each field locator value"
        }
      },
      "description": "Settings to declare how relationships can be identified between two resource types"
    },
    "AddResourcesToSubDomainReport": {
      "type": "object",
      "required": ["message", "resourcesAdded"],
      "properties": {
        "message": {
          "type": "string"
        },
        "resourcesAdded": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListReply[ResourceTypeDescriptor]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ResourceTypeDescriptor"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "Address": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "City"
        },
        "zip": {
          "type": "string",
          "description": "Postal/zip code"
        },
        "street": {
          "type": "string",
          "description": "Street"
        },
        "state": {
          "type": "string",
          "description": "State/province"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude"
        }
      },
      "description": "Represents a physical location/address"
    },
    "ListReply[Domain]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product (ignored during create request)"
        },
        "resourceTypeId": {
          "type": "string",
          "description": "The type of resource provided by the product"
        },
        "title": {
          "type": "string",
          "description": "Name or title describing the product"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product"
        },
        "active": {
          "type": "boolean",
          "description": "State of the product (active or inactive)"
        },
        "domainId": {
          "type": "string",
          "description": "Identifier of the domain that advertises the product"
        },
        "providerProductId": {
          "type": "string",
          "description": "Identifier within the provider's context or scope for the product"
        },
        "constraints": {
          "description": "Additional constraints for the product",
          "$ref": "#/definitions/JObject"
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Information describing a product"
    },
    "TypeLayerCurrentReply": {
      "type": "object",
      "properties": {
        "current": {
          "type": "boolean",
          "description": "Is the Type Catalog current?"
        },
        "version": {
          "type": "string",
          "description": "Type Catalog version"
        },
        "headCommit": {
          "type": "string",
          "description": "Asset Area head commit"
        }
      },
      "description": "Version values used to determine if the Type Catalog is current with respect to the Asset Area"
    },
    "PutResourceProp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the resource"
        },
        "label": {
          "type": "string",
          "description": "Textual label"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of this resource"
        },
        "resourceTypeId": {
          "type": "string",
          "description": "The type of this resource"
        },
        "productId": {
          "type": "string",
          "description": "The type of product for this resource"
        },
        "orderId": {
          "type": "string",
          "description": "If applicable, the order containing this resource"
        },
        "tenantId": {
          "type": "string",
          "description": "Owner tenant of the resource?"
        },
        "shared": {
          "type": "boolean",
          "description": "Is resource shared?"
        },
        "sharingPermissionId": {
          "type": "string",
          "description": "The sharing permission associated with the resource"
        },
        "subDomainId": {
          "type": "string",
          "format": "uuid",
          "description": "Identifier of the resource's sub-domain"
        },
        "properties": {
          "description": "Properties",
          "$ref": "#/definitions/JObject"
        },
        "providerResourceId": {
          "type": "string",
          "description": "Identifier of the resource in provider's context"
        },
        "differences": {
          "type": "array",
          "description": "Differences represent the difference between desired and observed state",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        },
        "desiredOrchState": {
          "type": "string",
          "description": "Desired orchestration state",
          "enum": [
            "active",
            "assembled",
            "requested",
            "scheduled",
            "terminated",
            "unspecified"
          ]
        },
        "nativeState": {
          "type": "string",
          "description": "Native (type specific) state"
        },
        "orchState": {
          "type": "string",
          "description": "Current state of the resource in the orchestrator",
          "enum": [
            "unknown",
            "unspecified",
            "requested",
            "scheduled",
            "promoting",
            "assembling",
            "assembled",
            "activating",
            "failed",
            "active",
            "inactive",
            "terminating",
            "terminated"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Reason for the orchestration state"
        },
        "tags": {
          "type": "object",
          "description": "Tags",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        },
        "autoClean": {
          "type": "boolean",
          "description": "Free up any resources automatically upon any activation failure"
        }
      },
      "description": "Information describing a resource PUT request"
    },
    "ValidateDefinitionRealmReply": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Human readable description of what is wrong with the model"
        },
        "issues": {
          "type": "array",
          "description": "Specific issues which caused validation to fail",
          "items": {
            "$ref": "#/definitions/ValidationIssue"
          }
        }
      }
    },
    "DiscoveryStrategy": {
      "type": "object",
      "properties": {
        "strategyType": {
          "type": "string",
          "description": "Discovery strategy type",
          "enum": ["async", "sync"]
        },
        "pollingMode": {
          "type": "string",
          "description": "Resource polling mode",
          "enum": ["listOnly", "getOnly", "noPolling"]
        },
        "pollingSettings": {
          "description": "Resource polling settings",
          "$ref": "#/definitions/PollingStrategySettings"
        }
      },
      "description": "Settings to declare how resource type discovery should be performed"
    },
    "SubDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique ID of the sub-domain"
        },
        "name": {
          "type": "string",
          "description": "Name of the sub-domain"
        },
        "description": {
          "type": "string",
          "description": "Description of the sub-domain"
        },
        "ownerTenantId": {
          "type": "string",
          "description": "The ID of the owner tenant"
        },
        "domainId": {
          "type": "string",
          "description": "ID of the domain this sub-domain belongs to"
        },
        "scope": {
          "type": "string",
          "description": "Scope of the sub-domain",
          "enum": ["APPLICATION", "TENANT", "COMMON"]
        },
        "decomposable": {
          "type": "boolean",
          "description": "Whether the sub-domain can be decomposed"
        },
        "assignable": {
          "type": "boolean",
          "description": "Whether the sub-domain can be re-assigned"
        },
        "applicationSlices": {
          "type": "array",
          "description": "Set of application slices this sub-domain is in",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "extendedApplicationSlices": {
          "type": "array",
          "description": "Set of application slices for which this sub-domain acts as an extended sub-domain",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "parentId": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the container sub-domain, if applicable"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether this sub-domain is its domain's default sub-domain"
        }
      },
      "description": "Information describing a sub-domain"
    },
    "ListReply[Resource]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResourceSubDomainInfo": {
      "type": "object",
      "properties": {
        "subDomainId": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the sub-domain"
        }
      },
      "description": "Information describing a sub-domain for a resource to assign to"
    },
    "DomainType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the domain type"
        },
        "description": {
          "type": "string",
          "description": "Description of a domain type"
        },
        "providers": {
          "type": "array",
          "description": "Providers for this domain type",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Defines a the type of a domain"
    },
    "TypeArtifactDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Uniquely identifier of artifact"
        },
        "title": {
          "type": "string",
          "description": "Title (label) of the artifact"
        },
        "artifactType": {
          "type": "string",
          "description": "Type of the artifact"
        },
        "description": {
          "type": "string",
          "description": "Description of the artifact"
        },
        "version": {
          "type": "string",
          "description": "Version level of the artifact"
        },
        "derivedFrom": {
          "type": "array",
          "description": "URI of model artifacts from which this artifact is derived from",
          "items": {
            "type": "string"
          }
        },
        "experimental": {
          "type": "boolean",
          "description": "Experimental type artifact"
        },
        "model": {
          "description": "Type artifact model",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Information describing a single type artifact"
    },
    "ListReply[Product]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResyncReplyItem": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "HTTP status code for the item"
        },
        "message": {
          "type": "string",
          "description": "Message of the item"
        },
        "source": {
          "type": "string",
          "description": "Source that produced the item"
        },
        "properties": {
          "description": "Optional properties of the item",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Information describing an item of a resync request reply"
    },
    "ResourceProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier to address the resource provider"
        },
        "domainType": {
          "type": "string",
          "description": "Type of domain managed by the resource provider"
        },
        "uri": {
          "type": "string",
          "description": "Address to contact the resource provider"
        },
        "resourceTypes": {
          "type": "array",
          "description": "List of resource types managed by the resource provider",
          "items": {
            "$ref": "#/definitions/ResourceTypeSetting"
          }
        },
        "domainSettings": {
          "description": "Domain level setting for the resource provider",
          "$ref": "#/definitions/DomainSettings"
        },
        "properties": {
          "description": "Properties of the resource provider",
          "$ref": "#/definitions/JObject"
        },
        "title": {
          "type": "string",
          "description": "Name of the resource provider"
        },
        "description": {
          "type": "string",
          "description": "Description of the resource provider"
        },
        "providerId": {
          "type": "string",
          "description": "Identifier of the resource provider in provider's context"
        },
        "protocolVersion": {
          "type": "string",
          "description": "Identifies the protocol version supported by the resource provider",
          "enum": ["v1", "v2", "built-in"]
        },
        "asyncProtocolVersion": {
          "type": "string",
          "description": "Identifies the async protocol version supported by the resource provider",
          "enum": ["v1", "v2"]
        },
        "relationships": {
          "type": "array",
          "description": "Settings to declare how relationships should be identified for resource types managed by this resource provider",
          "items": {
            "$ref": "#/definitions/RelationshipSetting"
          }
        },
        "lastUpsertTime": {
          "type": "string",
          "format": "date-time",
          "description": "Last time the resource provider is upserted in the database"
        }
      },
      "description": "Information describing a resource provider"
    },
    "AuditReply": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message of the item"
        }
      },
      "description": "Information describing an item of a audit request reply"
    },
    "ListReply[SharingPermission]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/SharingPermission"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "DomainProps": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Descriptive name/title of domain"
        },
        "description": {
          "type": "string",
          "description": "Detailed description"
        },
        "accessUrl": {
          "type": "string",
          "description": "Access URL to the domain"
        },
        "properties": {
          "description": "Properties the domain",
          "$ref": "#/definitions/JObject"
        },
        "address": {
          "description": "Address of the domain",
          "$ref": "#/definitions/Address"
        },
        "rpId": {
          "type": "string",
          "description": "Resource provider managing this domain"
        },
        "operationMode": {
          "type": "string",
          "description": "Operation mode of this domain",
          "enum": ["normal", "simulated", "displayonly"]
        },
        "tenantId": {
          "type": "string",
          "description": "Orchestrator tenant ID for the domain owner (if unspecified defaults to requester)"
        },
        "onlyEnableTypes": {
          "type": "array",
          "description": "When non-empty, only enable these resource types in the domain",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Properties for creating a domain"
    },
    "SharingPermissionProp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the permission"
        },
        "label": {
          "type": "string",
          "description": "Label of the permission"
        },
        "description": {
          "type": "string",
          "description": "Description of the permission"
        },
        "visibleToSubTenants": {
          "type": "boolean",
          "description": "Whether subject is visible to subtenants if shared"
        },
        "updatableBySubTenants": {
          "type": "boolean",
          "description": "Whether subject is updatable by subtenants if shared"
        },
        "deletableBySubTenants": {
          "type": "boolean",
          "description": "Whether subject is deletable by subtenants if shared"
        }
      },
      "description": "Properties for creating a sharing permission"
    },
    "ListReply[Relationship]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/Relationship"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ListReply[TagKey]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/TagKey"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "Function1": {
      "type": "object"
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the resource (optional/ignored on calls to create)"
        },
        "label": {
          "type": "string",
          "description": "Textual label"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of this resource"
        },
        "resourceTypeId": {
          "type": "string",
          "description": "The type of this resource"
        },
        "productId": {
          "type": "string",
          "description": "The type of product for this resource"
        },
        "orderId": {
          "type": "string",
          "description": "If applicable, the order containing this resource"
        },
        "tenantId": {
          "type": "string",
          "description": "Owner tenant of the resource?"
        },
        "shared": {
          "type": "boolean",
          "description": "Is resource shared?"
        },
        "sharingPermissionId": {
          "type": "string",
          "description": "The sharing permission associated with the resource"
        },
        "subDomainId": {
          "type": "string",
          "format": "uuid",
          "description": "Identifier of the resource's sub-domain"
        },
        "properties": {
          "description": "Properties",
          "$ref": "#/definitions/JObject"
        },
        "providerResourceId": {
          "type": "string",
          "description": "Identifier of the resource in provider's context"
        },
        "discovered": {
          "type": "boolean",
          "description": "Is this resource discovered"
        },
        "differences": {
          "type": "array",
          "description": "Differences represent the difference between desired and observed state",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        },
        "desiredOrchState": {
          "type": "string",
          "description": "Desired orchestration state",
          "enum": [
            "active",
            "assembled",
            "requested",
            "scheduled",
            "terminated",
            "unspecified"
          ]
        },
        "nativeState": {
          "type": "string",
          "description": "Native (type specific) state"
        },
        "orchState": {
          "type": "string",
          "description": "Current state of the resource in the orchestrator",
          "enum": [
            "unknown",
            "unspecified",
            "requested",
            "scheduled",
            "promoting",
            "assembling",
            "assembled",
            "activating",
            "failed",
            "active",
            "inactive",
            "terminating",
            "terminated"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Reason for the orchestration state"
        },
        "tags": {
          "type": "object",
          "description": "Tags",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time of last update"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time of creation"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Strictly increasing revision number, incremented every update including observed update"
        },
        "autoClean": {
          "type": "boolean",
          "description": "Free up any resources automatically upon any activation failure"
        },
        "updateState": {
          "description": "Current state of updating the resource, or `unset`",
          "$ref": "#/definitions/UpdateState"
        },
        "updateReason": {
          "type": "string",
          "description": "Reason for the update state"
        },
        "updateCount": {
          "type": "integer",
          "format": "int64",
          "description": "Monotonically increasing count of updates applied to this resource"
        }
      },
      "description": "Information describing a single resource"
    },
    "ResyncRequestScope": {
      "type": "object",
      "required": ["domainId"],
      "properties": {
        "domainId": {
          "type": "string"
        },
        "resourceTypeId": {
          "type": "string"
        },
        "providerResourceId": {
          "type": "string"
        }
      },
      "description": "Information describing the status of a resync request"
    },
    "ResourceInterface": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Interface identifier"
        },
        "title": {
          "type": "string",
          "description": "Title of the resource interface"
        },
        "description": {
          "type": "string",
          "description": "Description of the resource interface"
        },
        "inputs": {
          "description": "Inputs to the resource interface",
          "$ref": "#/definitions/JObject"
        },
        "outputs": {
          "description": "Outputs from the resource interface",
          "$ref": "#/definitions/JObject"
        },
        "executionGroup": {
          "type": "string",
          "description": "The execution group this interface will use"
        },
        "internalOnly": {
          "type": "boolean",
          "description": "Whether the interface is for internal use only"
        }
      },
      "description": "Information describing a resource operation interface"
    },
    "UnresolvedRelationship": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The id of the unresolved relationship"
        },
        "resourceId": {
          "type": "string",
          "description": "The id of the resource where the unresolved locator id is defined"
        },
        "mangledProviderId": {
          "type": "string",
          "description": "The unresolved domain-mangled providerResourceId for the relationship"
        },
        "requirement": {
          "type": "string",
          "description": "Identifies the relationship requirement name"
        },
        "capability": {
          "type": "string",
          "description": "Identifies the relationship capability name"
        },
        "relationshipTypeId": {
          "type": "string",
          "description": "Identifies the relationship type ID"
        },
        "isTarget": {
          "type": "boolean",
          "description": "Is the unresolved locator the targetId of the relationship"
        },
        "isDomainMangled": {
          "type": "number",
          "description": "Should the translated locator be written back to the resource in domain-mangled form"
        },
        "locatorPath": {
          "type": "string",
          "description": "The locator path of the relationship setting, used for writing the translated property back"
        },
        "index": {
          "type": "number",
          "description": "The index of the locator in an array, used for writing the translated property back"
        }
      },
      "description": "Description of an unresolved relationship"
    },
    "ListReply[TypeArtifactDescriptor]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/TypeArtifactDescriptor"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ListReply[TagValue]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/TagValue"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ListReply[ApplicationSlice]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ApplicationSlice"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResourceHistoryEvent": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the transaction making the change"
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user making the change"
        },
        "changes": {
          "type": "array",
          "description": "The set of attributes changed on the resource",
          "items": {
            "$ref": "#/definitions/AttributeChange"
          }
        }
      },
      "description": "Description of all changes made to a resource at a single time instant or transaction"
    },
    "ResourceTypeSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifies the resource type"
        },
        "discoveryStrategy": {
          "description": "Specifies the discovery strategy to use for the resource type",
          "$ref": "#/definitions/DiscoveryStrategy"
        },
        "apiSettings": {
          "description": "Specifies the REST API client settings for the resource type",
          "$ref": "#/definitions/DiscoveryApiSettings"
        },
        "noInitialDiscoveryMarkers": {
          "type": "number",
          "description": "Specifies if initial discovery status for this resource type should be ignored"
        },
        "updateCompleteOnPutReturn": {
          "type": "number",
          "description": "Specifies if a PUT update response signals update completion for this resource type"
        },
        "updateCompletionTimeoutMs": {
          "type": "number",
          "description": "Timeout in milliseconds for an update on a resource to be force completed by RA Manager. If `updateCompleteOnPutReturn` is true, then this timeout has no effect."
        }
      },
      "description": "Settings to declare how resource types should be managed by adapters"
    },
    "ValidationReport": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "Status of the validation report",
          "enum": ["passed", "failed"]
        },
        "results": {
          "type": "array",
          "description": "List of validation results",
          "items": {
            "$ref": "#/definitions/ValidationItem"
          }
        }
      },
      "description": "A report for the processing results of a resource validation request"
    },
    "AttributeChange": {
      "type": "object",
      "properties": {
        "attrName": {
          "type": "string",
          "description": "Name of the attribute that was changed"
        },
        "changeType": {
          "type": "string",
          "description": "The type of change made to the attribute",
          "enum": ["Set", "Unset", "Updated", "Added", "Removed"]
        },
        "migration": {
          "type": "boolean",
          "description": "Indicates whether the change was part of a migration"
        },
        "newValue": {
          "description": "The resulting value for the attribute after this change",
          "$ref": "#/definitions/JValue"
        },
        "oldValue": {
          "description": "The original value for the attribute before this change",
          "$ref": "#/definitions/JValue"
        }
      },
      "description": "Description of a single attribute change"
    },
    "PollingStrategySettings": {
      "type": "object",
      "properties": {
        "pollingIntervalMs": {
          "type": "integer",
          "format": "int64",
          "description": "Polling interval in milliseconds"
        },
        "immediateDeletion": {
          "type": "boolean",
          "description": "Whether the deletion is considered done when the API returns"
        },
        "deletePollingIntervalMs": {
          "type": "integer",
          "format": "int64",
          "description": "Polling interval for delete verification"
        },
        "deletePollingLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of delete verification polling"
        },
        "delayCreateTimeoutMs": {
          "type": "integer",
          "format": "int64",
          "description": "Timeout value for a delayed creation to be considered failed"
        },
        "syncTimeoutMs": {
          "type": "integer",
          "format": "int64",
          "description": "Timeout for sync and queries"
        },
        "verifyMissingList": {
          "type": "boolean",
          "description": "Whether an extra GET will be called to verify a missing resource in LIST"
        }
      },
      "description": "Detailed settings on resource polling strategy"
    },
    "Value": {
      "type": "object"
    },
    "UpdateApplicationSliceSubDomainsReport": {
      "type": "object",
      "required": ["message", "subdomains"],
      "properties": {
        "message": {
          "type": "string"
        },
        "subdomains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "UpdateState": {
      "type": "object"
    },
    "Domain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the domain"
        },
        "title": {
          "type": "string",
          "description": "Descriptive name/title of domain"
        },
        "description": {
          "type": "string",
          "description": "Detailed description"
        },
        "domainType": {
          "type": "string",
          "description": "Type of the domain"
        },
        "accessUrl": {
          "type": "string",
          "description": "Access URL to the domain"
        },
        "properties": {
          "description": "Properties the domain",
          "$ref": "#/definitions/JObject"
        },
        "address": {
          "description": "Address of the domain",
          "$ref": "#/definitions/Address"
        },
        "tenantId": {
          "type": "string",
          "description": "Orchestrator tenant"
        },
        "rpId": {
          "type": "string",
          "description": "Resource provider that creates this domain"
        },
        "operationMode": {
          "type": "string",
          "description": "Operation mode of this domain",
          "enum": ["normal", "simulated", "displayonly"]
        },
        "lastConnected": {
          "type": "string",
          "format": "date-time",
          "description": "Last time domain was connected to southbound"
        },
        "reason": {
          "type": "string",
          "description": "Reason message for connection failure"
        },
        "connectionStatus": {
          "description": "Connection status of the domain",
          "$ref": "#/definitions/DomainConnectionStatus"
        },
        "initialDiscoveryStatus": {
          "description": "Initial Discovery status of the domain",
          "$ref": "#/definitions/DomainInitialDiscoveryStatus"
        },
        "onlyEnableTypes": {
          "type": "array",
          "description": "When non-empty, only enable these resource types in the domain",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Represents an autonomous domain provider"
    },
    "JArray": {
      "type": "object",
      "required": ["arr"],
      "properties": {
        "arr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JValue"
          }
        }
      }
    },
    "Function1RequestContextFutureRouteResult": {
      "type": "object"
    },
    "DiscoveryApiSettings": {
      "type": "object",
      "properties": {
        "serverTimeoutMs": {
          "type": "integer",
          "format": "int64",
          "description": "Timeout for HTTP client when connecting to a server"
        },
        "maxConnections": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent http connections"
        },
        "maxHttpRetries": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum retries when an http request fails"
        },
        "maxRedirections": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum redirections for http request"
        },
        "idleTimeoutMs": {
          "type": "integer",
          "format": "int64",
          "description": "Time to keep an idle connection open before disconnecting it"
        }
      },
      "description": "Settings on API client for resource discovery"
    },
    "SubDomainResourceSet": {
      "type": "object",
      "required": ["resources"],
      "properties": {
        "resources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApplicationSliceProp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the application slice"
        },
        "description": {
          "type": "string",
          "description": "Description of the application slice"
        },
        "extendable": {
          "type": "boolean",
          "description": "Whether the application slice is extendable"
        },
        "holderTenantId": {
          "type": "string",
          "description": "The id of the tenant holding the slice"
        },
        "ownerTenantId": {
          "type": "string",
          "description": "The id of the tenant owning the slice"
        },
        "parentId": {
          "type": "string",
          "format": "uuid",
          "description": "The id of the parent application slice"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether the application slice is the default slice of the owner tenant"
        }
      },
      "description": "Information describing a to-be-created application slice"
    },
    "Operation": {
      "type": "object"
    },
    "DomainSettings": {
      "type": "object",
      "properties": {
        "connection_status": {
          "type": "boolean",
          "description": "Specifies if maintenance of domain's connection status is supported"
        },
        "initial_discovery_status": {
          "type": "boolean",
          "description": "Specifies if maintenance of domain's initial discovery status is supported"
        },
        "metaInfoDiscoveryStrategy": {
          "description": "Specifies the Domain meta information polling strategy",
          "$ref": "#/definitions/DomainMetaInfoDiscoveryStrategy$"
        },
        "minInterUpsertIntervalMs": {
          "type": "number",
          "description": "Specifies the minimal inter-call interval bpocore should honor when upserting the Domain"
        },
        "rpType": {
          "description": "Specifies the RP Type",
          "$ref": "#/definitions/Value"
        },
        "asyncDeviceTypes": {
          "type": "array",
          "description": "Specifies the Resource Type IDs that use async discovery strategy",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Settings to declare how domain should be managed"
    },
    "Tuple2StringJValue": {
      "type": "object",
      "required": ["_1", "_2"],
      "properties": {
        "_1": {
          "type": "string"
        },
        "_2": {
          "$ref": "#/definitions/JValue"
        }
      }
    },
    "ResourceProp": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "The type of product for this resource"
        },
        "orderId": {
          "type": "string",
          "description": "If applicable, the order containing this resource"
        },
        "label": {
          "type": "string",
          "description": "Textual label"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of this resource"
        },
        "properties": {
          "description": "Properties",
          "$ref": "#/definitions/JObject"
        },
        "providerResourceId": {
          "type": "string",
          "description": "Identifier of the resource in provider's context"
        },
        "discovered": {
          "type": "boolean",
          "description": "Is this resource discovered"
        },
        "shared": {
          "type": "boolean",
          "description": "Is resource shared?"
        },
        "sharingPermissionId": {
          "type": "string",
          "description": "The sharing permission of the resource"
        },
        "desiredOrchState": {
          "type": "string",
          "description": "Desired orchestration state",
          "enum": [
            "active",
            "assembled",
            "requested",
            "scheduled",
            "terminated",
            "unspecified"
          ]
        },
        "nativeState": {
          "type": "string",
          "description": "Native (type specific) state"
        },
        "orchState": {
          "type": "string",
          "description": "Current state of the resource in the orchestrator",
          "enum": [
            "unknown",
            "unspecified",
            "requested",
            "scheduled",
            "promoting",
            "assembling",
            "assembled",
            "activating",
            "failed",
            "active",
            "inactive",
            "terminating",
            "terminated"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Reason for the orchestration state"
        },
        "tags": {
          "type": "object",
          "description": "Tags",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "autoClean": {
          "type": "boolean",
          "description": "Free up any resources automatically upon any activation failure"
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        },
        "subDomainId": {
          "type": "string",
          "format": "uuid",
          "description": "Sub-domain ID"
        }
      },
      "description": "Information describing a resource creation request"
    },
    "TypeArtifactDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Uniquely identifier of artifact"
        },
        "title": {
          "type": "string",
          "description": "Title (label) of the artifact"
        },
        "artifactType": {
          "type": "string",
          "description": "Type of the artifact"
        },
        "description": {
          "type": "string",
          "description": "Description of the artifact"
        },
        "version": {
          "type": "string",
          "description": "Version level of the artifact"
        },
        "derivedFrom": {
          "type": "array",
          "description": "URI of model artifacts from which this artifact is derived from",
          "items": {
            "type": "string"
          }
        },
        "experimental": {
          "type": "boolean",
          "description": "Experimental type artifact"
        }
      },
      "description": "Information describing a single type artifact"
    },
    "AppSliceSubDomains": {
      "type": "object",
      "required": ["subDomains"],
      "properties": {
        "subDomains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListReply[UnresolvedRelationship]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/UnresolvedRelationship"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "TagKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Tag key"
        },
        "description": {
          "type": "string",
          "description": "Textual description of tag key"
        },
        "autoIndexed": {
          "type": "boolean",
          "description": "Are tag value for this key auto-indexed?"
        }
      },
      "description": "Tag key with description"
    },
    "ValidationItem": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "HTTP status code for the result"
        },
        "pointer": {
          "type": "string",
          "description": "JSON pointer to the source of the issue"
        },
        "detail": {
          "type": "string",
          "description": "Detailed description of the validation"
        },
        "validator": {
          "type": "string",
          "description": "Validator that produced the status"
        }
      }
    },
    "DomainConnectionStatus": {
      "type": "object"
    },
    "CountReply": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of items in scope"
        },
        "bounded": {
          "type": "boolean",
          "description": "Whether the count is bounded by the limit"
        }
      },
      "description": "Information describing count result"
    },
    "JObject": {
      "type": "object",
      "required": ["obj"],
      "properties": {
        "obj": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple2StringJValue"
          }
        }
      }
    },
    "TagValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Tag value"
        },
        "key": {
          "type": "string",
          "description": "Tag key"
        },
        "description": {
          "type": "string",
          "description": "Description of the meaning of a tag value"
        }
      },
      "description": "Tag value with description"
    },
    "DomainInitialDiscoveryStatus": {
      "type": "object"
    },
    "SharingPermission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the permission"
        },
        "label": {
          "type": "string",
          "description": "Label of the permission"
        },
        "description": {
          "type": "string",
          "description": "Description of the permission"
        },
        "visibleToSubTenants": {
          "type": "boolean",
          "description": "Whether subject is visible to subtenants if shared"
        },
        "updatableBySubTenants": {
          "type": "boolean",
          "description": "Whether subject is updatable by subtenants if shared"
        },
        "deletableBySubTenants": {
          "type": "boolean",
          "description": "Whether subject is deletable by subtenants if shared"
        },
        "isBuiltIn": {
          "type": "boolean",
          "description": "Whether this is a built-in permission"
        }
      },
      "description": "Information describing a sharing permission"
    },
    "ApplicationSlice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique ID of the application slice"
        },
        "name": {
          "type": "string",
          "description": "Name of the application slice"
        },
        "description": {
          "type": "string",
          "description": "Description of the application slice"
        },
        "extendable": {
          "type": "boolean",
          "description": "Whether the application slice is extendable"
        },
        "holderTenantId": {
          "type": "string",
          "description": "The id of the tenant holding the slice"
        },
        "ownerTenantId": {
          "type": "string",
          "description": "The id of the tenant owning the slice"
        },
        "parentId": {
          "type": "string",
          "format": "uuid",
          "description": "The id of the parent application slice"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether the application slice is the default slice of the owner tenant"
        }
      },
      "description": "Information describing an application slice"
    },
    "SubDomainProp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the sub-domain"
        },
        "description": {
          "type": "string",
          "description": "Description of the sub-domain"
        },
        "domainId": {
          "type": "string",
          "description": "ID of the domain this sub-domain belongs to"
        },
        "scope": {
          "type": "string",
          "description": "Scope of the sub-domain",
          "enum": ["APPLICATION", "TENANT", "COMMON"]
        },
        "decomposable": {
          "type": "boolean",
          "description": "Whether the sub-domain can be decomposped"
        },
        "assignable": {
          "type": "boolean",
          "description": "Whether the sub-domain can be re-assigned"
        },
        "applicationSlices": {
          "type": "array",
          "description": "Set of application slices this sub-domain is in",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "extendedApplicationSlices": {
          "type": "array",
          "description": "Set of application slices for which this sub-domain acts as an extended sub-domain",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "parentId": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the container sub-domain, if applicable"
        }
      },
      "description": "Information describing a to-be-created sub-domain"
    },
    "MarkerResyncScopeFilter": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Marker Filter Data"
    },
    "ResyncReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the resync"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "HTTP status code for the reply"
        },
        "message": {
          "type": "string",
          "description": "Message of the response"
        },
        "source": {
          "type": "string",
          "description": "Source that produced the reply"
        },
        "properties": {
          "description": "Optional properties of the reply",
          "$ref": "#/definitions/JObject"
        },
        "items": {
          "type": "array",
          "description": "Optional items of the reply",
          "items": {
            "$ref": "#/definitions/ResyncReplyItem"
          }
        }
      },
      "description": "Information describing the reply of a resync request"
    },
    "ListReply[ResourceOperation]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ResourceOperation"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ValidationIssue": {
      "type": "object",
      "required": ["category", "moduleSource"],
      "properties": {
        "moduleSource": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/Value"
        },
        "message": {
          "type": "string"
        },
        "report": {
          "$ref": "#/definitions/JValue"
        }
      }
    },
    "DomainMetaInfoDiscoveryStrategy$": {
      "type": "object"
    },
    "ListReply[ResourceInterface]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ResourceInterface"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ListReply[ResourceProvider]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ResourceProvider"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResourceOperationProp": {
      "type": "object",
      "properties": {
        "interface": {
          "type": "string",
          "description": "ID of the interface"
        },
        "title": {
          "type": "string",
          "description": "Title of the operation"
        },
        "description": {
          "type": "string",
          "description": "Description of the operation"
        },
        "inputs": {
          "description": "Inputs of the operation",
          "$ref": "#/definitions/JObject"
        },
        "resourceStateConstraints": {
          "description": "Constraints of the resource state for this operation to execute",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Information describing a resource operation creation request"
    },
    "ResyncStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the resync request"
        },
        "full": {
          "type": "boolean",
          "description": "Whether the resync is a full one"
        },
        "state": {
          "description": "State of the resync request",
          "$ref": "#/definitions/Value"
        },
        "requestScope": {
          "description": "The scope of the user request",
          "$ref": "#/definitions/ResyncRequestScope"
        },
        "markerScope": {
          "description": "The scope of the user request",
          "$ref": "#/definitions/MarkerResyncScope"
        },
        "eventsReceived": {
          "type": "integer",
          "format": "int32",
          "description": "Number of events received"
        },
        "eventsProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of events processed"
        },
        "pendingTerminateRequest": {
          "type": "number",
          "description": "Number of resources to terminate"
        },
        "processedTerminateRequest": {
          "type": "number",
          "description": "Number of termination processed"
        },
        "detail": {
          "type": "string",
          "description": "Detail about the status"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Detail about the status"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Detail about the status"
        }
      },
      "description": "Information describing the status of a resync request"
    },
    "ResourceTypeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource type"
        },
        "title": {
          "type": "string",
          "description": "Resource type name"
        },
        "description": {
          "type": "string",
          "description": "Resource type description"
        },
        "version": {
          "type": "string",
          "description": "Resource type version identifier"
        },
        "derivedFrom": {
          "type": "array",
          "description": "URI of model artifacts from which this artifact is derived from",
          "items": {
            "type": "string"
          }
        },
        "experimental": {
          "type": "boolean",
          "description": "Experimental type artifact"
        },
        "abstract": {
          "type": "boolean",
          "description": "Abstract type artifact"
        },
        "model": {
          "description": "Resource type content",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Meta-information and content for a resource type"
    },
    "Tuple2": {
      "type": "object",
      "required": ["_1", "_2"],
      "properties": {
        "_1": {
          "type": "number"
        },
        "_2": {
          "type": "number"
        }
      }
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the relationship (optional/ignored on calls to create)"
        },
        "relationshipTypeId": {
          "type": "string",
          "description": "URI of relationship type"
        },
        "properties": {
          "description": "Relationship properties",
          "$ref": "#/definitions/JObject"
        },
        "sourceId": {
          "type": "string",
          "description": "UUID of source resource"
        },
        "requirementName": {
          "type": "string",
          "description": "Requirement name in source resource"
        },
        "targetId": {
          "type": "string",
          "description": "UUID of target resource"
        },
        "capabilityName": {
          "type": "string",
          "description": "Capability name in target resource"
        },
        "orchState": {
          "type": "string",
          "description": "Current state of the resource in the orchestrator",
          "enum": [
            "unknown",
            "unspecified",
            "requested",
            "scheduled",
            "promoting",
            "assembling",
            "assembled",
            "activating",
            "failed",
            "active",
            "inactive",
            "terminating",
            "terminated"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Reason for the orchestration state"
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        }
      },
      "description": "Information describing a single relationship"
    },
    "JValue": {
      "type": "object"
    },
    "ListReply[ResourceHistoryEvent]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/ResourceHistoryEvent"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "MarkerResyncScope": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "filterParam": {
          "$ref": "#/definitions/MarkerResyncScopeFilter"
        },
        "providerResourceId": {
          "type": "string"
        }
      }
    },
    "ListReply[SubDomain]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/SubDomain"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResourceTypeDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource type"
        },
        "title": {
          "type": "string",
          "description": "Resource type name"
        },
        "description": {
          "type": "string",
          "description": "Resource type description"
        },
        "version": {
          "type": "string",
          "description": "Resource type version identifier"
        },
        "derivedFrom": {
          "type": "array",
          "description": "URI of model artifacts from which this artifact is derived from",
          "items": {
            "type": "string"
          }
        },
        "experimental": {
          "type": "boolean",
          "description": "Experimental type artifact"
        },
        "abstract": {
          "type": "boolean",
          "description": "Abstract type artifact"
        }
      },
      "description": "Meta-information describing a resource type"
    },
    "ListReply[DomainType]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of requested items (in current page if paged)",
          "items": {
            "$ref": "#/definitions/DomainType"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items in the reply (across all pages if applicable)"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Identifier used to fetch the next page of results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset within the total count of results where this current items list starts"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Limit on the number of items included in a single response page"
        }
      },
      "title": "ListReply",
      "description": "Standard reply envelope containing a list of resources"
    },
    "ResourceOperation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the operation"
        },
        "resourceId": {
          "type": "string",
          "description": "ID of the resource"
        },
        "interface": {
          "type": "string",
          "description": "ID of the interface"
        },
        "title": {
          "type": "string",
          "description": "Title of the operation"
        },
        "description": {
          "type": "string",
          "description": "Description of the operation"
        },
        "inputs": {
          "description": "Inputs of the operation",
          "$ref": "#/definitions/JObject"
        },
        "outputs": {
          "description": "Outputs of the operation",
          "$ref": "#/definitions/JObject"
        },
        "state": {
          "type": "string",
          "description": "Current state of the operation",
          "enum": [
            "requested",
            "pending",
            "scheduled",
            "executing",
            "successful",
            "failed",
            "cancelled"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Reason for the operation state"
        },
        "progress": {
          "description": "Describes any progress towards completion that the operation has made",
          "$ref": "#/definitions/JArray"
        },
        "providerData": {
          "description": "Provider custom data",
          "$ref": "#/definitions/JObject"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the operation was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the operation was last updated"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Strictly increasing revision number, incremented every update"
        },
        "resourceStateConstraints": {
          "description": "Constraints of the resource state for this operation to execute",
          "$ref": "#/definitions/JObject"
        },
        "executionGroup": {
          "type": "string",
          "description": "Execution group of the operation"
        }
      },
      "description": "Information describing a resource operation"
    }
  }
}
