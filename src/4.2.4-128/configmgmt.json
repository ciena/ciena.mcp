{
  "swagger": "2.0",
  "info": {
    "description": "Specification for Network element configuration",
    "version": "1.0",
    "title": "Network element configuration"
  },
  "basePath": "/",
  "tags": [
    {
      "name": "Batch Management v1",
      "description": "Manage Batch of Network Elements"
    },
    {
      "name": "Batch Management v2",
      "description": "Manage Batch of Network Elements"
    },
    {
      "name": "Configuration Details v1",
      "description": "Information of Configuration Management Operation"
    },
    {
      "name": "Create BFD session v1",
      "description": "Multihop BFD session management"
    },
    {
      "name": "Custom Scripts v1",
      "description": "Manage Custom Scripts"
    },
    {
      "name": "Custom Scripts v2",
      "description": "Manage Custom Scripts"
    },
    {
      "name": "DOC v1",
      "description": "Manages DOC configuration of NEs"
    },
    {
      "name": "Download v1",
      "description": "Download Ne Backups"
    },
    {
      "name": "Fallback Users v1",
      "description": "Manage Fallback Users"
    },
    {
      "name": "Indexing",
      "description": "Manage ReIndexing"
    },
    {
      "name": "Network Element Configuration Job Management v1",
      "description": "Manage network element configuration jobs"
    },
    {
      "name": "Network Elements Maintenance Details Resource v1",
      "description": "Details of Network elements maintenance"
    },
    {
      "name": "Network Elements Upgrade Details Resource v1",
      "description": "Network elements upgrade details"
    },
    {
      "name": "Port Provisioning v1",
      "description": "Port Provisioning "
    },
    {
      "name": "Profiles v1",
      "description": "Manage Configuration NE Maintenance Profiles"
    },
    {
      "name": "Profiles v2",
      "description": "Manage Configuration NE Maintenance Profiles"
    },
    {
      "name": "Schedule Management v1",
      "description": "Manage schedules of Network Elements"
    },
    {
      "name": "Scheduls Assign NE v1",
      "description": "Scheduls Assign NE v1"
    },
    {
      "name": "Script Management v1",
      "description": "Manage Configuration Management Script"
    },
    {
      "name": "Script Profiles v1",
      "description": "Manage Script Profiles"
    },
    {
      "name": "Script Profiles v2",
      "description": "Manage Script Profiles"
    },
    {
      "name": "Upgrade operation v1",
      "description": "Upgrade information of the NEs"
    },
    {
      "name": "Upgrade operations v1",
      "description": "Upgrade operations V1"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/configmgmt/api/v1/backupImages": {
      "get": {
        "tags": ["Configuration Details v1"],
        "summary": "Retrieve all available Backups given the Network Element.",
        "description": "Get all Backups of given Network Element as a JSON list of objects \n<p>Prerequiste: Successfull Backup operation must executed to retrieve available images.",
        "operationId": "getAllBackupImages",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "nename",
            "in": "query",
            "description": "Retrieve all backup images for an NE.",
            "required": true,
            "type": "string"
          },
          {
            "name": "netype",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of backup images for a Network Element",
            "schema": {
              "$ref": "#/definitions/NeBackupImagesResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve backup images",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of backup images failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/backupRestoreStatus": {
      "get": {
        "tags": ["Configuration Details v1"],
        "summary": "Retrieve Backup and Restore operation status of Network Elements",
        "description": "List of Network Element(s) Backup and Restore status returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getNeBackupRestoreStatus",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of Network Element(s) Backup and Restore status",
            "schema": {
              "$ref": "#/definitions/NeBackupRestoreStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve Backup and Restore status",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of Backup and Restore status failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/batches": {
      "get": {
        "tags": ["Batch Management v1"],
        "summary": "Retrieve existing Batches.",
        "description": "Get all existing Batches as a JSON list of objects. \n<p>Prerequiste: None.",
        "operationId": "getAllConfigMgmtBatches",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Batches fetched",
            "schema": {
              "$ref": "#/definitions/BatchStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Batches are not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/batches/{batchId}": {
      "get": {
        "tags": ["Batch Management v1"],
        "summary": "Retrieve Batch given the Batch Id.",
        "description": "Get Batch as a JSON object of given Batch Id. \n<p>Prerequiste: Batches must exist for specified batchId.",
        "operationId": "getConfigMgmtBatch",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId used for lookup inside created batch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Batch fetched",
            "schema": {
              "$ref": "#/definitions/BatchStatus"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Batch is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": ["Batch Management v1"],
        "summary": "Updates Batch attributes for a batch",
        "description": "Updates Batch attributes for a batch. \n<p>Prerequiste: Batch must exist.",
        "operationId": "updateBatches",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The batch attributes to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchStatus"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Update batch associated with given batchId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Batch updated",
            "schema": {
              "$ref": "#/definitions/BatchStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/customScripts": {
      "get": {
        "tags": ["Custom Scripts v1"],
        "summary": "Retrieve custom scripts",
        "description": "Custom scripts returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getCustomScripts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "typeGroup",
            "in": "query",
            "description": "TypeGroup of the custom scripts",
            "required": false,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "Protocol type of the custom scripts",
            "required": false,
            "type": "string",
            "enum": ["cli", "tl1", "netconf"]
          }
        ],
        "responses": {
          "200": {
            "description": "List of custom scripts",
            "schema": {
              "$ref": "#/definitions/CustomScriptList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of custom scripts failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Custom Scripts v1"],
        "summary": "Upload a custom script definitions",
        "description": "Upload a script into cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "uploadCustomScript",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The Input stream of the custom script file to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "typeGroup",
            "in": "formData",
            "description": "TypeGroup for which this custom script file is uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "formData",
            "description": "Protocol type of the custom script file",
            "required": true,
            "type": "string",
            "enum": ["cli", "tl1"]
          },
          {
            "name": "scriptName",
            "in": "formData",
            "description": "Name of the custom script",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "description of custom script",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomScriptList"
            }
          },
          "201": {
            "description": "Custom script successfully uploaded",
            "schema": {
              "$ref": "#/definitions/CustomScriptList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/customScripts/scriptStatus": {
      "get": {
        "tags": ["Custom Scripts v1"],
        "summary": "Retrieve custom script status of Network Elements",
        "description": "Custom scripts status returned as a JSON list of objects for Network elements \n <p>Prerequiste: None.",
        "operationId": "getCustomScriptsStatus",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Custom scripts status for list of Network Element(s)",
            "schema": {
              "$ref": "#/definitions/CMOperationStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of custom scripts status failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/customScripts/{id}": {
      "get": {
        "tags": ["Custom Scripts v1"],
        "summary": "download a custom script definition",
        "description": "download a custom script from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "downloadCustomScript",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom script id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom script successfully downloaded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Custom Scripts v1"],
        "summary": "deleteCustomScript a script definition",
        "description": "deleteCustomScript a script from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "deleteCustomScript",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom script id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom script successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/deleteBatch": {
      "post": {
        "tags": ["Batch Management v1"],
        "summary": "Delete the Batches given the batchRemoveRequest.",
        "description": "Delete the Batches for given Batch Ids. \n <p>Prerequisites: The following attributes should be specified in the request:<ul><li>id - Any string<li>batchIds - The list of Batch Ids comma separated</ul>",
        "operationId": "deleteConfigMgmtBatch",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Batch removal request having list of batch ids.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchRemoveRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Batches are deleted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Batches are not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/doc": {
      "get": {
        "tags": ["DOC v1"],
        "summary": "Retrieve DOC configuration of NEs",
        "description": "Get DOC configuration for NEs \n<p>Attributes: <ul><li>networkConstructNames - List of comma networkConstructs name </ul><p>Prerequiste: None.",
        "operationId": "getDOCs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstructNames",
            "in": "query",
            "description": "Networkconstruct Names for which config DOCs to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config DOCs fetched",
            "schema": {
              "$ref": "#/definitions/ConfigDOCResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["DOC v1"],
        "summary": "Edit DOCs configuration (enable/disable) on NEs",
        "description": "Edit DOCs configuration on NEs \n<p>Prerequiste: The following attributes should be specified in the post request:<ul><li>operationType - the operation to invoke enable/disable <p>docDetails \n<li>networkConstructName - The name of Network Element on which operation is invoked<li>docNames - Array of Doc names on which operation is invoked</ul>",
        "operationId": "editDOCs",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Edit DOCs",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditDOC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Edit DOCs successful",
            "schema": {
              "$ref": "#/definitions/ConfigDOCResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/jobs": {
      "get": {
        "tags": ["Network Element Configuration Job Management v1"],
        "summary": "Retrieve job status of all executed or scheduled jobs.",
        "description": "Get jobs status as a list of JSON objects of all executed or scheduled jobs given the job id \n<p>Prerequiste: None.",
        "operationId": "getAllConfigMgmtJobs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "scriptName",
            "in": "query",
            "description": "The job name used for current status of a config job lookup",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all job status",
            "schema": {
              "$ref": "#/definitions/ConfigMgmtJobResponse"
            }
          },
          "404": {
            "description": "Network element configuration job is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Network Element Configuration Job Management v1"],
        "summary": "Execute network element configuration job",
        "description": "This API validates user input and execute or schedule a network element configuration job. \n<p>Prerequiste: The following attributes should be specified in the post request:<ul><li>maxConnections - maximum connection <li>scheduleTime - time to when the job should be executed<li>scriptName - script name <li>profileName - profile name <li>type - type of job (eg: job)<li>neName - network element name<li>neType - network element type</ul>",
        "operationId": "createConfigMgmtJob",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Execute job user input as JSON wrapper object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Network element configuration job is executed and scheduled."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/jobs/{jobId}": {
      "get": {
        "tags": ["Network Element Configuration Job Management v1"],
        "summary": "Retrieve the job status given the job id.",
        "description": "Get the job status as a JSON object given the job id \n<p>Prerequiste: Jobs must exist for specified jobId.",
        "operationId": "getConfigMgmtJob",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job execution id used for current status of a config job lookup",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve job status",
            "schema": {
              "$ref": "#/definitions/ConfigMgmtJobResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Network element configuration job is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Network Element Configuration Job Management v1"],
        "summary": " Delete a job",
        "description": "Delete a job \n<p>Prerequiste: Jobs must exist for specified jobId.",
        "operationId": "deleteConfigMgmtJob",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job execution id used for current status of a config job lookup",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Job deleted"
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Network element configuration job is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "patch": {
        "tags": ["Network Element Configuration Job Management v1"],
        "summary": "Update a job based on the jobId",
        "description": "This API updates the config job execution attributes.\n <p>Prerequiste: Jobs must exist for specified jobId.",
        "operationId": "patchConfigMgmtJobPatch",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job execution id used for current status of a config job lookup",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update config job execution user input attributes as JSON wrapper object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config job attributes are updated and scheduled",
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/mhopbfdsessions": {
      "get": {
        "tags": ["Create BFD session v1"],
        "summary": "Get BFD session",
        "description": "This API returns a BFD session created on the NE. \n<p>Prerequisites: The following attributes should be specified in the get request:<ul><li>sourceNE - name of the source NE <li>neighbourNE (Optional) - name of the remote NE</ul>",
        "operationId": "getBFDSessions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sourceNE",
            "in": "query",
            "description": "Source NE",
            "required": true,
            "type": "string"
          },
          {
            "name": "remoteNE",
            "in": "query",
            "description": "(Optional) Remote NE",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "BFD sessions retrieved"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Create BFD session v1"],
        "summary": "Create BFD session",
        "description": "This API creates a BFD session between two NEs. \n<p>Prerequisites: The following attributes should be specified in the post request:<ul><li>bfdSessionName - name of the BFD session <li>sourceNE - name or ip of the source NE <li>neighbourNE - name or ip of the neighbour NE<li>bfdProfileName - name of bfd profile to be used (optional parameter)</ul>",
        "operationId": "createBFDSession",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create BFD session",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBFDSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create BFD session request is executed."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/neMaintenanceDetails": {
      "get": {
        "tags": ["Network Elements Maintenance Details Resource v1"],
        "summary": "Retrieve Maintenance details of Network Elements",
        "description": "List of Network Element(s) Maintenance details returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getNetworkElementsMaintenance",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied. Fields require full path (e.g. data.attributes.name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of networkConstruct Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of networkConstruct names",
            "required": false,
            "type": "string"
          },
          {
            "name": "longName",
            "in": "query",
            "description": "(Optional) List of comma separated longName values",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "(Optional) List of device displayName values",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": "List of Management Session Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "(Optional) List of networkConstruct resourceTypes",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeGroup",
            "in": "query",
            "description": "(Optional) List of networkConstruct typeGroups",
            "required": false,
            "type": "string"
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "(Optional) Ip Address of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "associationState",
            "in": "query",
            "description": "(Optional) List of networkConstruct associationStates. The allowed values are: GOA, LOA",
            "required": false,
            "type": "string"
          },
          {
            "name": "syncState",
            "in": "query",
            "description": "(Optional) List of networkConstruct syncStates. The allowed values are: notSynchronized, synchronizing, synchronized, failed, aborted, deleting, deleteFailed",
            "required": false,
            "type": "string"
          },
          {
            "name": "physicalLocationId",
            "in": "query",
            "description": "(Optional) Physical location id",
            "required": false,
            "type": "string"
          },
          {
            "name": "subnetName",
            "in": "query",
            "description": "(Optional) SubnetName of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "softwareActiveVersion",
            "in": "query",
            "description": "(Optional) List of networkConstruct software versions",
            "required": false,
            "type": "string"
          },
          {
            "name": "recentOperation",
            "in": "query",
            "description": "(Optional) List of Recent operations. The allowed values are: Download, Upgrade, PostUpgrade, CommitUpgrade, CancelUpgrade, FULLUPGRADE, BACKUP, RESTORE, SCRIPT, CUSTOM_SCRIPT",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextOperation",
            "in": "query",
            "description": "(Optional) List of Next operations. The allowed values are: Download, Upgrade, PostUpgrade, CommitUpgrade, CancelUpgrade, FULLUPGRADE, BACKUP, RESTORE, SCRIPT, CUSTOM_SCRIPT",
            "required": false,
            "type": "string"
          },
          {
            "name": "recentOperationState",
            "in": "query",
            "description": "(Optional) Recent operation state of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "recentOperationProgressState",
            "in": "query",
            "description": "(Optional) Recent operation progress state of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "softwareAvailableVersion",
            "in": "query",
            "description": "(Optional) Software version available on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "backupSchedule",
            "in": "query",
            "description": "(Optional) List of backup schedules for Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "upgradeSchedule",
            "in": "query",
            "description": "(Optional) List of upgrade schedules for Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "customScriptSchedule",
            "in": "query",
            "description": "(Optional) List of customScript schedules for Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromRecentOperationTime",
            "in": "query",
            "description": "(Optional) Time of recent operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "toRecentOperationTime",
            "in": "query",
            "description": "(Optional) Time of recent operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromNextOperationTime",
            "in": "query",
            "description": "(Optional) Time of next operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "toNextOperationTime",
            "in": "query",
            "description": "(Optional) Time of next operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourcePartitionInfo",
            "in": "query",
            "description": "(Optional) Resource partition info",
            "required": false,
            "type": "string"
          },
          {
            "name": "associationStateQualifier",
            "in": "query",
            "description": "(Optional) Association state qualifier. The allowed values are MANUAL, SYSTEM, NETWORK",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. Fields require full path (i.e. data.attributes.field). A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: resourceType, associationState, syncState, softwareActiveVersion, associationStateQualifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Network Element(s) maintenance details",
            "schema": {
              "$ref": "#/definitions/NeMaintenanceDetailsList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve Network element maintenance details",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of Network element maintenance details failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/neUpgradeDetails": {
      "get": {
        "tags": ["Network Elements Upgrade Details Resource v1"],
        "summary": "Retrieve upgrade details of Network Elements",
        "description": "List of Network Element(s) upgrade details returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getNetworkElementsMaintenance",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied. Fields require full path (e.g. data.attributes.name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of networkConstruct Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of networkConstruct names",
            "required": false,
            "type": "string"
          },
          {
            "name": "longName",
            "in": "query",
            "description": "(Optional) List of comma separated longName values",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "(Optional) List of device displayName values",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": "List of Management Session Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "(Optional) List of networkConstruct resourceTypes",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeGroup",
            "in": "query",
            "description": "(Optional) List of networkConstruct typeGroups",
            "required": false,
            "type": "string"
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "(Optional) Ip Address of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "associationState",
            "in": "query",
            "description": "(Optional) List of networkConstruct associationStates. The allowed values are: GOA, LOA",
            "required": false,
            "type": "string"
          },
          {
            "name": "syncState",
            "in": "query",
            "description": "(Optional) List of networkConstruct syncStates. The allowed values are: notSynchronized, synchronizing, synchronized, failed, aborted, deleting, deleteFailed",
            "required": false,
            "type": "string"
          },
          {
            "name": "physicalLocationId",
            "in": "query",
            "description": "(Optional) Physical location id",
            "required": false,
            "type": "string"
          },
          {
            "name": "subnetName",
            "in": "query",
            "description": "(Optional) SubnetName of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "softwareActiveVersion",
            "in": "query",
            "description": "(Optional) List of networkConstruct software versions",
            "required": false,
            "type": "string"
          },
          {
            "name": "softwareAvailableVersion",
            "in": "query",
            "description": "(Optional) Software version available on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "upgradeSchedules",
            "in": "query",
            "description": "(Optional) List of upgrade schedules for Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "releaseMgmtSchedules",
            "in": "query",
            "description": "(Optional) List of releaseMgmt schedules for Network Constructs",
            "required": false,
            "type": "string"
          },
          {
            "name": "upgradeStage",
            "in": "query",
            "description": "(Optional) List of upgrade stages for Network Constructs",
            "required": false,
            "type": "string"
          },
          {
            "name": "upgradeStatus",
            "in": "query",
            "description": "(Optional) List of upgrade status for Network Constructs",
            "required": false,
            "type": "string"
          },
          {
            "name": "manualInvokeOnCards",
            "in": "query",
            "description": "(Optional) Network Constructs with manual Invoke ",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourcePartitionInfo",
            "in": "query",
            "description": "(Optional) Resource partition info",
            "required": false,
            "type": "string"
          },
          {
            "name": "associationStateQualifier",
            "in": "query",
            "description": "(Optional) Association state qualifier. The allowed values are MANUAL, SYSTEM, NETWORK",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. Fields require full path (i.e. data.attributes.field). A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: resourceType, associationState, syncState, softwareActiveVersion, associationStateQualifier, upgradeStage, upgradeStatus, manualInvokeOnCards",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Network Element(s) upgrade details",
            "schema": {
              "$ref": "#/definitions/NeUpgradeDetailsList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve Network element upgrade details",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of Network element upgrade details failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/neUpgradeStatus": {
      "get": {
        "tags": ["Upgrade operation v1"],
        "summary": "Retrieve upgrade operation status of a Network Element based on ncId and operation type",
        "description": "Upgrade status returned as a JSON object indicating upgrade status of a Network element. \n <p>Prerequiste: None.",
        "operationId": "getNeUpgradeStatus",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ncid",
            "in": "query",
            "description": "Management session id of an NE.",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationtype",
            "in": "query",
            "description": "Operation type of job execution on NE.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Upgrade status of a Network Element",
            "schema": {
              "$ref": "#/definitions/CMOperationStatus"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Retrieval of upgrade status failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/nes/{batchId}": {
      "get": {
        "tags": ["Batch Management v1"],
        "summary": "Retrieve Network Elements given the Batch Id.",
        "description": "Get all Network Elements given Batch Id as a JSON list of objects. \n<p>Prerequiste: Batches must exist for specified batchId.",
        "operationId": "getBatchedNes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Retrieve all NEs associated with a batchId",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "List of NEs associated with batch",
            "schema": {
              "$ref": "#/definitions/NeBackupRestoreStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve batched NEs",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of batched NEs failed.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/port/mappings": {
      "get": {
        "tags": ["Port Provisioning v1"],
        "summary": "Retrieve pec code maaping definitions",
        "description": "PecCode mapping definitions returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getAllPortRateMappings",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of pec code mapping definitions",
            "schema": {
              "$ref": "#/definitions/PortMappingList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Retrieval of pec code mapping definitions failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Port Provisioning v1"],
        "summary": "Upload a pec code mapping definition",
        "description": "Upload a pec code mapping definition into cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "uploadPortRateMappingFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The Input stream of the pec code mapping definition to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the pec code mapping definition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Pec code mapping definition successfully uploaded",
            "schema": {
              "$ref": "#/definitions/PortMapping"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/port/mappings/{id}": {
      "get": {
        "tags": ["Port Provisioning v1"],
        "summary": "download a pec code mapping definition",
        "description": "download a pec code mapping definition from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "downloadPortRateMappping",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pec code mapping definition id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pec code mapping definition successfully downloaded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Port Provisioning v1"],
        "summary": "Delete pec code mapping definition",
        "description": "Delete pec code mapping definition from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "deletePortRateMapping",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pec code mapping definition id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pec code mapping definition successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/port/pecs": {
      "get": {
        "tags": ["Port Provisioning v1"],
        "summary": "Retrieve pec code definitions",
        "description": "Pec code definitions returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getAllPecCodeMappings",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of pec code definitions",
            "schema": {
              "$ref": "#/definitions/PortMappingList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Retrieval of pec code definitions failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Port Provisioning v1"],
        "summary": "Upload a pec code definition",
        "description": "Upload a pec code definition into cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "uploadPecCodeFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The Input stream of the pec code definition to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the pec code definition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Pec code definition successfully uploaded",
            "schema": {
              "$ref": "#/definitions/PortMapping"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/port/pecs/{id}": {
      "get": {
        "tags": ["Port Provisioning v1"],
        "summary": "Download a pec code definition",
        "description": "download a pec code definition from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "downloadPecCodeMapping",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pec code definition id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pec code definition successfully downloaded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Port Provisioning v1"],
        "summary": "Delete pecCode definition",
        "description": "Delete pecCode definition from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "deletePecCodeMapping",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pec code definition id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pec code definition successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/port/provision": {
      "post": {
        "tags": ["Port Provisioning v1"],
        "summary": "Port provisioning",
        "description": "Port provisioning. \n <p>Prerequiste: None.\"",
        "operationId": "provisionPort",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provisioning Details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortProvisioningDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pec code mapping file successfully uploaded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/profiles": {
      "get": {
        "tags": ["Profiles v1"],
        "summary": "Retrieve profiles",
        "description": "Get profiles informations for profileType or typeGroup \n<p>Attributes: <ul><li>name - profile name <li>profileType - profile type <li>protocolType - protocol used to do file transfer (here supported protocolType is ftp, sftp and https)<li>storageMethod - Used to specify if to use database or file system<li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<p>\n Additional attributes: <li>typeGroup - Used for network element typeGroup in profile type upgrade<li>releaseNumber - Used for network element release number for profile type upgrade<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore<li>sshPort - used for profile type backup_restore and upgrade \n<li>profileDescription - profile description</ul><p>Prerequiste: None.",
        "operationId": "getFtpProfiles",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileType",
            "in": "query",
            "description": "The NE Maintenance profiles by profile type to be retrieved.",
            "required": false,
            "type": "string",
            "enum": ["backup_restore", "upgrade"]
          },
          {
            "name": "neType",
            "in": "query",
            "description": "The NE Maintenance profiles by typeGroup to be retrieved.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiles fetched",
            "schema": {
              "$ref": "#/definitions/FtpProfileResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Profiles v1"],
        "summary": "Trigger the creation of NE Maintenance profile",
        "description": "The Api to create Profile as a JSON Object \n <p>Prerequiste: The following attributes should be specified in the post request:<ul><li>name - profile name <li>profileType - profile type <li>protocolType - protocol used to do file transfer (here supported protocolType is ftp, sftp and https)<li>storageMethod - Used to specify if to use database or file system<li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<p>Additional attributes \n<li>typeGroup - Used for network element typeGroup in profile type upgrade<li>releaseNumber - Used for network element release number for profile type upgrade<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul>",
        "operationId": "createFtpProfile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FtpProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "profile created",
            "schema": {
              "$ref": "#/definitions/FtpProfileAttribs"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Creation of profiles failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/profiles/associations/{profileId}": {
      "get": {
        "tags": ["Profiles v1"],
        "summary": "Retrieve profile association information",
        "description": "Get profile association information as a JSON Object for given profile id. \n <p>Attributes: \n<ul><li>jobExecuted - job execution status <li>associatedSchedules - associated schedules </ul><p>Prerequiste: Profile must exist for specified profile id.",
        "operationId": "getFtpProfileAssociations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The ftp profile id for which associations to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile association fetched",
            "schema": {
              "$ref": "#/definitions/ProfileAssociations"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Profile not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/profiles/{profileId}": {
      "get": {
        "tags": ["Profiles v1"],
        "summary": "Retrieve profile information",
        "description": "Get profile information as a JSON Object for given profile id. \n <p>Attributes: \n<ul><li>name - profile name <li>profileType - profile type <li>protocolType - protocol used to do file transfer (here supported protocolType is ftp, sftp and https)<li>storageMethod - Used to specify if to use database or file system<li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<p>Additional attributes: \n<li>typeGroup - Used for network element typeGroup in profile type upgrade<li>releaseNumber - Used for network element release number for profile type upgrade<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore<li>sshPort - used for profile type backup_restore and upgrade \n<li>profileDescription - profile description</ul><p>Prerequiste: Profile must exist for specified profile id.",
        "operationId": "getFtpProfileBasedOnId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The ftp profile with id to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile fetched",
            "schema": {
              "$ref": "#/definitions/FtpProfileAttribs"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Profile not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Profiles v1"],
        "summary": "Delete a profile.",
        "description": "Delete the profile with given profile id. \n <p>Prerequiste: The following attributes should be specified in the request:<ul><li>profileId - profile id</ul>",
        "operationId": "deleteProfile",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The ftp profile with id to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "profile is deleted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Profile are not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "patch": {
        "tags": ["Profiles v1"],
        "summary": "Update profile information",
        "description": "Update profile information as a JSON Object for given profile id. \n <p>For backup_restore profile type, Following attributes can be modified<ul><li>userName - user name <li>userPassword - user password <li>port - port no to access the machine<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore, This setting will take effect on next backup<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul><p>For upgrade profile type, Following attributes can be modified<ul><li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul><p>Prerequiste: Profile must exist for specified profile id.",
        "operationId": "updateFtpProfile",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The ftp profile with id to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "updated profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FtpProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated",
            "schema": {
              "$ref": "#/definitions/FtpProfileAttribs"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Profile not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v1/schedule/assignNE": {
      "post": {
        "tags": ["Scheduls Assign NE v1"],
        "summary": "Assign Schedules to NE Ip with partition id",
        "description": "Assign Schedules to NE Ip with partition id",
        "operationId": "updateSchedulePOST",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Schedule NE Mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedulesAssignNE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pre-Enroll Successful."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Scheduls Assign NE v1"],
        "summary": "Delete a schedule assigned to NE during pre-enrollment.",
        "description": "Delete a schedule assigned to NE during pre-enrollment",
        "operationId": "deleteConfigMgmtBatch",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Schedule NE Mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedulesAssignNE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Schedule to NE mapping is deleted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Schedule not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/schedules": {
      "get": {
        "tags": ["Schedule Management v1"],
        "summary": "Retrieve Schedule details",
        "description": "List of Network Element(s) Maintenance details returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getSchedules",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "scheduleId",
            "in": "query",
            "description": "List of schedule Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of schedule names",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "List of schedule types",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "List of schedule states",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileName",
            "in": "query",
            "description": "List of profile names",
            "required": false,
            "type": "string"
          },
          {
            "name": "releaseNumber",
            "in": "query",
            "description": "List of releaseNumbers",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeGroup",
            "in": "query",
            "description": "List of typeGroups",
            "required": false,
            "type": "string"
          },
          {
            "name": "frequency",
            "in": "query",
            "description": "List of schedule frequencies, Allowed values ONCE, DAILY, WEEKLY, MONTHLY",
            "required": false,
            "type": "string"
          },
          {
            "name": "weekDays",
            "in": "query",
            "description": "List of Schedule weekdays",
            "required": false,
            "type": "string"
          },
          {
            "name": "monday",
            "in": "query",
            "description": "Monday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "tuesday",
            "in": "query",
            "description": "Tuesday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "wednesday",
            "in": "query",
            "description": "Wednesday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "thursday",
            "in": "query",
            "description": "Thursday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "friday",
            "in": "query",
            "description": "Friday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "saturday",
            "in": "query",
            "description": "Saturdy, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "sunday",
            "in": "query",
            "description": "Sunday, Allowed values ON or OFF",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromRecentOperationTime",
            "in": "query",
            "description": "(Optional) Time of recent operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "toRecentOperationTime",
            "in": "query",
            "description": "(Optional) Time of recent operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromNextOperationTime",
            "in": "query",
            "description": "(Optional) Time of next operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "toNextOperationTime",
            "in": "query",
            "description": "(Optional) Time of next operation on Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourcePartitionInfo",
            "in": "query",
            "description": "(Optional) Resource partition info",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: type, frequency, state, weekDays",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Network Element(s) maintenance details",
            "schema": {
              "$ref": "#/definitions/ScheduleDetailsResponseList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve Network element maintenance details",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of Network element maintenance details failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Schedule Management v1"],
        "summary": "Create Schedule",
        "description": "Create Schedule",
        "operationId": "createSchedule",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The schedule attributes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleAttributes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Schedule Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/schedules/nes": {
      "patch": {
        "tags": ["Schedule Management v1"],
        "summary": "Updates Schedule Nes",
        "description": "Updates Schedule Nes. \n<p>Prerequiste: Schedule must exist.",
        "operationId": "updateScheduleNes",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The schedule attributes to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleNesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule updated"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/schedules/{scheduleId}": {
      "put": {
        "tags": ["Schedule Management v1"],
        "summary": "Updates Schedule attributes",
        "description": "Updates Schedule attributes. \n<p>Prerequiste: Schedule must exist.",
        "operationId": "updateSchedule",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The schedule attributes to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleAttributes"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Update schedule associated with given scheduleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule updated",
            "schema": {
              "$ref": "#/definitions/ScheduleDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Schedule Management v1"],
        "summary": "Delete a schedule with given schedule id.",
        "description": "Delete the schedule with given schedule Id. \n <p>Prerequiste: The following attributes should be specified in the request:<ul><li>scheduleId - Schedule Id</ul>",
        "operationId": "deleteConfigMgmtBatch",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Id of the schedule to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule is deleted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Schedule not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/scriptProfiles": {
      "get": {
        "tags": ["Script Profiles v1"],
        "summary": "Retrieve Script Profiles",
        "description": "Script Profiles returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getCustomScripts",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of script profiles",
            "schema": {
              "$ref": "#/definitions/ScriptProfileList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Retrieval of script profiles failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Script Profiles v1"],
        "summary": "Upload a script profile",
        "description": "Upload a script profile into cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "uploadScriptProfile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The Input stream of the script profile to be uploaded.",
            "required": true,
            "type": "file"
          },
          {
            "name": "profileName",
            "in": "formData",
            "description": "Name of the script profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ScriptProfileList"
            }
          },
          "201": {
            "description": "Script profile successfully uploaded",
            "schema": {
              "$ref": "#/definitions/ScriptProfileList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/scriptProfiles/{id}": {
      "get": {
        "tags": ["Script Profiles v1"],
        "summary": "download a script profile definition",
        "description": "download a script profile from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "downloadScriptProfile",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Script profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Script profile successfully downloaded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Script Profiles v1"],
        "summary": "Delete script profile definition",
        "description": "Delete script profile from cassandra database. \n <p>Prerequiste: None.\"",
        "operationId": "deleteScriptProfile",
        "produces": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Script profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Script profile successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/scripts": {
      "get": {
        "tags": ["Script Management v1"],
        "summary": "get all script definitions",
        "description": "Get all available scripts present in the config management root directory \n <p>Prerequiste: None.",
        "operationId": "getAllScripts",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Scripts retrieved",
            "schema": {
              "$ref": "#/definitions/ScriptDefResponseBO"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Script is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/scriptsByName/{scriptName}": {
      "get": {
        "tags": ["Script Management v1"],
        "summary": "Get script by Script Name",
        "description": "Get script by Script Name, if present in the config management root directory \n <p>Prerequiste: Scripts must exist for specified scriptName.",
        "operationId": "getScriptByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "scriptName",
            "in": "path",
            "description": "The type group used for scripts lookup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ScriptDefResponseBO"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Script is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/scriptsByTypeGroup/{typeGroup}": {
      "get": {
        "tags": ["Script Management v1"],
        "summary": "Get scripts belongs to the given TypeGroup",
        "description": "Get scripts belongs to the given TypeGroup, present in the config management root directory \n <p>Prerequiste: Scripts must exist for specified typeGroup.",
        "operationId": "getAllScriptsByTypeGroup",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "typeGroup",
            "in": "path",
            "description": "The type group used for scripts lookup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Script is retrieved based on typeGroup",
            "schema": {
              "$ref": "#/definitions/ScriptDefResponseBO"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Script is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/applyFPGA": {
      "post": {
        "tags": ["Upgrade operations v1"],
        "summary": "Apply FPGA Upgrade",
        "description": "Apply FPGA Upgrade on the Circuit Pack. \n <p>Prerequiste: The Circuit Pack Stage should be COLDINVOKE and Upgrade Result should be AVAILABLE.<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{\n   \"networkConstructName\": \"OME0979_e03501\",\n   \"aid\": \"SP-1-15\"\n}</code></pre>",
        "operationId": "applyFPGA",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Apply FPGA Upgrade",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyFPGAAttributes"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Apply FPGA Upgrade submitted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/fpgaDetails": {
      "get": {
        "tags": ["Upgrade operations v1"],
        "summary": "Retrieve FPGA Details of AID on given NE",
        "description": "Get FPGA details for NEs \n<p>Attributes: <ul><li>networkConstructName - The networkConstructs name <li>AID - The AID of card</ul><p>Prerequiste: None.",
        "operationId": "retrieveFPGADetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstructName",
            "in": "query",
            "description": "Networkconstruct Name for which FPGA Details to be retrieved.",
            "required": true,
            "type": "string"
          },
          {
            "name": "AID",
            "in": "query",
            "description": "AID for which FPGA Details to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "FPGA Details fetched",
            "schema": {
              "$ref": "#/definitions/FPGADetailsResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/fpgaInventory": {
      "get": {
        "tags": ["Upgrade operations v1"],
        "summary": "Retrieve FPGA Inventory of given NE",
        "description": "Get FPGA inventory for NEs \n<p>Attributes: <ul><li>networkConstructName - The networkConstructs name </ul><p>Prerequiste: None.",
        "operationId": "retrieveFPGAInventory",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstructName",
            "in": "query",
            "description": "Networkconstruct Name for which FPGA Inventory to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "FPGA Inventory fetched",
            "schema": {
              "$ref": "#/definitions/FPGADetailsResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/manualInvoke": {
      "post": {
        "tags": ["Upgrade operations v1"],
        "summary": "Manual Invoke of cards",
        "description": "Manual Invoke of cards. \n <p>Specify the NE name and Shelf ID\" +\n<p>Example request:</p>\" +{\n\t\"networkConstructName\": \"65TS_0137\",\n\t\"slotId\": \"PWR-1-61\"\n}",
        "operationId": "manualInvoke",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manual invoke attributes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualInvokeAttributes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpgradeStatusResponse"
            }
          },
          "204": {
            "description": "Manual invoke submitted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/resume": {
      "post": {
        "tags": ["Upgrade operations v1"],
        "summary": "Manual resume of upgrade",
        "description": "Manual resume of upgrade. Resume can be applied on one or more Network Elements \n <p>Specify the NE name, type and typeGroup are optional. neDetails can contain one or more network elements<p>Prerequiste: The Network Elements must be in Suspended State<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{  \n   \"data\":{ \n      \"type\":\"resume\",\n      \"attributes\":{  \n         \"neDetails\":[  \n            {  \n               \"neName\":\"NE1\",\n               \"neType\":\"6500\",\n               \"typeGroup\":\"Ciena6500\"\n            },\n            {  \n               \"neName\":\"NE2\",\n               \"neType\":\"6500\",\n               \"typeGroup\":\"Ciena6500\"\n            }\n         ]\n      }\n   }\n}</code></pre>",
        "operationId": "manualResume",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manual resume attributes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualResume"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Manual resume executed successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/rtrvUpgradeStatus": {
      "get": {
        "tags": ["Upgrade operations v1"],
        "summary": "Retrieve upgrade status of Network Element",
        "description": "Upgrade status returned as a JSON list of objects for Network element \n <p>Attributes: <ul><li>networkConstructName - The networkConstructs name </ul><p>Prerequiste: None.",
        "operationId": "retrieveUpgradeStatus",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstructName",
            "in": "query",
            "description": "Networkconstruct Name for which details need to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Upgrade status for list of Network Element(s)",
            "schema": {
              "$ref": "#/definitions/UpgradeStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Unable to retrieve upgrade status",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/status": {
      "get": {
        "tags": ["Upgrade operations v1"],
        "summary": "Retrieve upgrade status of Circuit Packs of Network Element",
        "description": "Circuit Packs Upgrade status returned as a JSON list of objects for Network element \n <p>Attributes: <ul><li>networkConstructName - The networkConstructs name </ul><p>Prerequiste: None.",
        "operationId": "retrieveCircuitPacks",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "networkConstructName",
            "in": "query",
            "description": "Networkconstruct Name for which details need to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Upgrade status for list of Network Element(s)",
            "schema": {
              "$ref": "#/definitions/UpgradeStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Unable to retrieve upgrade status",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/stop": {
      "post": {
        "tags": ["Upgrade operations v1"],
        "summary": "Stop NE upgrade",
        "description": "Stop NE upgrade. \n <p>Prerequiste: Upgrade should be in progress.\"<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{\n   \"networkConstructNames\":[\"ACMBOCA6500_e05501\",\"OME0979_e03501\",\"OME0979_e06901\"]\n}</code></pre>",
        "operationId": "stopUpgrade",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stop upgrade attributes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopUpgradeAttributes"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Stop upgrade executed successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgrade/suspend": {
      "post": {
        "tags": ["Upgrade operations v1"],
        "summary": "Manual suspend of upgrade",
        "description": "Manual suspend of upgrade. Suspend can be applied on one or more Network Elements \n <p>Specify the NE name, type and typeGroup are optional. neDetails can contain one or more network elements<p>Prerequiste: The Network Elements Upgrade must be in progress State<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{  \n   \"data\":{ \n      \"type\":\"suspend\",\n      \"attributes\":{  \n         \"neDetails\":[  \n            {  \n               \"neName\":\"NE1\",\n               \"neType\":\"6500\",\n               \"typeGroup\":\"Ciena6500\"\n            },\n            {  \n               \"neName\":\"NE2\",\n               \"neType\":\"6500\",\n               \"typeGroup\":\"Ciena6500\"\n            }\n         ]\n      }\n   }\n}</code></pre>",
        "operationId": "manualSuspend",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manual suspend attributes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualSuspend"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Manual Suspend executed successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v1/upgradeStatus": {
      "get": {
        "tags": ["Upgrade operation v1"],
        "summary": "Retrieve upgrade operation status of Network Elements",
        "description": "Upgrade status returned as a JSON list of objects for Network elements \n <p>Prerequiste: None.",
        "operationId": "getUpgradeStatus",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Upgrade status for list of Network Element(s)",
            "schema": {
              "$ref": "#/definitions/CMOperationStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Retrieval of upgrade status failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v2/customScripts": {
      "get": {
        "tags": ["Custom Scripts v2"],
        "summary": "Retrieve Custom Scripts",
        "description": "List of Custom Script(s) details returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getCustomScripts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "scriptId",
            "in": "query",
            "description": "List of customScript Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeGroup",
            "in": "query",
            "description": "The custom scripts by typeGroup to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "The custom scripts by protocol type to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "scriptName",
            "in": "query",
            "description": "List of custom scripts names",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "The custom scripts by description to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: protocolType, typeGroup",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiles fetched",
            "schema": {
              "$ref": "#/definitions/CustomScriptsList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v2/nes": {
      "get": {
        "tags": ["Batch Management v2"],
        "summary": "Retrieve Network Elements given the Batch Type.",
        "description": "Get all Network Elements given Batch Type as a JSON list of objects. \n<p>Prerequiste: None.",
        "operationId": "getBatchedNesByBatchType",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "batchType",
            "in": "query",
            "description": "Retrieve all NEs details by batch type",
            "required": true,
            "type": "string",
            "enum": [
              "BACKUP",
              "PRE_UPGRADE",
              "UPGRADE",
              "POST_UPGRADE",
              "SCRIPT",
              "CUSTOM_SCRIPT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of NEs for batch type",
            "schema": {
              "$ref": "#/definitions/BatchNeStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve NEs",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of NEs failed.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v2/nes/{batchId}": {
      "get": {
        "tags": ["Batch Management v2"],
        "summary": "Retrieve Network Elements given the Batch Id.",
        "description": "Get all Network Elements given Batch Id as a JSON list of objects. \n<p>Prerequiste: Batches must exist for specified batchId.",
        "operationId": "getBatchedNesByBatchId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Retrieve all NEs associated with a batchId",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "List of NEs associated with batch",
            "schema": {
              "$ref": "#/definitions/BatchNeStatusList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Unable to retrieve batched NEs",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Retrieval of batched NEs failed.",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        },
        "deprecated": true
      }
    },
    "/configmgmt/api/v2/profiles": {
      "get": {
        "tags": ["Profiles v2"],
        "summary": "Retrieve profiles",
        "description": "Get profiles informations for profileType or typeGroup \n<p>Attributes: <ul><li>name - profile name <li>profileType - profile type <li>protocolType - protocol used to do file transfer (here supported protocolType is ftp, sftp and https)<li>storageMethod - Used to specify if to use database or file system<li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<p>\n Additional attributes: <li>typeGroup - Used for network element typeGroup in profile type upgrade<li>releaseNumber - Used for network element release number for profile type upgrade<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore<li>sshPort - used for profile type backup_restore and upgrade \n<li>profileDescription - profile description</ul><p>Prerequiste: None.",
        "operationId": "getFtpProfiles",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "List of profile Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileType",
            "in": "query",
            "description": "The NE Maintenance profiles by profile type to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeGroup",
            "in": "query",
            "description": "The NE Maintenance profiles by typeGroup to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "(Optional) Ip Address of Network Construct",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of profile names",
            "required": false,
            "type": "string"
          },
          {
            "name": "releaseNumber",
            "in": "query",
            "description": "The NE Maintenance upgrade profiles by release number to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "storageMethod",
            "in": "query",
            "description": "The NE Maintenance profiles by storage method to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "port",
            "in": "query",
            "description": "The NE Maintenance profiles by port to be retrieved.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sshPort",
            "in": "query",
            "description": "The NE Maintenance profiles by sshPort to be retrieved.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "The NE Maintenance profiles by protocol type to be retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "metaDataFields",
            "in": "query",
            "description": "(Optional) List of meta data to be included. The allowed values are: profileType, protocolType, storageMethod",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiles fetched",
            "schema": {
              "$ref": "#/definitions/NeMaintenanceProfilesList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Profiles v2"],
        "summary": "Trigger the creation of NE Maintenance profile",
        "description": "The Api to create Profile as a JSON Object \n <p>Prerequiste: The following attributes should be specified in the post request:<ul><li>name - profile name <li>profileType - profile type <li>protocolType - protocol used to do file transfer (here supported protocolType is ftp, sftp and https)<li>storageMethod - Used to specify if to use database or file system<li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<p>Additional attributes \n<li>typeGroup - Used for network element typeGroup in profile type upgrade<li>releaseNumber - Used for network element release number for profile type upgrade<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul>",
        "operationId": "createFtpProfile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NeMaintenanceProfileAttributes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "profile created",
            "schema": {
              "$ref": "#/definitions/NeMaintenanceProfilesList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Creation of profiles failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v2/profiles/{profileId}": {
      "patch": {
        "tags": ["Profiles v2"],
        "summary": "Update profile information",
        "description": "Update profile information as a JSON Object for given profile id. \n <p>For backup_restore profile type, Following attributes can be modified<ul><li>userName - user name <li>userPassword - user password <li>port - port no to access the machine<li>numberOfBackupFiles - used for number of backup files to be maintained for profile type backup_restore, This setting will take effect on next backup<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul><p>For upgrade profile type, Following attributes can be modified<ul><li>userName - user name <li>userPassword - user password <li>ipAddress - Ip Address of the machine <li>port - port no to access the machine<li>imageLocation - Image location for doing file transfer from \n<li>sshPort - used for profile type backup_restore and upgrade<li>profileDescription - profile description</ul><p>Prerequiste: Profile must exist for specified profile id.",
        "operationId": "updateFtpProfile",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The ftp profile with id to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "updated profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NeMaintenanceProfileAttributes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated",
            "schema": {
              "$ref": "#/definitions/NeMaintenanceProfilesList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Profile not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/configmgmt/api/v2/scriptProfiles": {
      "get": {
        "tags": ["Script Profiles v2"],
        "summary": "Retrieve Script Profiles",
        "description": "List of Script Profile(s) details returned as a JSON list of objects \n <p>Prerequiste: None.",
        "operationId": "getScriptProfiles",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "(Optional) The searchable text",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "(Optional) List of comma separated fields to search on. If none are specified, all supported fields are implied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of script profile Ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileName",
            "in": "query",
            "description": "List of script profile names",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(Optional) List of comma separated fields by which to sort the result. A dash or negative sign before a field indicates descending order; by default ascending order is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "(Optional) Offset for current index of data to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "Script Profiles fetched",
            "schema": {
              "$ref": "#/definitions/ScriptProfileList"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/fallback-user-mgmt/api/v1/fallbackUsers": {
      "get": {
        "tags": ["Fallback Users v1"],
        "summary": "Retrieve fallback user info for NEs",
        "description": "",
        "operationId": "getUsers",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "neNames",
            "in": "query",
            "description": "Comma-separated NE names",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastOperationState",
            "in": "query",
            "description": "Last operation state, supported values are 'In-progress', 'Succeeded', 'Failed' and 'System-restored'",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the next page",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The size of a returned page, defaulted to 20",
            "required": false,
            "type": "string",
            "default": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "Fallback user info is found successfully",
            "schema": {
              "$ref": "#/definitions/FallbackUserListResponse"
            }
          },
          "400": {
            "description": "Query parameter value is invalid",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error while searching",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "post": {
        "tags": ["Fallback Users v1"],
        "summary": "Create fallback user accounts on NEs",
        "description": "Specify the NE resource type only to create fallback users on all managed NEs of the specified type.<p>Specify the NE resource type and a comma-separated list of NE names to create fallback users on the specified NEs.<p>A global UID and randomly generated passwords are used to create fallback users. UID and password are not specified in the request body.<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{\n    \"neType\": \"6500\",\n    \"neNames\": [\"{{6500_NE_NAME}}\"]\n}</code></pre>",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Fallback user creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FallbackUserCreationRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create user request is accepted",
            "schema": {
              "$ref": "#/definitions/FallbackUserCreationResponse"
            }
          },
          "400": {
            "description": "The create user request input is invalid",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Fallback Users v1"],
        "summary": "Delete fallback user accounts on NEs",
        "description": "Specify the NE resource type only to delete all fallback users previously created on NEs of the specified type.<p>Specify the NE resource type and a comma-separated list of NE names to delete fallback users on the specified NEs.<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{\n    \"neType\": \"6500\",\n    \"neNames\": [\"{{6500_NE_NAME}}\"]\n}</code></pre>",
        "operationId": "deleteUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Fallback user deletion request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FallbackUserDeletionRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete user request is accepted",
            "schema": {
              "$ref": "#/definitions/FallbackUserDeletionResponse"
            }
          },
          "400": {
            "description": "The delete user request input is invalid",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The fallback user is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "409": {
            "description": "The NE is not managed in the system",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/fallback-user-mgmt/api/v1/fallbackUsers/passwordPolicy": {
      "get": {
        "tags": ["Fallback Users v1"],
        "summary": "Retrieve password generation values",
        "description": "",
        "operationId": "getPasswordPolicy",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Password generation values fetched",
            "schema": {
              "$ref": "#/definitions/FallbackPasswordPolicyResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "patch": {
        "tags": ["Fallback Users v1"],
        "summary": "Update password policy information",
        "description": "",
        "operationId": "updatePasswordPolicy",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Fallback password policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FallbackPasswordPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password Policy updated",
            "schema": {
              "$ref": "#/definitions/FallbackPasswordPolicyBO"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "Internal system error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/fallback-user-mgmt/api/v1/fallbackUsers/resetPasswords": {
      "post": {
        "tags": ["Fallback Users v1"],
        "summary": "Reset fallback passwords on NEs",
        "description": "Specify the NE resource type only to reset passwords for all fallback users previously created on NEs of the specified type.<p>Specify the NE resource type and a comma-separated list of NE names to reset fallback passwords on the specified NEs.<p>Example request:</p><pre style='font-size: smaller'><code class='json'>{\n    \"neType\": \"6500\",\n    \"neNames\": [\"{{6500_NE_NAME}}\"],\n    \"resetSchedule\": {\n            \"startTime\" : \"2019-08-22T22:01:00Z\",\n            \"frequency\" : \"daily\"\n       }\n}</code></pre>",
        "operationId": "resetFallbackPasswords",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Fallback password reset request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FallbackPasswordResetRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Reset password request is accepted",
            "schema": {
              "$ref": "#/definitions/FallbackPasswordResetResponse"
            }
          },
          "400": {
            "description": "The reset password request input is invalid",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "The fallback user is not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "409": {
            "description": "The NE is not managed in the system",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/fallback-user-mgmt/api/v1/fallbackUsers/resetPasswords/schedules": {
      "get": {
        "tags": ["Fallback Users v1"],
        "summary": "Retrieve password reset schedules",
        "description": "",
        "operationId": "getPasswordResetSchedules",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Password reset schedules info is found successfully",
            "schema": {
              "$ref": "#/definitions/FallbackResetScheduleListResponse"
            }
          },
          "500": {
            "description": "The server encountered an error while searching",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/fallback-user-mgmt/api/v1/fallbackUsers/resetPasswords/schedules/{id}": {
      "get": {
        "tags": ["Fallback Users v1"],
        "summary": "Retrieve specified password reset schedule",
        "description": "",
        "operationId": "getPasswordResetSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password reset schedule",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset schedule is found successfully",
            "schema": {
              "$ref": "#/definitions/FallbackResetScheduleResponse"
            }
          },
          "404": {
            "description": "Failed to find the specified password reset schedule",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error while searching",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "delete": {
        "tags": ["Fallback Users v1"],
        "summary": "Delete specified password reset schedule",
        "description": "",
        "operationId": "deletePasswordResetSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the password reset schedule",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Password reset schedule is deleted successfully"
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Failed to find the specified password reset schedule",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "500": {
            "description": "The server encountered an error while processing the request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionalAttributes": {
      "type": "object"
    },
    "Aggregation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationBucket"
          }
        }
      }
    },
    "AggregationBucket": {
      "type": "object",
      "properties": {
        "bucketKey": {
          "type": "string"
        },
        "bucketValue": {
          "type": "string"
        },
        "subAggregations": {
          "$ref": "#/definitions/Aggregation"
        }
      }
    },
    "ApplyFPGAAttributes": {
      "type": "object",
      "properties": {
        "networkConstructName": {
          "type": "string"
        },
        "aid": {
          "type": "string"
        }
      }
    },
    "Attributes": {
      "type": "object",
      "properties": {
        "maxConnections": {
          "type": "string"
        },
        "scheduleTime": {
          "type": "string",
          "format": "date-time"
        },
        "scripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        }
      }
    },
    "AttributesBO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "supportedTypeGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportedProfileTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "executionBO": {
          "$ref": "#/definitions/ExecutionBO"
        }
      }
    },
    "BackupImageDetails": {
      "type": "object",
      "properties": {
        "imageLocation": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "neType": {
          "type": "string"
        },
        "fileSize": {
          "type": "string"
        },
        "backupType": {
          "type": "string",
          "enum": ["MANUAL", "SCHEDULED"]
        }
      }
    },
    "BackupImageFtpProfileMapper": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        },
        "backupImageDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupImageDetails"
          }
        }
      }
    },
    "BackupImages": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/BackupImageFtpProfileMapper"
        }
      }
    },
    "BackupOperationDetails": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "operationTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BatchAttributes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BACKUP",
            "PRE_UPGRADE",
            "UPGRADE",
            "POST_UPGRADE",
            "SCRIPT",
            "CUSTOM_SCRIPT"
          ]
        },
        "configMgmtJobId": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["IDLE", "INPROGRESS", "SCHEDULED", "ABORTED", "COMPLETED"]
        },
        "lastExecutionTime": {
          "type": "string",
          "format": "date-time"
        },
        "nextExecutionTime": {
          "type": "string",
          "format": "date-time"
        },
        "scheduleDetails": {
          "$ref": "#/definitions/ScheduleDetails"
        },
        "neDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchNeDetails"
          }
        },
        "additionalAttributes": {
          "$ref": "#/definitions/AdditionalAttributes"
        }
      }
    },
    "BatchNeDetails": {
      "type": "object",
      "properties": {
        "ncId": {
          "type": "string"
        },
        "neName": {
          "type": "string"
        },
        "neType": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        }
      }
    },
    "BatchNeStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/BatchNeStatusAttributes"
        }
      }
    },
    "BatchNeStatusAttributes": {
      "type": "object",
      "properties": {
        "ncId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "siteName": {
          "type": "string"
        },
        "syncState": {
          "type": "string"
        },
        "associationState": {
          "type": "string"
        },
        "maintenanceState": {
          "type": "string"
        },
        "batches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operationType": {
          "type": "string"
        },
        "lastOperationResult": {
          "type": "string"
        },
        "lastExecutionTime": {
          "type": "string"
        },
        "nextExecutionTime": {
          "type": "string"
        },
        "lastRestoreTime": {
          "type": "string"
        },
        "triggerType": {
          "type": "string",
          "enum": ["MANUAL", "SCHEDULED"]
        },
        "operationStage": {
          "type": "string"
        },
        "softwareVersion": {
          "type": "string"
        }
      }
    },
    "BatchNeStatusList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchNeStatus"
          }
        }
      }
    },
    "BatchRemoveRequest": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/BatchRemoveRequestData"
        }
      }
    },
    "BatchRemoveRequestData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["batchRemovalRequests"]
        },
        "attributes": {
          "$ref": "#/definitions/BatchRemoveRequestDataAttributes"
        }
      }
    },
    "BatchRemoveRequestDataAttributes": {
      "type": "object",
      "properties": {
        "batchIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/BatchAttributes"
        }
      }
    },
    "BatchStatusList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchStatus"
          }
        }
      }
    },
    "CMOperationStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CMOperationStatusAttributes"
        }
      }
    },
    "CMOperationStatusAttributes": {
      "type": "object",
      "properties": {
        "ncId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "siteName": {
          "type": "string"
        },
        "maintenanceState": {
          "type": "string"
        },
        "syncState": {
          "type": "string"
        },
        "associationState": {
          "type": "string"
        },
        "softwareVersion": {
          "type": "string"
        },
        "lastOperationTime": {
          "type": "string"
        },
        "nextOperationTime": {
          "type": "string"
        },
        "operationStage": {
          "type": "string"
        },
        "batches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastOperationResult": {
          "type": "string"
        }
      }
    },
    "CMOperationStatusList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CMOperationStatus"
          }
        }
      }
    },
    "CommandResult": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Result"
        }
      }
    },
    "ConfigDOC": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ConfigDOCAttributes"
        }
      }
    },
    "ConfigDOCAttributes": {
      "type": "object",
      "properties": {
        "networkConstructName": {
          "type": "string"
        },
        "networkConstructId": {
          "type": "string"
        },
        "primaryState": {
          "type": "string"
        },
        "docName": {
          "type": "string"
        }
      }
    },
    "ConfigDOCResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigDOC"
          }
        }
      }
    },
    "ConfigMgmtJobOutput": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigMgmtJobOutputData"
        }
      }
    },
    "ConfigMgmtJobOutputData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ScriptResultAttributes"
        }
      }
    },
    "ConfigMgmtJobResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "input": {
          "$ref": "#/definitions/UserInput"
        },
        "output": {
          "$ref": "#/definitions/ConfigMgmtJobOutput"
        }
      }
    },
    "ConnectionAttributes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionAttributesData"
          }
        }
      }
    },
    "ConnectionAttributesData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "CreateBFDSessionRequest": {
      "type": "object",
      "properties": {
        "bfdSessionName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "neighbour": {
          "type": "string"
        },
        "bfdProfile": {
          "type": "string"
        }
      }
    },
    "CustomScript": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CustomScriptAttributes"
        }
      }
    },
    "CustomScriptAttributes": {
      "type": "object",
      "properties": {
        "typeGroup": {
          "type": "string"
        },
        "protocolType": {
          "type": "string"
        },
        "scriptName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CustomScriptList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomScript"
          }
        }
      }
    },
    "CustomScriptsList": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaData"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomScript"
          }
        }
      }
    },
    "DOCDetail": {
      "type": "object",
      "properties": {
        "networkConstructName": {
          "type": "string"
        },
        "docNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EditDOC": {
      "type": "object",
      "properties": {
        "operationType": {
          "type": "string",
          "enum": ["ENABLE", "DISABLE"]
        },
        "docDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DOCDetail"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorDescription": {
          "type": "string"
        },
        "msgAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Errors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "ExecutionBO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "raCommand": {
          "type": "string"
        },
        "productRequestParams": {
          "$ref": "#/definitions/ProductRequestParamsBO"
        }
      }
    },
    "FPGADetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/FPGADetailsAttributes"
        }
      }
    },
    "FPGADetailsAttributes": {
      "type": "object",
      "properties": {
        "softwareType": {
          "type": "string"
        },
        "currentFPGA": {
          "type": "string"
        },
        "availableFPGA": {
          "type": "string"
        }
      }
    },
    "FPGADetailsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FPGADetails"
          }
        }
      }
    },
    "FallbackPasswordPolicyBO": {
      "type": "object",
      "properties": {
        "lowercaseMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "uppercaseMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "digitMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "specialMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "passwordLength": {
          "type": "integer",
          "format": "int32"
        },
        "maximumConsecutiveCharacters": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FallbackPasswordPolicyRequest": {
      "type": "object",
      "properties": {
        "lowercaseMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "uppercaseMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "digitMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "specialMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "passwordLength": {
          "type": "integer",
          "format": "int32"
        },
        "maximumConsecutiveCharacters": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FallbackPasswordPolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FallbackPasswordPolicyRequest"
        }
      }
    },
    "FallbackPasswordResetRequest": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resetSchedule": {
          "$ref": "#/definitions/FallbackResetScheduleRequest"
        }
      }
    },
    "FallbackPasswordResetResponse": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resetSchedule": {
          "$ref": "#/definitions/FallbackResetScheduleResponse"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "FallbackResetScheduleListResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/FallbackUserListMeta"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FallbackResetScheduleResponse"
          }
        }
      }
    },
    "FallbackResetScheduleRequest": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        }
      }
    },
    "FallbackResetScheduleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "frequency": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextExecutionTime": {
          "type": "string"
        }
      }
    },
    "FallbackUserCreationRequest": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FallbackUserCreationResponse": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "FallbackUserDeletionRequest": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FallbackUserDeletionResponse": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "FallbackUserListMeta": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FallbackUserListResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/FallbackUserListMeta"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FallbackUserResponse"
          }
        }
      }
    },
    "FallbackUserResponse": {
      "type": "object",
      "properties": {
        "neType": {
          "type": "string"
        },
        "neName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "lastOperationState": {
          "type": "string"
        },
        "lastOperationNote": {
          "type": "string"
        },
        "lastOperationTime": {
          "type": "string"
        }
      }
    },
    "FtpProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "profileType": {
          "type": "string",
          "enum": ["backup_restore", "upgrade"]
        },
        "protocolType": {
          "type": "string",
          "enum": ["sftp", "ftp", "https"]
        },
        "storageMethod": {
          "type": "string",
          "enum": ["filesystem", "database"]
        },
        "userName": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "imageLocation": {
          "type": "string"
        }
      }
    },
    "FtpProfileAttribs": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/FtpProfile"
        }
      }
    },
    "FtpProfileResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FtpProfileAttribs"
          }
        }
      }
    },
    "Included": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/IncludedAttributes"
        }
      }
    },
    "IncludedAttributes": {
      "type": "object",
      "properties": {
        "ncId": {
          "type": "string"
        },
        "neName": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "profileName": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "neType": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "failOnServiceAffectingAlarms": {
          "type": "boolean",
          "default": false
        },
        "manuallyInvokeCards": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "IncludedAttributesBO": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      }
    },
    "IncludedDataBO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/IncludedAttributesBO"
        }
      }
    },
    "Input": {
      "type": "object",
      "properties": {
        "inputId": {
          "type": "string"
        },
        "cmdFile": {
          "type": "string"
        },
        "protocolType": {
          "type": "string",
          "enum": ["cli", "tl1", "netconf"]
        }
      }
    },
    "Links": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri"
        },
        "first": {
          "type": "string",
          "format": "uri"
        },
        "last": {
          "type": "string",
          "format": "uri"
        },
        "prev": {
          "type": "string",
          "format": "uri"
        },
        "next": {
          "type": "string",
          "format": "uri"
        },
        "current": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ManualInvokeAttributes": {
      "type": "object",
      "properties": {
        "networkConstructName": {
          "type": "string"
        },
        "slotId": {
          "type": "string"
        }
      }
    },
    "ManualResume": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ManualResumeData"
        }
      }
    },
    "ManualResumeAttributes": {
      "type": "object",
      "properties": {
        "neDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeDetail"
          }
        }
      }
    },
    "ManualResumeData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ManualResumeAttributes"
        }
      }
    },
    "ManualSuspend": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ManualSuspendData"
        }
      }
    },
    "ManualSuspendAttributes": {
      "type": "object",
      "properties": {
        "neDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeDetail"
          }
        }
      }
    },
    "ManualSuspendData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ManualSuspendAttributes"
        }
      }
    },
    "MetaData": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aggregation"
          }
        }
      }
    },
    "NeBackupImagesResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackupImages"
          }
        }
      }
    },
    "NeBackupRestoreStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/NeBackupRestoreStatusAttributes"
        }
      }
    },
    "NeBackupRestoreStatusAttributes": {
      "type": "object",
      "properties": {
        "ncId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "siteName": {
          "type": "string"
        },
        "maintenanceState": {
          "type": "string"
        },
        "syncState": {
          "type": "string"
        },
        "associationState": {
          "type": "string"
        },
        "lastBackupTime": {
          "type": "string"
        },
        "lastRestoreTime": {
          "type": "string"
        },
        "nextBackupTime": {
          "type": "string"
        },
        "backupType": {
          "type": "string",
          "enum": ["MANUAL", "SCHEDULED"]
        },
        "batches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastOperationResult": {
          "type": "string"
        }
      }
    },
    "NeBackupRestoreStatusList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeBackupRestoreStatus"
          }
        }
      }
    },
    "NeDetail": {
      "type": "object",
      "properties": {
        "neName": {
          "type": "string"
        },
        "neType": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        }
      }
    },
    "NeMaintenanceDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/NeMaintenanceDetailsAttributes"
        }
      }
    },
    "NeMaintenanceDetailsAttributes": {
      "type": "object",
      "properties": {
        "networkConstructId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "longName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "managementSessionId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "associationState": {
          "type": "string"
        },
        "associationStateQualifier": {
          "type": "string",
          "enum": ["MANUAL", "SYSTEM", "NETWORK"]
        },
        "associationStateQualifierReason": {
          "type": "string"
        },
        "syncState": {
          "type": "string"
        },
        "physicalLocationId": {
          "type": "string"
        },
        "subnetName": {
          "type": "string"
        },
        "softwareActiveVersion": {
          "type": "string"
        },
        "softwareAvailableVersions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "backupSchedules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "upgradeSchedules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customScriptSchedules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "recentOperation": {
          "type": "string"
        },
        "recentOperationTime": {
          "type": "string",
          "format": "date-time"
        },
        "nextOperation": {
          "type": "string"
        },
        "nextOperationTime": {
          "type": "string",
          "format": "date-time"
        },
        "recentOperationState": {
          "type": "string"
        },
        "recentOperationProgressStage": {
          "type": "string"
        },
        "resourcePartitionInfo": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NeMaintenanceDetailsList": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaData"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeMaintenanceDetails"
          }
        }
      }
    },
    "NeMaintenanceProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/NeMaintenanceProfileAttributes"
        }
      }
    },
    "NeMaintenanceProfileAttributes": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "profileType": {
          "type": "string",
          "enum": ["backup_restore", "upgrade"]
        },
        "protocolType": {
          "type": "string",
          "enum": ["sftp", "ftp", "https"]
        },
        "storageMethod": {
          "type": "string",
          "enum": ["filesystem", "database"]
        },
        "userName": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "imageLocation": {
          "type": "string"
        }
      }
    },
    "NeMaintenanceProfilesList": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaData"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeMaintenanceProfile"
          }
        }
      }
    },
    "NeUpgradeDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/NeUpgradeDetailsAttributes"
        }
      }
    },
    "NeUpgradeDetailsAttributes": {
      "type": "object",
      "properties": {
        "networkConstructId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "longName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "managementSessionId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "typeGroup": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "associationState": {
          "type": "string"
        },
        "associationStateQualifier": {
          "type": "string",
          "enum": ["MANUAL", "SYSTEM", "NETWORK"]
        },
        "associationStateQualifierReason": {
          "type": "string"
        },
        "syncState": {
          "type": "string"
        },
        "physicalLocationId": {
          "type": "string"
        },
        "subnetName": {
          "type": "string"
        },
        "gneOrRNE": {
          "type": "string"
        },
        "recentOperation": {
          "type": "string"
        },
        "recentOperationTime": {
          "type": "string",
          "format": "date-time"
        },
        "recentOperationState": {
          "type": "string"
        },
        "recentOperationProgressStage": {
          "type": "string"
        },
        "resourcePartitionInfo": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "backupOperation": {
          "$ref": "#/definitions/BackupOperationDetails"
        },
        "releaseManagementOperation": {
          "$ref": "#/definitions/ReleaseManagementOperationDetails"
        },
        "upgradeOperation": {
          "$ref": "#/definitions/UpgradeOperationDetails"
        }
      }
    },
    "NeUpgradeDetailsList": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaData"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeUpgradeDetails"
          }
        }
      }
    },
    "NetworkConstructs": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkConstructsData"
          }
        }
      }
    },
    "NetworkConstructsData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "PortMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/PortMappingAttributes"
        }
      }
    },
    "PortMappingAttributes": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "PortMappingList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortMapping"
          }
        }
      }
    },
    "PortProvisioningDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "shelf": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "clientType": {
          "type": "string"
        },
        "otn": {
          "type": "boolean",
          "default": false
        },
        "maxFrameSize": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rate": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "scriptFileProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reSyncInventory": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ProductRequestParamsBO": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string"
        },
        "p": {
          "type": "string"
        }
      }
    },
    "ProfileAssociationAttributes": {
      "type": "object",
      "properties": {
        "jobExecuted": {
          "type": "boolean",
          "default": false
        },
        "associatedSchedules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProfileAssociations": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProfileAssociationsData"
        }
      }
    },
    "ProfileAssociationsData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ProfileAssociationAttributes"
        }
      }
    },
    "ProfileDataBO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ProfilesBO": {
      "type": "object",
      "properties": {
        "profileDataBOList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileDataBO"
          }
        }
      }
    },
    "Relationships": {
      "type": "object",
      "properties": {
        "networkConstructs": {
          "$ref": "#/definitions/NetworkConstructs"
        },
        "connectionAttributes": {
          "$ref": "#/definitions/ConnectionAttributes"
        }
      }
    },
    "RelationshipsBO": {
      "type": "object",
      "properties": {
        "profilesBO": {
          "$ref": "#/definitions/ProfilesBO"
        },
        "schemasBO": {
          "$ref": "#/definitions/SchemasBO"
        }
      }
    },
    "ReleaseManagementOperationDetails": {
      "type": "object",
      "properties": {
        "softwareActiveVersion": {
          "type": "string"
        },
        "softwareAvailableVersions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "schedules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "stage": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Result": {
      "type": "object"
    },
    "ScheduleAttributes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BACKUP",
            "PRE_UPGRADE",
            "UPGRADE",
            "POST_UPGRADE",
            "SCRIPT",
            "CUSTOM_SCRIPT"
          ]
        },
        "configMgmtJobId": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["IDLE", "INPROGRESS", "SCHEDULED", "ABORTED", "COMPLETED"]
        },
        "lastExecutionTime": {
          "type": "string",
          "format": "date-time"
        },
        "nextExecutionTime": {
          "type": "string",
          "format": "date-time"
        },
        "numberOfNEs": {
          "type": "integer",
          "format": "int32"
        },
        "scheduleDetails": {
          "$ref": "#/definitions/ScheduleDetails"
        },
        "additionalAttributes": {
          "$ref": "#/definitions/AdditionalAttributes"
        }
      }
    },
    "ScheduleData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ScheduleAttributes"
        }
      }
    },
    "ScheduleDetails": {
      "type": "object",
      "properties": {
        "scheduleFrequency": {
          "type": "string",
          "enum": ["ONCE", "DAILY", "WEEKLY", "MONTHLY"]
        },
        "scheduleTime": {
          "type": "string",
          "format": "date-time"
        },
        "scheduleWeeklyDays": {
          "$ref": "#/definitions/ScheduleWeeklyDays"
        }
      }
    },
    "ScheduleDetailsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ScheduleData"
        }
      }
    },
    "ScheduleDetailsResponseList": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaData"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleData"
          }
        }
      }
    },
    "ScheduleNesPatch": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleNesPatchOperation"
          }
        }
      }
    },
    "ScheduleNesPatchOperation": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "enum": ["ADD", "REMOVE"]
        },
        "scheduleId": {
          "type": "string"
        },
        "neDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchNeDetails"
          }
        }
      }
    },
    "ScheduleWeeklyDays": {
      "type": "object",
      "properties": {
        "mon": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "tue": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "wed": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "thu": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "fri": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "sat": {
          "type": "string",
          "enum": ["ON", "OFF"]
        },
        "sun": {
          "type": "string",
          "enum": ["ON", "OFF"]
        }
      }
    },
    "SchedulesAssignNE": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "additionalIpAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourcePartitionInfo": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "backupSchedule": {
          "type": "string"
        }
      }
    },
    "SchemasBO": {
      "type": "object",
      "properties": {
        "schemasDataBOList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemasDataBO"
          }
        }
      }
    },
    "SchemasDataBO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Script": {
      "type": "object",
      "properties": {
        "scriptName": {
          "type": "string"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Input"
          }
        },
        "relationships": {
          "$ref": "#/definitions/ScriptRelationships"
        }
      }
    },
    "ScriptBO": {
      "type": "object",
      "properties": {
        "scriptDataBO": {
          "$ref": "#/definitions/ScriptDataBO"
        },
        "includedBO": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncludedDataBO"
          }
        }
      }
    },
    "ScriptDataBO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributesBO": {
          "$ref": "#/definitions/AttributesBO"
        },
        "relationshipsBO": {
          "$ref": "#/definitions/RelationshipsBO"
        }
      }
    },
    "ScriptDefRequestBO": {
      "type": "object",
      "properties": {
        "scriptBO": {
          "$ref": "#/definitions/ScriptBO"
        }
      }
    },
    "ScriptDefResponseBO": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/ScriptDefRequestBO"
        },
        "creationTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ScriptProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ScriptProfileAttributes"
        }
      }
    },
    "ScriptProfileAttributes": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        }
      }
    },
    "ScriptProfileList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptProfile"
          }
        }
      }
    },
    "ScriptRelationship": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ScriptRelationshipData"
        }
      }
    },
    "ScriptRelationshipData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ScriptRelationships": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/ScriptRelationship"
        },
        "userdata": {
          "$ref": "#/definitions/ScriptRelationship"
        }
      }
    },
    "ScriptResult": {
      "type": "object",
      "properties": {
        "scriptName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "commandResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandResult"
          }
        }
      }
    },
    "ScriptResultAttributes": {
      "type": "object",
      "properties": {
        "scriptResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptResult"
          }
        }
      }
    },
    "StopUpgradeAttributes": {
      "type": "object",
      "properties": {
        "networkConstructNames": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpgradeOperationDetails": {
      "type": "object",
      "properties": {
        "manualInvoke": {
          "type": "boolean",
          "default": false
        },
        "isWorkFlow": {
          "type": "boolean",
          "default": false
        },
        "haltOnUpgradeFailure": {
          "type": "boolean",
          "default": false
        },
        "sequenceOrder": {
          "type": "integer",
          "format": "int32"
        },
        "mcpManaged": {
          "type": "boolean",
          "default": false
        },
        "pendingQueue": {
          "type": "integer",
          "format": "int32"
        },
        "stage": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpgradeStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/UpgradeStatusAttributes"
        }
      }
    },
    "UpgradeStatusAttributes": {
      "type": "object",
      "properties": {
        "networkConstructName": {
          "type": "string"
        },
        "isWorkFlow": {
          "type": "boolean",
          "default": false
        },
        "shelf": {
          "type": "string"
        },
        "equipment": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "fpgaApplied": {
          "type": "boolean",
          "default": false
        },
        "featureList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statusList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpgradeStatusResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpgradeStatus"
          }
        }
      }
    },
    "UserInput": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserInputData"
        },
        "included": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Included"
          }
        }
      }
    },
    "UserInputData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/Attributes"
        },
        "batchattributes": {
          "$ref": "#/definitions/BatchAttributes"
        },
        "relationships": {
          "$ref": "#/definitions/Relationships"
        }
      }
    }
  }
}
